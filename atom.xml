<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yao&#39;s Blog</title>
  
  <subtitle>Welcome to yao&#39;s blog.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://YaojiaxinPC.github.io/"/>
  <updated>2018-11-08T09:25:38.115Z</updated>
  <id>https://YaojiaxinPC.github.io/</id>
  
  <author>
    <name>姚佳鑫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A* 寻路</title>
    <link href="https://YaojiaxinPC.github.io/36Astar/"/>
    <id>https://YaojiaxinPC.github.io/36Astar/</id>
    <published>2018-11-08T10:02:59.000Z</published>
    <updated>2018-11-08T09:25:38.115Z</updated>
    
    <content type="html"><![CDATA[<p>　　 本文介绍</p><a id="more"></a><p>　　 有限状态机，是在有状态切换的场景下使用。能减低系统耦合度，也有利于新状态的加入。</p><h2 id="场景举例"><a href="#场景举例" class="headerlink" title="场景举例"></a>场景举例</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　 本文介绍&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://YaojiaxinPC.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="寻路" scheme="https://YaojiaxinPC.github.io/tags/%E5%AF%BB%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>有限状态机（FMS）</title>
    <link href="https://YaojiaxinPC.github.io/35FMS/"/>
    <id>https://YaojiaxinPC.github.io/35FMS/</id>
    <published>2018-11-06T12:02:59.000Z</published>
    <updated>2018-11-08T09:01:57.516Z</updated>
    
    <content type="html"><![CDATA[<p>　　 本文介绍有限状态机。一种使用于状态切换的设计模式。</p><a id="more"></a><p>　　 有限状态机，是在有状态切换的场景下使用。能减低系统耦合度，也有利于新状态的加入。</p><h2 id="场景举例"><a href="#场景举例" class="headerlink" title="场景举例"></a>场景举例</h2><p>　　 键盘上的“A”、“D”、“W”和“S”，通常意义上，是表示左右上下。</p><p>　　 普通写法，是在函数中进行switch判断。但是这样后面新加按键，这个switch就会越来越长。</p><p>　　如果我不想用switch呢，那用广播模式？让按键处理类订阅这里的按键输入，如果是自己想处理的按键，就进行处理。那就是弄一个全局委托，新的按键处理类都+=该委托，然后在回调函数中if输入==自己要处理的键，就处理，否则return。</p><p>　　当然这里可以优化一下，并不需要广播，增加主题订阅就行，也就是<a href="https://wiki.unity3d.com/index.php/CSharpMessenger_Extended" rel="external nofollow noopener noreferrer" target="_blank">CSharpMessenger Extended</a> ，国内无法访问的话，我这里把网页搞下来了一份<a href="/contentimg/35/CSharpMessenger_Extended.html">原网站复制</a>  。</p><p>　　就是用一个字典，保存主题和对应的全局委托。使用者订阅某个主题的委托回调，发送者就是根据特定主题来广播。利用广播模式，能避免类间相互耦合交错。</p><h2 id="场景升级"><a href="#场景升级" class="headerlink" title="场景升级"></a>场景升级</h2><p>　　广播模式适用的场景确实超级多。但是也有它不适合的。</p><p>　　假如这个场景中，移动的时候，需要播放转身的动画：假设一开始是朝向W的正前方方向，我按下“D”，准备向左移动，这里需要预先播放一个顺时针转90°的动画，然后才能向左移动一步。</p><p>　　这样，播放动画这里，需要“前一个状态”+“下一个状态”，两个状态的记录。虽然在广播模式中可以使用传递两个参数的做法。但是其实还有更好的模式–FMS，有限状态机。</p><p>　　这东西github搜了一下，好几个。</p><ol><li><a href="https://github.com/thefuntastic/Unity3d-Finite-State-Machine" rel="external nofollow noopener noreferrer" target="_blank">Unity3d-Finite-State-Machine</a>  670个星</li><li><a href="https://github.com/xanathar/FSMsharp" rel="external nofollow noopener noreferrer" target="_blank">FSMsharp</a>  67个星</li><li><a href="https://github.com/MhmmdAb/TinyStateMachine" rel="external nofollow noopener noreferrer" target="_blank">TinyStateMachine</a>  22个星</li><li><a href="https://github.com/MarcoMig/Finite-State-Machine-FSM" rel="external nofollow noopener noreferrer" target="_blank">Finite-State-Machine-FSM</a>  9个星 </li></ol><p>　　都是写得蛮不错的。可以参考，不过建议了解一下wiki上的<a href="https://wiki.unity3d.com/index.php/Finite_State_Machine" rel="external nofollow noopener noreferrer" target="_blank">Finite State Machine</a>  ，这里我也把它load下来了<a href="/contentimg/35/Finite_State_Machine.html">原网站复制</a> 。</p><p>　　讲的是设一个类，保存当前状态，以及下一个可以切换的状态；进行状态切换时，需要执行退出当前状态时需要执行的函数，然后切换为下一个状态，并执行进入该状态需要执行的函数；当然还有惯例执行的函数。例子中是巡逻和追击两个状态切换：正常状态下是巡逻，当距离靠近时促发追击，而被拉长距离后应该丢失跟踪，并恢复巡逻。</p><p>　　这里的状态切换，可以通过第三方管理类来操作，也可以在内部惯例执行函数中进行操作。例子中是第三方管理类开放接口，然后在惯例执行函数中进行判断是否需要切换状态。</p><p>　　回到开头提的场景，转身动画。</p><p>　　这里利用FMS，定义：</p><ol><li>AddTransition(Transition.W,StateID.WD)-旋转90°</li><li>AddTransition(Transition.W,StateID.WS)-旋转180°</li><li>AddTransition(Transition.W,StateID.WA)-旋转270°</li></ol><p>　　对应设置4x3共12种情况，每种情况中，状态切换前，播放上一个状态退出的动画，这里没有动作；然后状态切换，最后执行新状态进入的动画，就是播放旋转动画；在惯例执行函数中判断是否仍然触发同一个方向的操作，就不转动，直接前进。</p><p>　　一般状态退出函数，是放一些归位操作，或者是一些释放操作，避免本状态的一些因素影响到新状态。</p><p>　　当然这里算过度设计，一下搞了12个新类+枚举，存在大量重复代码。实际场景中，FMS是使用在复杂状态间的切换。像这里的旋转动画，简单搞两个变量，通过4个角度来判断就可以了。</p><p>　　实际使用中，像“走”的时候，下一个状态可以是“跑”/“跳”/“蹲”/“停”；但是“跳”的时候，规定要等动作做完后自动转到“停”的状态，也就是必须执行完“跳”到落地的流程，转到“停”的状态，才能切换其他状态，所以“跳”只对应“停”。这样排完全部状态切换后，写逻辑处理时，就不担心写出来多余的状态切换了，因为不存在那种切换，不用额外去写函数处理判断。</p><p>　　本文单单理论这样讲不是很好，后面结合吃豆人案例来详细分析该模式的使用吧。</p><p>　　结尾也安利一篇博文：<a href="https://blog.csdn.net/poem_qianmo/article/details/52824776" rel="external nofollow noopener noreferrer" target="_blank">【游戏设计模式】之三 状态模式、有限状态机 &amp; Unity版本实现</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　 本文介绍有限状态机。一种使用于状态切换的设计模式。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://YaojiaxinPC.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="FMS" scheme="https://YaojiaxinPC.github.io/tags/FMS/"/>
    
  </entry>
  
  <entry>
    <title>六大设计模式原则</title>
    <link href="https://YaojiaxinPC.github.io/34DesignPattern/"/>
    <id>https://YaojiaxinPC.github.io/34DesignPattern/</id>
    <published>2018-11-06T07:02:59.000Z</published>
    <updated>2018-11-07T16:50:13.714Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文介绍为什么有“面向抽象编程”，以及六大原则。   </p><a id="more"></a><p>　　工作中，为什么新人要用好多时间，而且项目进展还越来越慢，问题越来越多的；而高手却是前面慢，后面项目越来越顺利的？</p><p>　　这里排除技术上的因素外，主要就是编程思想的影响了。下面简单理论分析，暂不提供具体代码。</p><h2 id="为什么需要编程思想"><a href="#为什么需要编程思想" class="headerlink" title="为什么需要编程思想"></a>为什么需要编程思想</h2><h3 id="举例做超市收银系统"><a href="#举例做超市收银系统" class="headerlink" title="举例做超市收银系统"></a>举例做超市收银系统</h3><p>　　一开始卖的是水果。有西瓜、苹果、香蕉等等，每种价格不同，包装方式不同等等好多不同，所以拆成多个水果class+main函数、计费系统&amp;结算系统。</p><h4 id="需求①：给每种水果标价格"><a href="#需求①：给每种水果标价格" class="headerlink" title="需求①：给每种水果标价格"></a>需求①：给每种水果标价格</h4><p>　　增加函数int Sell()获得。在main使用switch选择使用哪种水果。</p><h4 id="需求②：卖相差的水果打折"><a href="#需求②：卖相差的水果打折" class="headerlink" title="需求②：卖相差的水果打折"></a>需求②：卖相差的水果打折</h4><p>　　修改函数Sell，进行选择是否打折。</p><h4 id="需求③：促销，买3个苹果送一个香蕉"><a href="#需求③：促销，买3个苹果送一个香蕉" class="headerlink" title="需求③：促销，买3个苹果送一个香蕉"></a>需求③：促销，买3个苹果送一个香蕉</h4><p>　　main函数中严格按照先苹果后香蕉的顺序收费，先计算多少个苹果，同时跨class，传递该数字给香蕉，香蕉个数减优惠。这里可以使用全局static，为了防止出问题，增加计费前的置零+结算后的置零操作函数；或者在main中传递参数，增加main中判断是否需要传递参数的代码。也要修改Sell函数！</p><p>　　当需求变成买2个西瓜送苹果时，同样方式增加修改函数。现在3个class发生交叉，也出现了重复函数，最重要是main增加了计费顺序判断的大量代码，Sell函数也交错复杂。</p><h4 id="需求④：买10元水果送优惠券，下次消费可以使用"><a href="#需求④：买10元水果送优惠券，下次消费可以使用" class="headerlink" title="需求④：买10元水果送优惠券，下次消费可以使用"></a>需求④：买10元水果送优惠券，下次消费可以使用</h4><p>　　在main函数水果计费后，结算前的位置，第一次插入代码：检查是否有超过10元，并提示是否进行优惠减免。</p><p>….</p><h3 id="项目回顾"><a href="#项目回顾" class="headerlink" title="项目回顾"></a>项目回顾</h3><p>　　在增加N个需求后，回顾项目代码，发现简单几个功能而已，就十几个函数，十几个控制状态参数，甚至class间跨越交互，main函数更加是几千行的判断跳转代码。</p><p>　　随着项目发展，后期加功能越来越难，而且加功能后，还会影响到前期的功能。</p><p>　　而且如果这时候新拿了卖鱼的收银系统，怎么办？全部代码不能重用，得全部重写！</p><p>　　软件真这么差吗？为什么网页在IE能打开，在360也能打开，在手机也能打开，那是他们做了十几套这样的页面来让我们打开吗？事实只有一个html。但是这里怎么都是收银系统，我就得分卖水果，然后卖鱼又得重新做了？</p><h3 id="引入设计模式解决困境"><a href="#引入设计模式解决困境" class="headerlink" title="引入设计模式解决困境"></a>引入设计模式解决困境</h3><p>　　目前该收银系统，是买东西，东西有很多种，有水果，有肉等等，但是收银系统，归根到底就是卖东西，分统计价格，结算两个步骤。</p><p>　　统计价格，这里应该笼统成一个抽象—“顾客买的东西”。可以细分成很多种东西，但是它们只提供int Sell()函数出来。在main中统一调用该函数即可。所以这里创建根抽象类IGoods，提供对外int Sell()函数。然后由具体的物品类来继承重写该类。</p><p>　　但是这样我怎么知道要使用哪个具体类？这就是商品条码的作用了。</p><p>　　计费时，会嘀一下商品条码，这时候我得到了一个标识，这个标识是唯一的，能区分它是哪个具体计费类。所以在抽象类IGoods中增加传递该条码的函数。然后在子类中判断是否该条码对应的是自己，是的话才执行计费，不是就返回。</p><p>　　这样的好处是：</p><ol><li>同前面需求②，水果打折，那我直接增加新的类来处理就行，因为要打折的水果，条码是可以和普通水果不同来区分的。</li><li>需求③呢，一样，新增计费类(appleaddbanana)，内部通过实例化原有水果类来处理，这样对原先存在的那些代码不修改，而这个打折，也可以通过条码不同来区分。</li><li>需求④呢？给优惠券新增计费类，不过int Sell()出来的是负数而已。对原main代码保持不变！当然，这里你可能会说，没传递价格给优惠券，怎么知道要不要给优惠券的，等下被人恶意刷券怎么办？</li></ol><p>　　那就拆分吧，计费系统分成两个抽象：要卖东西+优惠。</p><p>　　这样换卖鱼的系统，两个抽象类、main函数，计费函数和结算函数都不用修改，只需要新增具体计费类就行。如果牛逼一点，把这个“具体计费类”，通过反射、公式计算等等方式，搞成不用写代码就能实现具体类的那种，那更加简单了！拿到卖金条收银系统的项目，这个系统直接带过去，现场问一下有那些计费方式，整个excel，让程序读一下，马上就能运行正常计费收费了！</p><h2 id="编程思想是什么"><a href="#编程思想是什么" class="headerlink" title="编程思想是什么"></a>编程思想是什么</h2><p>　　这个比较复杂，表现形式上，就是能让项目良好运行下去的思想。</p><p>　　像前面的收银系统，抽象出来“卖的东西”+“优惠”，就解决了main函数中几千行switch的问题，甚至跨行业收银都不成问题了。这样的项目才有发展的可能性，才能衍生出卖鱼收银系统，卖金条收银系统等等多种多样的项目。不然，像未优化前那样，来多几个水果，整个系统就跑不动了，项目哪里还进行得下去？更别说思想传承了。</p><p>　　而上面的利用“抽象”，实质就是课本上经常提到的“面向抽象编程”！编程思想很虚很广博，但是归根到底，就是“抽象”两个字。</p><p>　　计算机，就是由1010这样的二进制组成的，在这个基础上，才衍生出了python、Lua、php，甚至中文的易语言等等众多的高级语言，它们表现层完全不一样，能实现的功能也不一样，但是抽象出来，都是同一个二进制。</p><p>　　现在功能丰富的电子产品，功能越来越多，但是剖析下去，再剖析下去，就只是电路板上的1010。</p><p>　　编程思想，实际就是抽象。有了抽象，才能有具体的实现，进而有丰富多彩的实现。</p><p>　　编程思想由“六大原则”组成，是一个基于“抽象”，实现“高内聚，低耦合”目的的思想。</p><h2 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h2><h3 id="单一责任原则"><a href="#单一责任原则" class="headerlink" title="单一责任原则"></a>单一责任原则</h3><blockquote><p> 单一责任原则(Single Responsibility Principle, SRP)：一个类/函数只负责一个功能，同时只能有一个因素引起它变化。</p></blockquote><p>　　像上面的收银系统，抽象后，一个类对应一个条码（一个变化因素），只对应一种水果的计费方式（一个功能）。</p><p>　　这里不单单在class定义上，在函数的定义上也是。举例计算机加减乘除。最好的做法，就是把四个运算分为四个函数。这样就是一个变化因素–运算符，来选择应该执行哪个具体运算的函数，这个函数只负责这种运算功能。</p><p>　　概念上很抽象，但是做到后，首先是能精简代码，避免重复的代码。因为抽出来函数后，在重复的地方，就是调用这个抽出来的函数，就避免了重复。</p><p>　　其次，在这个函数里面，它只需要做好这件事就行，就能控制好输入输出，提高系统容错性。　　</p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><blockquote><p>开闭原则(Open-Closed Principle, OCP)：一个软件实体应当对扩展开放，对修改关闭。即软件实体应尽量在不修改原有代码的情况下进行扩展。</p></blockquote><p>　　同样拿收银系统举例，遵循开闭原则后，就不会去修改Sell函数。如果前期系统经过了测试，后面增加新功能就不用重复测试了，因为前面功能肯定不会被影响，从而节省人力。</p><p>　　增加新功能，应该是加新的类/函数来实现。不应该修改原有的已经确定正确运行的代码。</p><p>　　该原则，提倡避免修改原有的正常代码，尽量增加新代码。因为增加新功能会引入新的不确定性因素，所以需要避免影响到原有正常功能，以减少排错时的复杂度。</p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><blockquote><p>里氏替换原则(Liskov Substitution Principle, LSP)：所有引用基类（父类）的地方必须能使用其子类来替换而不报错且正常运行。</p></blockquote><p>　　在收银系统就用到这个，定义根抽象类IGoods，main函数里面调用它的Sell函数。后面具体实现时才用其子类。这样在替换新子类时，不影响系统，正常计费。</p><p>　　这里也是C#的拆箱装箱问题。object能做的事，也能由继承它的子类来做。</p><p>　　假设存入list<object>，这样装箱操作：这里能add(object)，也肯定能add(继承object的int)。</object></p><p>　　这个原则得配合后面提到的原则，才能较好理解。</p><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><blockquote><p>依赖倒置原则(Dependency Inversion Principle, DIP)：抽象不应该依赖于细节，细节应当依赖于抽象。换言之，要针对接口编程，而不是针对实现编程。</p></blockquote><p>　　需要结合里氏替换原则理解。</p><p>　　在收银系统中，依靠里氏替换原则，增加新收费物品。从而计费那里，根据这里的依赖倒置原则，它是根据抽象基类IGoods来收费Sell的，不是根据具体类来收费，所以才能正常计算Sell收费。</p><p>　　“依赖倒置原则”和“里氏替换原则”，是成对出现的。同时这里也实现“开闭原则”的目的。</p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><blockquote><p>接口隔离原则(Interface Segregation Principle, ISP)：使用多个专门的接口，而不使用单一的总接口，即客户端不应该依赖那些它不需要的接口。</p></blockquote><p>　　例如收银系统里面，收费时分成两个抽象类：东西+优惠。不应该合并起来，因为并不是全部东西都有优惠，这样就避免了多余的无效代码。当然得结合实际情况编程，有的商品是大部分有优惠的，就可以合并了。</p><p>　　这里提到的这个原则，就是避免冗余代码。结合“单一责任原则”一起用。</p><p>　　例如记录存储数据，这里需要储存数据的操作：连接数据库/写本地文件/…，以及获取数据源的操作：http/界面填入/excel分析…。我可以定义成一个基类接口。但是如果遇到获取是数据库，存入却不是数据库的，就得新建子类了。这样总共有N1*N2种情况。</p><p>　　而如果遵循接口隔离原则，分成两个接口，就是N1+N2种情况。两者效率，代码结构差距很大。</p><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><blockquote><p>迪米特法则(Law of Demeter, LoD)：一个软件实体应当尽可能少地与其他实体发生相互作用。</p></blockquote><p>　　又称</p><blockquote><p>最少知识原则(LeastKnowledge Principle, LKP)</p></blockquote><p>　　这是基于“单一责任原则”的，同时避免跨类操作，避免模块与模块间的关联。</p><p>　　这个法则的目的是降低系统耦合度。减少类间的关联。</p><p>　　这实际上是最难的一个原则。</p><p>　　举例：收银系统中，买3个苹果送1个香蕉，这个功能需要苹果类和香蕉类关联起来。如果直接修改原苹果类，肯定不行，违背了开闭原则，而且也没遵循本原则，苹果类和香蕉类关联耦合了。那要怎么避免？只能引入第三方，第三个的责任就是处理3个苹果送1个香蕉问题。</p><p>　　苹果和香蕉的代码没变，但是多了一个内部实例化引用它们两个的第三方类。</p><p>　　同样的，如果买3个苹果和1个西瓜，就送1个香蕉，那就在这个第三方类中处理，当然也可以新建第三方类。</p><p>　　代码上，这个第三方类归在优惠中，结算统计完后，传递统计数据给抽象优惠类，而这个优惠类的具体实现类就是这个第三方类，内部分析应该进行怎样的优惠减免计算。毕竟这个没得扫条码，而且是根据买的东西来算有没有优惠，所以是归优惠类。</p><p>　　工程中常见就是设置一个manager管理类，负责不同模块类间的交互通讯。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　面向抽象编程为第一准则。尽量先定义接口，再写具体函数类。</p><p>　　但是在简单工程，简单功能下，为了防止过度设计，是可以直接写具体类而不抽象的。毕竟设计模式是为了更好发展项目，是建立在项目会发展得越来越复杂前提下的。</p><p>　　结尾贴一篇博文，是写六大设计原则比较好。<a href="https://www.cnblogs.com/dolphin0520/p/3919839.html" rel="external nofollow noopener noreferrer" target="_blank">设计模式之六大原则（转载）</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文介绍为什么有“面向抽象编程”，以及六大原则。   &lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://YaojiaxinPC.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://YaojiaxinPC.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>打地鼠类小游戏介绍</title>
    <link href="https://YaojiaxinPC.github.io/33HitGhostDemo/"/>
    <id>https://YaojiaxinPC.github.io/33HitGhostDemo/</id>
    <published>2018-11-05T07:02:59.000Z</published>
    <updated>2018-11-06T05:05:44.265Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文介绍网络教学视频的一款小游戏<a href="http://www.sikiedu.com/my/course/129" rel="external nofollow noopener noreferrer" target="_blank">打怪物</a>  。   </p><a id="more"></a><p><img src="/contentimg/33/1.png" alt="Result pic 1" title="Hit Ghost"></p><h2 id="游戏简介"><a href="#游戏简介" class="headerlink" title="游戏简介"></a>游戏简介</h2><p>　　该小游戏是3D类型，类似打地鼠。在3x3的笼子中会随机出现怪物，玩家通过枪，对这些怪物进行打击。</p><h2 id="游戏体验"><a href="#游戏体验" class="headerlink" title="游戏体验"></a>游戏体验</h2><p>　　<a href="/unitydemo/5/index.html">体验demo</a> ，请用Chrome或者手机浏览器打开。</p><h2 id="游戏制作"><a href="#游戏制作" class="headerlink" title="游戏制作"></a>游戏制作</h2><p>　　该游戏需要导入几个怪物模型、枪模型，还有几个怪物贴图材质。</p><h3 id="1-游戏规则细化"><a href="#1-游戏规则细化" class="headerlink" title="1.游戏规则细化"></a>1.游戏规则细化</h3><p>　　写代码前，需要先了解这个游戏怎么玩：</p><p>　　类似打地鼠，在3x3的笼子随机出现怪物，每只怪物受到一点打击就会死亡，然后得1分。共4种怪物，每种怪物有4种颜色变形。在随机生成怪物的同时，给怪物赋值不同的外形颜色，让玩家产生这个怪物不是同一只的错觉。</p><p>所以规划如下：</p><ol><li>3x3的布局，共9个格子会出现怪物。 </li><li>共4种怪物，每种怪物都有不同的颜色外形，目前暂时都是4个颜色。</li><li>枪固定在一个位置，通过左右和上下转动，来指向怪物。</li><li>枪不能无间隔攻击，每次射击后，需要有装弹时间。</li><li>定义类来记录怪物信息等参数。</li></ol><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h3><p>　　网络教程班的代码不是很好，后面我重写了。应该要考虑设计模式思想来做才行。</p><h4 id="怪物管理"><a href="#怪物管理" class="headerlink" title="怪物管理"></a>怪物管理</h4><p>　　怪物在这里，实际并不需要考虑外形，都是同一个“被打击一次就死亡”的个体设定，应该抽象成一层。由于这里实际只是换皮，所以连抽象都不用了。直接一个组件来处理。</p><p><img src="/contentimg/33/2.png" alt="Result pic 1" title="怪物组件"></p><p><img src="/contentimg/33/3.png" alt="Result pic 1" title="怪物综合管理"></p><h5 id="换皮"><a href="#换皮" class="headerlink" title="换皮"></a>换皮</h5><p><img src="/contentimg/33/4.png" alt="Result pic 1" title="换皮代码"></p><p>　　换皮代码不复杂，通过查看模型，了解是更换材质而已。</p><h5 id="随机生成"><a href="#随机生成" class="headerlink" title="随机生成"></a>随机生成</h5><p>　　由于怪物的死亡动画无法插入执行函数，所以只能在代码写携程，间隔0.8s后设置active为false。利用setactive这个特性，避免频繁生成和销毁。</p><p><img src="/contentimg/33/5.png" alt="Result pic 1" title="设置集合"></p><p>　　各变量意义如下：</p><ol><li>由于不同怪物类型id不同，使用字典来保存该对象池。</li><li>利用坐标集合positions，提取3x3的9个空间位置，这里也为了动态获取，当变成4x4、5x5时，代码不用改。</li><li>enemyhold，归属怪物父类，方便查看而已。</li><li>nowexits，用于记录保存怪物数据，记录当前场景中激活的怪物类型、位置、颜色等信息。</li><li>enemys，怪物类型集合，怪物都在EnemyControl类中进行了异化处理，在管理类中就不用区别，直接进行集合统一处理。</li></ol><p><img src="/contentimg/33/6.png" alt="Result pic 1" title="概率生成"></p><p><img src="/contentimg/33/7.png" alt="Result pic 1" title="处理生成函数"></p><p>　　循环每个位置，通过概率，判断是否生成。这里也可以使用其他方案：通过概率确定哪些位置生成。两种方案都可以。</p><p>　　怪物生成函数比较讲究，避免冗余函数，结合设计模式思想抽离。切成3部分：</p><ol><li>先清空全部怪物，即把全部都setactive为false。</li><li>处理怪物位置、怪物类型的函数。</li><li>生成怪物的实际函数。</li></ol><p>　　由于每个怪物模型的坐标位置影响，这里加入了纠偏坐标vector。每次激活怪物前，检查缓存中是否有同类型的尚未激活的，有就拿出来激活使用，没有才Instantiate生成。</p><h4 id="枪控制"><a href="#枪控制" class="headerlink" title="枪控制"></a>枪控制</h4><p>　　旋转合理应该使用四元数，不过这里，由于只有2个轴的限制性旋转，普通的欧拉旋转就够了。使用四元数是为了防止3轴情况下的万向锁。</p><h5 id="装弹时间"><a href="#装弹时间" class="headerlink" title="装弹时间"></a>装弹时间</h5><p>　　直接+=Time.deltaTime，然后计时即可。能进if语句的，再判断是否执行发射，在成功进入发射语句中才将shootTimer置零。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shootTimer += Time.deltaTime;</span><br><span class="line"><span class="keyword">if</span> (shootTimer &gt;= shootTime)</span><br></pre></td></tr></table></figure><h5 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h5><p>　　指绕某个轴进行旋转。这里是水平左右和垂直上下，左右即对应绕Y轴旋转；上下即对应绕X轴旋转。</p><p>　　结合具体场景，现在是有鼠标的2D坐标，刚好对应2个值。</p><p>共有3种方法。</p><p>方法①: 按顺序绕轴旋转 （是个速度响应，用EasyTouch的时候才适合）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存主相机正前方</span></span><br><span class="line">Vector3 mcamera_fwd;</span><br><span class="line"><span class="comment">//相机前和右的叉积，得到垂直这两个轴的向上的Y</span></span><br><span class="line">Vector3 mcamera_y;</span><br><span class="line"><span class="comment">//相机前和上的叉积，得到垂直这两个轴的向右的X</span></span><br><span class="line">Vector3 mcamera_x;</span><br><span class="line">mcamera_fwd = Camera.main.transform.forward;</span><br><span class="line"><span class="comment">////归一化，然后再求叉积</span></span><br><span class="line"><span class="comment">//mcamera_fwd.Normalize();</span></span><br><span class="line"><span class="comment">//相机前和右的叉积，得到垂直这两个轴的向上的Y</span></span><br><span class="line">mcamera_y = Vector3.Cross(mcamera_fwd, Vector3.right);</span><br><span class="line"><span class="comment">//相机前和上的叉积，得到垂直这两个轴的向右的X</span></span><br><span class="line">mcamera_x = Vector3.Cross(mcamera_fwd, Vector3.up);</span><br><span class="line"><span class="comment">//旋转速度</span></span><br><span class="line">transform.Rotate(mcamera_y, Input.GetAxis(<span class="string">"Mouse X"</span>), Space.World);</span><br><span class="line">transform.Rotate(mcamera_x, Input.GetAxis(<span class="string">"Mouse Y"</span>), Space.World);</span><br></pre></td></tr></table></figure><p>方法②：使用LookAt，注意Z轴坐标，是取相对主相机的点来转世界坐标。由于笼子位于z=0处，这里主相机和z=0的距离应该取反</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 mousePos = Camera.main.ScreenToWorldPoint(<span class="keyword">new</span> Vector3(Input.mousePosition.x, Input.mousePosition.y, -Camera.main.transform.position.z));</span><br><span class="line">transform.LookAt(<span class="keyword">new</span> Vector3(mousePos.x, mousePos.y, <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>方法③: 属性面板rotation赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过旋转模型，得到范围： 竖直: ⬆-35 ~ ⬇+10 ， 水平: ⬅-30 ~ ➡+30</span></span><br><span class="line"><span class="comment">//根据鼠标在屏幕上的位置，按比例分配</span></span><br><span class="line"><span class="comment">//-30~+30</span></span><br><span class="line"><span class="keyword">float</span> xPosPrecent = (Input.mousePosition.x / Screen.width) * <span class="number">60</span> - <span class="number">30</span>;</span><br><span class="line"><span class="keyword">if</span> (xPosPrecent &gt; <span class="number">30f</span>) xPosPrecent = <span class="number">30f</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (xPosPrecent &lt; -<span class="number">30f</span>) xPosPrecent = -<span class="number">30f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-35~+10 (鼠标坐标，以屏幕左上为原点0，但是计算中是以左下为0，所以要取反)</span></span><br><span class="line"><span class="keyword">float</span> yPosPrecent = (<span class="number">1</span>- Input.mousePosition.y / Screen.height) * <span class="number">45</span> - <span class="number">35</span>;</span><br><span class="line"><span class="keyword">if</span> (yPosPrecent &gt; <span class="number">10f</span>) yPosPrecent = <span class="number">10f</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (yPosPrecent &lt; -<span class="number">35f</span>) yPosPrecent = -<span class="number">35f</span>;</span><br><span class="line"></span><br><span class="line">transform.transform.rotation = Quaternion.Euler(<span class="keyword">new</span> Vector3(yPosPrecent, xPosPrecent, <span class="number">0</span>));</span><br></pre></td></tr></table></figure><h4 id="暂停"><a href="#暂停" class="headerlink" title="暂停"></a>暂停</h4><blockquote><p>　　Time.timeScale = ispause ? 0 : 1;</p></blockquote><p>　　游戏暂停，关注的是物理动效的暂停，菜单栏等等其他那些应该是正常播放的。所以这里就使用Time.timeScale=0。该属性设置后，打出去的子弹position会停止位移，恢复1后能继续之前的速度移动。</p><p>　　该属性影响了FixedUpdate，还有携程。但是不影响Update函数。</p><p>　　所以控制怪物和枪的函数应该放在FixedUpdate。相反的，音效等等其他可以在游戏暂停住的时候正常运行的，才可以放在Update，这里也是开关背景音乐选择框能在游戏暂停的时候正常播放背景音乐的原因。</p><p>　　注意这时候:</p><blockquote><p>Time.deltaTime==0 =&gt; true</p></blockquote><p>　　所以得使用下面这个计时：</p><blockquote><p>Time.unscaledDeltaTime</p></blockquote><h4 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h4><p>　　这里很简单，考虑全需要什么数据，定义成一个类，然后利用json转成字符串，保存起来。下次读取这个字符串来还原场景就行。</p><p>　　这里暂只保存到缓存，利用PlayerPrefs来保存。其他保存到服务器端去存入数据库，或者本地文件等等方式都是类似的。就多一个工具类而已。</p><p>　　难度在json的dll，牛顿json在webgl下会异常，所以只能手动拼内容，使用simplejson。</p><p><img src="/contentimg/33/12.png" alt="Result pic 1" title="拼json"></p><h3 id="压缩优化发布"><a href="#压缩优化发布" class="headerlink" title="压缩优化发布"></a>压缩优化发布</h3><p>　　贴图压缩，降低分辨率，打图集，设置音频格式等等常规操作。</p><h4 id="模型简单优化"><a href="#模型简单优化" class="headerlink" title="模型简单优化"></a>模型简单优化</h4><p>　　这里还有对模型的优化。导入的模型，实际上还带了很多没用上的属性，是可以取消掉的。例如一些没使用的动画效果。</p><p><img src="/contentimg/33/8.png" alt="Result pic 1" title="门板模型"></p><p>　　优化选项：</p><ol><li>模型在运行的时候是不会去修改的，所以Read/Write Enabled肯定不用选。</li><li>mesh compression，按照实际需求，压缩的话得消耗cpu来解压，实际压缩不了多少。建议不压缩。</li><li>UVs，按照需要进行斟酌。</li><li>Normals，可以不导入。但是是在不需要场景光照映射情况下。有光照的时候普遍选导入。</li><li>Tangents，得根据提示来设置，我导的模型提示没有，所以就设为None了。</li></ol><p><img src="/contentimg/33/9.png" alt="Result pic 1" title="提示信息"></p><h4 id="Lightmapping"><a href="#Lightmapping" class="headerlink" title="Lightmapping"></a>Lightmapping</h4><p>　　在不要求实时灯光的游戏中，可以使用预烘焙。</p><p>　　设置light的mode为Baked，然后到lighting面板设置。</p><p><img src="/contentimg/33/10.png" alt="Result pic 1" title="Lightmapping设置"></p><p>　　根据实际情况设置质量。</p><p>　　经过代码优化+设置优化，两者差距很大。下图是网络教程中的工程运行时的drawcall，与优化后的工程的比较。</p><p><img src="/contentimg/33/11.png" alt="Result pic 1" title="性能比较"></p><p>　　其中压缩贴图效果最明显，然后就是Lightmapping。代码主要优化的是cpu，以及节省少部分的内存，当然也促进优化了drawcall。</p><p>　　优化的重点：drawcall。降低贴图分辨率能极大优化该属性，然后加上代码方面的优化，又能降低。所以总体下来降了将近90%。</p><p>工程项目源码： </p><p><a href="https://github.com/YaojiaxinPC/hexoblog/tree/master/UnityDemo/HitGHOST" rel="external nofollow noopener noreferrer" target="_blank">HitGhost</a> </p><p>　　代码还有优化空间，应该抽一个局管理类出来。同时UImanager和gamemanager交叉比较多，可以进行拆分。当然还可以加入EasyTouch、计时、投币等等延伸。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文介绍网络教学视频的一款小游戏&lt;a href=&quot;http://www.sikiedu.com/my/course/129&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;打怪物&lt;/a&gt;  。   &lt;/p&gt;
    
    </summary>
    
      <category term="Unity3D" scheme="https://YaojiaxinPC.github.io/categories/Unity3D/"/>
    
    
      <category term="游戏开发" scheme="https://YaojiaxinPC.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="入门级" scheme="https://YaojiaxinPC.github.io/tags/%E5%85%A5%E9%97%A8%E7%BA%A7/"/>
    
      <category term="小游戏" scheme="https://YaojiaxinPC.github.io/tags/%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    
      <category term="3D" scheme="https://YaojiaxinPC.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>AssetBundle打包记录-简单使用</title>
    <link href="https://YaojiaxinPC.github.io/32AssetBundle_1/"/>
    <id>https://YaojiaxinPC.github.io/32AssetBundle_1/</id>
    <published>2018-11-05T00:04:59.000Z</published>
    <updated>2018-11-05T02:26:19.585Z</updated>
    
    <content type="html"><![CDATA[<p>　　该题目将分几个部分来详细解读。本篇为初级接触篇，简单记录如何ab打包，以及如何获取ab包。</p><a id="more"></a><p>　　ab打包，几乎能把全部东西都打包。打包后，可以通过脚本到服务器获取，实现了程序分离动态获取功能。</p><p>　　官网<a href="https://docs.unity3d.com/Manual/AssetBundlesIntro.html" rel="external nofollow noopener noreferrer" target="_blank">AssetBundles</a>  翻译：</p><blockquote><p>　　AssetBundle是可以在运行时加载的包含特定于平台的档案文件的资产（模型，纹理，预制，音频剪辑，甚至整个场景）。AssetBundles可以表达彼此之间的依赖关系; 例如，AssetBundle A中的材料可以引用AssetBundle B中的纹理。为了通过网络进行有效交付，可以根据用例要求（LZMA和LZ4）使用内置算法选择压缩AssetBundle。<br>　　AssetBundles可用于可下载内容（DLC），减少初始安装大小，加载针对最终用户平台优化的资产，以及减少运行时内存压力。</p></blockquote><p>　　这里有篇<a href="https://www.cnblogs.com/lancidie/p/5878789.html" rel="external nofollow noopener noreferrer" target="_blank">博文</a>  还不错。博文中讲得比较详细，下面我就不重复了，就按照使用过程简单记录。</p><p>　　目前开发环境是unity2018.2+Hexo（做web服务端）。如果没有弄hexo，可以搞其他web服务端，简单的window自带的IIS，或者安装wordpress，这个window也有，不过得安装部署。</p><h2 id="ab包意义"><a href="#ab包意义" class="headerlink" title="ab包意义"></a>ab包意义</h2><p>　　当程序使用ab包技术后，就能动态去服务器获取组件，这样保证了每次使用都是最新的，而且不用强制更新本地软件。这对用户来说很方便，避免了频繁的软件更新提示。当然，实质是后台自动动态更新。</p><p>　　第二重要的是，利用动态获取这个特性，可以在程序中根据硬件设备的情况，请求高质量的材质，或者是低质量的材质！也就是说，同一个程序，在低配置的环境下就跑低配版，在高配置环境下就跑高配！</p><p>　　现在ab包主要用于更新，添加节日活动等等小更新，以及热更新等等。具体使用情况得根据需求来安排。</p><h2 id="AssetBundles-Browser"><a href="#AssetBundles-Browser" class="headerlink" title="AssetBundles-Browser"></a>AssetBundles-Browser</h2><p>　　ab打包，搜索上有很多的教程，很多教写代码的。不过本文不教写这个代码，因为Unity官方已经提供了<a href="https://github.com/Unity-Technologies/AssetBundles-Browser" rel="external nofollow noopener noreferrer" target="_blank">AssetBundles-Browser</a>  工具，就没必要自己花多余的时间来处理，而且写出来的东西还没人家的好用。</p><p>　　abBrowser工具，使用很方便。从github下载后，把Edit文件夹拖动工程目录下。</p><p><img src="/contentimg/32/1.png" alt="Result pic 1" title="工具启动位置"></p><p>　　该工具有三个界面：</p><ol><li>可以查看当前目录全部标志打包的材料，及其分类标志</li><li>打包编译设置</li><li>导入ab包，查看该包详情</li></ol><p>　　具体界面如下：</p><p><img src="/contentimg/32/2.png" alt="Result pic 1" title="Configure"></p><p><img src="/contentimg/32/3.png" alt="Result pic 1" title="Build"></p><p><img src="/contentimg/32/4.png" alt="Result pic 1" title="Inspect"></p><h2 id="打包标志"><a href="#打包标志" class="headerlink" title="打包标志"></a>打包标志</h2><p><img src="/contentimg/32/5.png" alt="Result pic 1" title="打包标志"></p><p>　　打包操作很方便，只需选中材料后，在Inspector面板底部，在上图位置处进行设置分类即可。</p><p>　　难的地方是分类。素材间有依赖关系，不好的分类方式，会造成重复打包，冗余打包。该题目等后面分博文详细介绍，本文暂时不提。</p><p>　　在上图中，“AssetBundle”之后，第一个是打包分类目录，第二个是后缀。注意这里没有删除选择，如果分类打错字了，只能重新建分类，然后“Remove Unused Names”。</p><h2 id="包详情"><a href="#包详情" class="headerlink" title="包详情"></a>包详情</h2><p><img src="/contentimg/32/6.png" alt="Result pic 1" title="编译出来的包">　</p><p>　　可以看到，目录下，同名字下会有个后缀为“.manifest”的文本文件，打开后看到是记录依赖关系、版本和hash信息等。</p><p><img src="/contentimg/32/7.png" alt="Result pic 1" title="manifest文件">　</p><p>　　目前我发现：只有主manifest文件是可以通过代码获取的，其他后缀为manifest的文件，只是让我们手动打开看而已，还没找到能获取打开这些文件的api。</p><h2 id="代码获取ab包"><a href="#代码获取ab包" class="headerlink" title="代码获取ab包"></a>代码获取ab包</h2><p>　　目前我使用2018，api是</p><blockquote><p>UnityEngine.Networking.UnityWebRequestAssetBundle.GetAssetBundle(uri)</p></blockquote><p>　　步骤是设置该url指向某个具体的文件，然后用该api下载，再</p><blockquote><p>AssetBundle bundle = UnityEngine.Networking.DownloadHandlerAssetBundle.GetContent(request)</p></blockquote><p>　　然后就能通过budle获取需要的gameobject了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">IEnumerator <span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string uri = <span class="string">"http://localhost:4000/unitydemo/5/WebGL/"</span> + <span class="string">"clip"</span>;</span><br><span class="line"></span><br><span class="line">    UnityEngine.Networking.UnityWebRequest request = UnityEngine.Networking.UnityWebRequestAssetBundle.GetAssetBundle(uri);</span><br><span class="line">    yield <span class="keyword">return</span> request.SendWebRequest();</span><br><span class="line">    AssetBundle bundle = UnityEngine.Networking.DownloadHandlerAssetBundle.GetContent(request);</span><br><span class="line"></span><br><span class="line">    fire_audioclip = bundle.LoadAsset&lt;AudioClip&gt;(<span class="string">"fire.mp3"</span>);</span><br><span class="line">    fire_audioclip.LoadAudioData();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (fire_audioclip.loadState == AudioDataLoadState.Loading)</span><br><span class="line">    &#123;</span><br><span class="line">        yield <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bundle.Unload(<span class="keyword">false</span>);        </span><br><span class="line">    request.Dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　注意该过程涉及网络，需要携程处理，不然会阻塞线程。或者是写成异步asyn。</p><p>　　上面的步骤是获取没有依赖关系的，实际使用中，很多都是有依赖关系的，所以得获取到manifest文件，了解到依赖关系，然后对应下载材料，再生成，才不会材质丢失。</p><p>　　这里目前我只找到获取主manifest。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">string urlpath = <span class="string">"http://localhost:4000/unitydemo/5/WebGL/"</span>;</span><br><span class="line">string uri = urlpath + <span class="string">"StandaloneWindows"</span>;</span><br><span class="line">string aimitem = <span class="string">"prefabs"</span>;</span><br><span class="line">UnityEngine.Networking.UnityWebRequest request = UnityEngine.Networking.UnityWebRequestAssetBundle.GetAssetBundle(uri);</span><br><span class="line">yield <span class="keyword">return</span> request.SendWebRequest();</span><br><span class="line">AssetBundle bundle = UnityEngine.Networking.DownloadHandlerAssetBundle.GetContent(request);</span><br><span class="line"></span><br><span class="line">AssetBundleManifest assetBundleManifest = bundle.LoadAsset&lt;AssetBundleManifest&gt;(<span class="string">"AssetBundleManifest"</span>);</span><br><span class="line">foreach (<span class="keyword">var</span> item in assetBundleManifest.GetAllAssetBundles())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (item.Equals(aimitem))</span><br><span class="line">    &#123;</span><br><span class="line">        foreach (<span class="keyword">var</span> iitem in assetBundleManifest.GetAllDependencies(item))</span><br><span class="line">        &#123;</span><br><span class="line">            UnityEngine.Networking.UnityWebRequest irequest = UnityEngine.Networking.UnityWebRequestAssetBundle.GetAssetBundle(urlpath + iitem);</span><br><span class="line">            yield <span class="keyword">return</span> irequest.SendWebRequest();</span><br><span class="line">            AssetBundle ibundle = UnityEngine.Networking.DownloadHandlerAssetBundle.GetContent(irequest);</span><br><span class="line">            ibundle.LoadAllAssets();</span><br><span class="line">            irequest.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UnityEngine.Networking.UnityWebRequest prequest = UnityEngine.Networking.UnityWebRequestAssetBundle.GetAssetBundle(urlpath + aimitem);</span><br><span class="line">yield <span class="keyword">return</span> prequest.SendWebRequest();</span><br><span class="line">AssetBundle pbundle = UnityEngine.Networking.DownloadHandlerAssetBundle.GetContent(prequest);</span><br></pre></td></tr></table></figure><p>　　首先获取主manifest，然后通过bundle.LoadAsset<assetbundlemanifest>(“AssetBundleManifest”)获取具体信息。注意这里“AssetBundleManifest”是固定的。</assetbundlemanifest></p><p><img src="/contentimg/32/8.png" alt="Result pic 1" title="主manifest文件">　</p><p>　　这个主manifest文件名不固定，但是获取到文件后实例化时使用的”AssetBundleManifest”是固定的。然后读取全部信息，最好存起来到字典里面。然后获取每个子包的依赖关系</p><blockquote><p>assetBundleManifest.GetAllDependencies(item)</p></blockquote><p>　　注意前面get ab包，只是get到一个文本文件，现在获取这些依赖关系等等信息，也只是string字符串信息，真要使用，是得去下载才能获取使用的。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="包成功下载，但是提示格式不支持"><a href="#包成功下载，但是提示格式不支持" class="headerlink" title="包成功下载，但是提示格式不支持"></a>包成功下载，但是提示格式不支持</h3><blockquote><p>Error: Cannot create FMOD::Sound instance for resource archive:/CAB-4d655a7adf68a182da7b13b4a9413d95/CAB-4d655a7adf68a182da7b13b4a9413d95.resource, (Unsupported file or audio format. )</p></blockquote><p>　　我工程设置为webgl，然后想在电脑上本机调试，用vs附加打断点，结果一直报“找不到资源”/“格式不支持”。打断点进去，包是下载下来了的，大小等等信息也对。后面才意识到，是打包时选择的目标环境影响导致！我用本地调试，就应该归属在window下，而不是看工程设置。修改打包为window平台后，就成功加载文件了。</p><h3 id="webgl慎用ab包"><a href="#webgl慎用ab包" class="headerlink" title="webgl慎用ab包"></a>webgl慎用ab包</h3><p>　　本地模式下，能把内存极大压缩（像设置音频为stream模式），但是使用ab包方式，虽然让初次下载包变小了，但是load时候极耗内存，而且加载成功进入后，也是在内存上，导致内存反而变大了。</p><p>　　这里我尝试把音频文件打包出去，结果2.9m的文件，打包出来是5m？load下来到内存直接32m？原先stream模式才200k全部。</p><p>　　也应该是我技术不到位，操作不当导致。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　该题目将分几个部分来详细解读。本篇为初级接触篇，简单记录如何ab打包，以及如何获取ab包。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity3D" scheme="https://YaojiaxinPC.github.io/categories/Unity3D/"/>
    
    
      <category term="游戏开发" scheme="https://YaojiaxinPC.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="入门级" scheme="https://YaojiaxinPC.github.io/tags/%E5%85%A5%E9%97%A8%E7%BA%A7/"/>
    
      <category term="工具使用" scheme="https://YaojiaxinPC.github.io/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
      <category term="游戏优化" scheme="https://YaojiaxinPC.github.io/tags/%E6%B8%B8%E6%88%8F%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>WallBall小游戏介绍</title>
    <link href="https://YaojiaxinPC.github.io/31WallBallDemo/"/>
    <id>https://YaojiaxinPC.github.io/31WallBallDemo/</id>
    <published>2018-10-28T13:07:59.000Z</published>
    <updated>2018-10-29T07:17:42.397Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文介绍Unity商店的一款小游戏<a href="https://assetstore.unity.com/packages/templates/packs/wall-ball-49573" rel="external nofollow noopener noreferrer" target="_blank">Wall Ball</a>  。   </p><a id="more"></a><p><img src="/contentimg/31/1.jpg" alt="Result pic 1" title="Wall Ball"></p><h2 id="游戏简介"><a href="#游戏简介" class="headerlink" title="游戏简介"></a>游戏简介</h2><p>　　该小游戏是3D类型，主角是一个小球，通过在独木桥地板上滚动逃亡生存，地板会下沉掉落，所以小球得一直向前滚动。</p><p>　　玩家通过点击屏幕，指导小球左右2个方向的变换，帮助它安全踏上地板逃亡，同时一路收集小星星攒积分。伴随着逃亡之路的还有场景光线的变换，会有日夜更替，所以玩家要小心晚上会看不清道路而失足掉落。</p><h2 id="游戏体验"><a href="#游戏体验" class="headerlink" title="游戏体验"></a>游戏体验</h2><p>　　<a href="/unitydemo/4/index.html">体验demo</a> ，请用Chrome或者手机浏览器打开。</p><h2 id="游戏制作"><a href="#游戏制作" class="headerlink" title="游戏制作"></a>游戏制作</h2><p>　　只有一些UI的图标，还有小球的数字8贴图。其他东西都可以在unity内部创建。</p><h3 id="1-游戏规则细化"><a href="#1-游戏规则细化" class="headerlink" title="1.游戏规则细化"></a>1.游戏规则细化</h3><p>　　写代码前，需要先了解这个游戏怎么玩：</p><p>　　这是一个逃亡游戏，主角所待的地板会不断往下掉，所以只能不停的往前跑。为了增强游戏感，特地设置了独木桥类型的前路，主角只要跑错方向就会掉下无尽深渊。为了加大难度，增加了昼夜替换，晚上的时候光线变暗。同时为了防止逃亡久了后的精神麻痹现象，增加了建筑材料的颜色变幻的设定。</p><p>　　玩家可以通过点击屏幕，操作小球前面的方向是向左还是向右。同时路上会有小星星，收集能增加积分。积分用来记录玩家挑战最佳值。</p><p>所以规划如下：</p><ol><li>地板在小球滚过后会下落消失；同时在尽头会随机在左边或者右边生成新地板，并且一次只能生成紧凑的一块。 </li><li>设定时间间隔，控制环境灯光的变化，分白天的正常亮度+晚上的黑暗情况。</li><li>增加地板颜色的变化设定。</li><li>地板上有小星星，碰到就加积分。游戏结束要保存积分，最后统计玩家积分，汇总出挑战最高分。</li><li>小球受向下的力，踩不到地板就掉下去，游戏结束。</li><li>玩家点击屏幕，控制变换小球向左或者向右。</li></ol><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h3><p>　　这个游戏代码架构不是很好，由于游戏简单，所以使用的是最简单的直接写代码的方式，直接高效。一个脚本对应一个功能，同时有一个管理全局的总脚本。在生成地板的地方有bug，不是按照数量来生成，而是固定间隔生成，会导致出现数量只增不减的情况—》当小球不滚动时，这时不会有地板消失，但是地板生成是照旧的。所以本文不对代码进行详解。</p><h4 id="PlayerPrefs"><a href="#PlayerPrefs" class="headerlink" title="PlayerPrefs"></a>PlayerPrefs</h4><p>　　在电脑上，是直接保存到注册表，在浏览器上，保存成cookies。原本以为发布成webgl得修改，写js来完成这个操作，没想到能正常执行。</p><p><img src="/contentimg/31/2.png" alt="Result pic 1" title="playerprefs"></p><h4 id="Rigidbody-velocity"><a href="#Rigidbody-velocity" class="headerlink" title="Rigidbody.velocity"></a>Rigidbody.velocity</h4><p><img src="/contentimg/31/3.png" alt="Result pic 1" title="Rigidbody.velocity"></p><p>　　这里控制小球滚动，不是通过position++。而是给小球施加一个力。注意，x/y/z ==》右/上/前，这里x=》右，z=》前。向下就是对应y，所以这里给小球y轴一个向下的重力Physics.gravity.y。</p><p>　　游戏中的向左向右，就单独在x或者z轴上施加。通过一个bool值来判断应该加那个方向上的力就行。</p><p>　　另外要注意，施加力，必须在FixedUpdate上进行。不能在Update等其他地方。不然会出现抖动跳跃的现象。</p><h3 id="3-开始制作游戏"><a href="#3-开始制作游戏" class="headerlink" title="3.开始制作游戏"></a>3.开始制作游戏</h3><p>　　工程中，素材比较不规则，作者是通过Unity的Packing系统打包图集。鉴于这个游戏可以记录的东西少，这里就分享一下怎么使用工具打包图集吧。</p><h4 id="TexturePackerGUI"><a href="#TexturePackerGUI" class="headerlink" title="TexturePackerGUI"></a>TexturePackerGUI</h4><p>　　惯例，排序一下图片，排除掉特殊的图片。</p><p><img src="/contentimg/31/4.png" alt="Result pic 1" title="图片排序"></p><p><img src="/contentimg/31/5.png" alt="Result pic 1" title="特殊图片"></p><p>　　很明显，“8.jpg”必须搞出来。</p><p><img src="/contentimg/31/6.png" alt="Result pic 1" title="排除特殊图片"></p><p>　　但是这里还有一张不太适合，放进去后导致右边大量的留白。可以通过直接在图集中选中，来知道是哪一张。</p><p><img src="/contentimg/31/7.png" alt="Result pic 1" title="找到不合适的图"></p><p>　　去掉不合适的后，剩下的就可以打包成一个图了。不过，实际使用中的打包，是将一起用的图打包成一个图集，体积权重较低。</p><p><img src="/contentimg/31/8.png" alt="Result pic 1" title="操作流程"></p><p><img src="/contentimg/31/9.png" alt="Result pic 1" title="data format"></p><p><img src="/contentimg/31/10.png" alt="Result pic 1" title="发布"></p><p>　　发布出来是两个，一个png（带透明通道）+一个“.tpsheet”后缀的文件，用记事本格式打开，是记录每张照片的位置信息。</p><p><img src="/contentimg/31/11.png" alt="Result pic 1" title="tpsheet内容"></p><p>　　将这两个文件直接导入unity。然后回到unity，添加插件<a href="https://assetstore.unity.com/packages/tools/sprite-management/texturepacker-importer-16641" rel="external nofollow noopener noreferrer" target="_blank">TexturePackerImporter</a> 。这时候你会发现，前面导入的图集，unity自动切好了。</p><p><img src="/contentimg/31/12.png" alt="Result pic 1" title="使用情况"></p><p>　　上面是直接拖到面板使用的。但是如果想代码里面使用呢。平时是Resources.Load(path)；但是会发现这时候不知道path是哪个才对。</p><p>　　但是这时候是用Resources.LoadAll(path)！</p><p><img src="/contentimg/31/13.png" alt="Result pic 1" title="代码读取图片"></p><p>　　load这个图集，返回的不是集合，也无法使用。必须loadall后才能获取到，然后再来找到对应名字的。</p><h4 id="制作预制体"><a href="#制作预制体" class="headerlink" title="制作预制体"></a>制作预制体</h4><p>略</p><h4 id="整合Scene"><a href="#整合Scene" class="headerlink" title="整合Scene"></a>整合Scene</h4><p>略</p><h3 id="压缩优化发布"><a href="#压缩优化发布" class="headerlink" title="压缩优化发布"></a>压缩优化发布</h3><p>略</p><h3 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h3><p>　　在电脑上跑的时候没注意，发布上去后，在手机点开，结果浏览器奔溃了？？？</p><p>　　推测fps值太高了，卡掉浏览器。</p><h4 id="设置FPS"><a href="#设置FPS" class="headerlink" title="设置FPS"></a>设置FPS</h4><p>　　FPS，就是控制每秒调用多少次Update的。调用次数越多，cpu越高，同时说明代码越流畅，中间没明显卡顿。在电脑上，fps是越高越好的，但是移动端就不行了，要控制在稳定的值。webgl建议越低越好。</p><p>　　这里计算方式，用一个int，每次update的时候++；然后计算程序运行时间，相除。最好是用一个间隔，保证两个数都是比较小的容易除的数字。</p><p>　　属性设置就一条代码：</p><blockquote><pre><code>Application.targetFrameRate = 50;</code></pre></blockquote><p><img src="/contentimg/31/14.png" alt="Result pic 1" title="同时需要注意这里的设置"></p><p>　　同时要去修改这里。设置为Don’t Sync。不然上面的代码就不起作用了。</p><p>　　但是没效果，还是闪退。而且设置后，反而报错</p><blockquote><p> rendering without using requestAnimationFrame for the main loop</p></blockquote><p>　　搜了一下<a href="https://forum.unity.com/threads/rendering-without-using-requestanimationframe-for-the-main-loop.373331/" rel="external nofollow noopener noreferrer" target="_blank">论坛</a>  。禁用代码设置fps，就不会报这个错了。</p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>　　想到当前页面有浮动蜘蛛网脚本，该脚本耗cpu。应该是抢占了。所以独立跳转出去。</p><p>　　同时修改代码。原来的是不断instantiate，这样会消耗大量cpu，换成数组来保存，然后SetActive来控制显示与消失。</p><p>　　问题解决。不会奔溃了。也不用设置fps。</p><p>修改代码：</p><p>　　一开始就生成50个，tile+gem，然后如果这个tile有概率挂有星星，就通过var gem = this.transform.Find(“GemHolder”);找到gem，然后SetActive。</p><p>　　注意每次开局都要把全部set false。同时要注意这个集合，要从头到尾，再从头到尾，不能跳。不然会出现断层。注意被set false的物体，是不能自己激活自己的，需要外面来激活它。</p><p><a href="https://blog.csdn.net/w1594731007/article/details/71216169" rel="external nofollow noopener noreferrer" target="_blank">三种查找物体的方式</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文介绍Unity商店的一款小游戏&lt;a href=&quot;https://assetstore.unity.com/packages/templates/packs/wall-ball-49573&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Wall Ball&lt;/a&gt;  。   &lt;/p&gt;
    
    </summary>
    
      <category term="Unity3D" scheme="https://YaojiaxinPC.github.io/categories/Unity3D/"/>
    
    
      <category term="游戏开发" scheme="https://YaojiaxinPC.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="2D" scheme="https://YaojiaxinPC.github.io/tags/2D/"/>
    
      <category term="入门级" scheme="https://YaojiaxinPC.github.io/tags/%E5%85%A5%E9%97%A8%E7%BA%A7/"/>
    
      <category term="小游戏" scheme="https://YaojiaxinPC.github.io/tags/%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>Live2D插件介绍</title>
    <link href="https://YaojiaxinPC.github.io/30Lived2d_for_unity/"/>
    <id>https://YaojiaxinPC.github.io/30Lived2d_for_unity/</id>
    <published>2018-10-26T02:07:59.000Z</published>
    <updated>2018-10-27T05:29:14.427Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文介绍如何在Unity中使用二次元风格的<a href="http://www.live2d.com/" rel="external nofollow noopener noreferrer" target="_blank">Live2D</a>  。   </p><a id="more"></a><p><img src="/contentimg/30/1.gif" alt="Result pic 1" title="效果展示"></p><p><img src="/contentimg/30/1.png" alt="Result pic 1" title="实际三维情况"></p><p>　　在一些博客上会遇到网页宠物挂饰，大部分是比较老旧的flash效果，但是现在有个蛮不错的新技术也实现了这个效果，这就是Live2D插件。</p><p>　　当然它不仅仅只用在博客上当挂饰，现在那些游戏登陆界面、或者手机app打开缓冲界面，经常会有能动的人物视觉，好多其实都是用该插件实现的！</p><p>　　这里放一下两个下载链接：</p><ol><li><p><a href="http://www.live2d.com/usermanual/cubism2_cn/lets-do-it/my-first-lapp/02.html" rel="external nofollow noopener noreferrer" target="_blank">2.1SDK下载指导文档</a> </p></li><li><p><a href="http://docs.live2d.com/cubism-sdk-tutorials/getting-started/" rel="external nofollow noopener noreferrer" target="_blank">3.0unitypackage包下载指导文档</a> </p></li></ol><p>　　请先根据上面链接的教程，对应去下载SDK包。当然也可以去github下载最新包。在GitHubPage中，也刚好有人开源做这个插件的挂饰效果，已经集成在hexo中了。在我置顶博文中，底部的几个链接都有提到这个使用教程。本文只简单根据Unity中使用的情况来介绍该插件。</p><p>　　教程网页很人性化，是有中文和英文版本的，图文并茂，虽然部分链接点开需要VPN。这里就不讲复杂的怎么做模型，怎么应用等等。只在下载的两个包的基础上进行简单分析。</p><p><img src="/contentimg/30/2.png" alt="Result pic 1" title="下载的两个包"></p><p>　　如果不会VPN，unitypackage包不要也行，它只是多了部分功能的集成而已（<a href="http://docs.live2d.com/cubism-sdk-tutorials/animation/" rel="external nofollow noopener noreferrer" target="_blank">json转AnimationClip功能</a>  等等其他好多功能的集成）。简单的接触，从官网主页下载的2.1sdk包就能正常运行了。</p><p>　　在sample里面是几个使用例子。每个都能独立正常运行的。</p><h3 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h3><p><img src="/contentimg/30/3.png" alt="Result pic 1" title="引用拆解"></p><p>　　可以新建工程，复制这些需要的东西来处理。这里也提一下老版本，如果识别不了dll，需要拖出来外面，然后使用面板上的Import new asset重新导入。</p><p>　　代码部分就不讲解了，这里简单提一下它的流程吧。</p><h3 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h3><p><img src="/contentimg/30/4.png" alt="Result pic 1" title="Create Live2D Canvas"></p><p>　　这里是建了一个透明的背景材质，然后通过脚本来Load模型，并贴上去。Load函数在示例程序里面也有了，LAppModelProxy类。就是传model.json的地址给它，然后它找到这个文件后，解析，根据文件里面的记录，去找对应的其他信息：找模型、表情动作参数、声音等等。</p><p><img src="/contentimg/30/5.png" alt="Result pic 1" title="总信息记录"></p><p>　　示例程序这里的动画效果比较少，实际上，在unitypackage包里面就可以看到，是和骨骼动画一样，每一个关节都可以运动的！</p><p>　　这里是记录播放该动画时，运行的时间fade，以及变动的键值。</p><p><img src="/contentimg/30/6.png" alt="Result pic 1" title="动画信息内容"></p><p>　　expressins文件夹的4个动画效果，只是其中抽出来的示例动画，实际上只要我们想到，都可以编出来，然后加进去。2.1版本的还是读json，但是官方提倡使用动画机，在3.0就建议直接使用动画机来完成动画的编制了。原理都是找到对应的key，传递新value。就是多了一层解析封装，让动画机能直接调用并修改key的value。</p><p>　　这里可以自己封装，在motions里面可以提取key，然后包装，调用L2DMotionManager的startMotionPrio函数。相当于3.0的OnRenderObject自动调用TaskableModel.TryWriteParametersAndParts(Parameters, Parts);</p><p><img src="/contentimg/30/17.png" alt="Result pic 1" title="2.1修改value函数"></p><p><img src="/contentimg/30/16.png" alt="Result pic 1" title="3.0修改value函数"></p><p><img src="/contentimg/30/2.gif" alt="Result pic 1" title="键值修改效果"></p><p>　　效果完全和IK动画里面的绑定骨骼是一样的。这里编制动画，就和普通的编UI动画一样。</p><p><img src="/contentimg/30/3.gif" alt="Result pic 1" title="键值修改效果"></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>　　这个插件在美术方面的玩法比较高级（编制各种动画效果），在程序方面需要写的代码基本没有，因为都封装好了。</p><p>　　如果想发布出来，是需要对贴图材质压缩一下的，能从原来的77+M，压缩到后面20+M的。操作不多，就是对贴图使用压缩、设置static等。能节省大半的资源，提倡使用的时候必须进行优化压缩。</p><p>　　实例程序中使用了鼠标跟踪、单击、重力传感器，来调用不同的动作（expressions文件夹中的4个，实际只有3个有有效动作）。可以自己修改，使用其他方式来调用。亦或直接找到全部键值，直接做动画。</p><p>　　<a href="/unitydemo/3/index.html">体验demo</a> ，请用Chrome或者手机浏览器打开。</p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>　　实际使用当然不是这么简单。这里举例，Lol英雄人物界面，是“底部的背景图”+中间能动的人物+“置顶的技能、血条等数值”。是三层结构的。</p><p>　　现在这个demo，直接拖图片进去，是不行的，那个会动的人物永远是置顶的。所以需要结合其他技术来处理。使用Layer吗？尝试了一下，没生效，相机不渲染该layer，人物还是在。找到dll里面设置layer的，直接提示无效，下载老版本的，提示该函数已过期。怎么办？</p><p><img src="/contentimg/30/7.png" alt="Result pic 1" title="设置Layer"></p><p>　　只能去翻说明文档了，幸好找到了。</p><p><img src="/contentimg/30/8.png" alt="Result pic 1" title="SDK更新日志"></p><p>　　回头翻了一下实例工程！原来早就存在了这个功能的示例了。前面太心急，没仔细看示例工程才没发现。</p><p><img src="/contentimg/30/13.png" alt="Result pic 1" title="通过RenderTexture渲染"></p><p>　　新建摄像机，把liv2d拉成为它的子项，然后拖出去main摄像头视野外面。接下来就是弄RenderTexture了。</p><p>　　右键新建RenderTexture，按如下设置：其实可以弄成512x512的，再小下去就失真了（为什么是512？因为原图是1024x1024，512损失还没那么明显，256就大了）。</p><p><img src="/contentimg/30/9.png" alt="Result pic 1" title="新建RenderTexture"></p><p><img src="/contentimg/30/10.png" alt="Result pic 1" title="新建材质"></p><p>　　然后把RenderTexture拖给刚才建的摄像头。这里我选择取消全部layer渲染，culling mask设置为nothing，确保不会有其他东西进来这个摄像头的视觉。</p><p><img src="/contentimg/30/11.png" alt="Result pic 1" title="赋值摄像头"></p><p>　　新建panel，赋值刚才的材质。</p><p><img src="/contentimg/30/12.png" alt="Result pic 1" title="赋值材质"></p><p>　　运行，看到人物终于夹在中间了！</p><p>　　但是这时候发现人物的眼睛跟踪鼠标，一直是看往左边的，因为实际的live2d在右边远处。这里就得去修改代码了。</p><p>　　这里的问题，就是坐标对应的是真实的Live2d。需要修改参照物为假的panel，或者直接把鼠标位置移过去。我选择了把鼠标点击计算值偏移过去的方案。</p><p><img src="/contentimg/30/14.png" alt="Result pic 1" title="修改参照物摄像头"></p><p><img src="/contentimg/30/15.png" alt="Result pic 1" title="偏移鼠标点击位置的值"></p><p><img src="/contentimg/30/4.gif" alt="Result pic 1" title="修改后效果"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文介绍如何在Unity中使用二次元风格的&lt;a href=&quot;http://www.live2d.com/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Live2D&lt;/a&gt;  。   &lt;/p&gt;
    
    </summary>
    
      <category term="第三方插件" scheme="https://YaojiaxinPC.github.io/categories/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="unity" scheme="https://YaojiaxinPC.github.io/tags/unity/"/>
    
      <category term="Live2D" scheme="https://YaojiaxinPC.github.io/tags/Live2D/"/>
    
  </entry>
  
  <entry>
    <title>Unity异常处理---灯光渲染抛异常</title>
    <link href="https://YaojiaxinPC.github.io/29Unity_error_1/"/>
    <id>https://YaojiaxinPC.github.io/29Unity_error_1/</id>
    <published>2018-10-25T02:07:59.000Z</published>
    <updated>2018-10-25T08:42:14.758Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录怎么处理“Unkown Mixed bake mode in LightModeUtil.MapSettings() UnityEditor.DockArea”异常。</p><a id="more"></a><p><img src="/contentimg/29/2.png" alt="Result pic 1" title="报错情况"></p><p>　　当时是修改灯光渲染的时候抛的异常。没头绪，后来找到一篇<a href="https://blog.csdn.net/yuhan61659/article/details/80337839" rel="external nofollow noopener noreferrer" target="_blank">文章</a> 介绍这个。</p><p><img src="/contentimg/29/1.png" alt="Result pic 1" title="取消勾选"></p><p>　　老版本Unity上没这个问题，我是在2017上遇到的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录怎么处理“Unkown Mixed bake mode in LightModeUtil.MapSettings() UnityEditor.DockArea”异常。&lt;/p&gt;
    
    </summary>
    
      <category term="异常处理" scheme="https://YaojiaxinPC.github.io/categories/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    
      <category term="unity" scheme="https://YaojiaxinPC.github.io/tags/unity/"/>
    
      <category term="异常处理" scheme="https://YaojiaxinPC.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>简单算法---求素数</title>
    <link href="https://YaojiaxinPC.github.io/28algorithm_2/"/>
    <id>https://YaojiaxinPC.github.io/28algorithm_2/</id>
    <published>2018-10-24T02:07:59.000Z</published>
    <updated>2018-10-24T17:43:27.034Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文以“判断101-200之间有多少个素数”介绍求素数的7种解法：</p><ol><li>遍历每个值进行相除。</li><li>取开方根，只遍历2~开方根。</li><li>间隔6个数只取2个值计算，结合开方根。</li><li>从头开始，保存每个素数，遍历时只需要判断是否能让集合中的素数整除。</li><li>保存素数，结合开方根优化。</li><li>简单线性筛法。</li><li>优化版线性筛法。</li></ol><a id="more"></a><p>　　该题较简单，但是没想到仔细想的时候发现解法这么多。</p><p>　　首先需要了解什么是素数：只能被1和本身整除的整数，就是素数。</p><h2 id="最基础解法：遍历每个值相除"><a href="#最基础解法：遍历每个值相除" class="headerlink" title="最基础解法：遍历每个值相除"></a>最基础解法：遍历每个值相除</h2><p>　　这是刚接触到题目时，每个人第一个想到的解法：用2~(该数-1)来除，如果都不能整除，这个数就是素数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 简单处理，一个一个数字去除</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">SimpleGetNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = beginnum; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断是否能整除</span></span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断前面的循环是否会提前break，提前break时，j &lt; k ；有break说明能获得整除</span></span><br><span class="line">        <span class="keyword">if</span> (j &gt;= i &amp;&amp; i != <span class="number">0</span> &amp;&amp; i != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            counts++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　但是，这里存在大量多余的判断。</p><h2 id="遍历2-开方根"><a href="#遍历2-开方根" class="headerlink" title="遍历2~开方根"></a>遍历2~开方根</h2><p>　　思想：一个数=前面某个数 X n ，推断出来，肯定存在“某个数” &lt; n，或者 n&lt; “某个数”。这样最极端的情况，就是n=这个“某个数”，得到数 = n<sup>2</sup>；所以我们只需要除前面这n个数，后面的操作都是重复的，就可以不除了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 结合算法思想处理，最多人使用的方式</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">NormalGetNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = beginnum; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k = (<span class="keyword">int</span>)Math.Sqrt(i);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断是否能整除</span></span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断前面的循环是否会提前break，提前break时，j &lt; k ；有break说明能获得整除</span></span><br><span class="line">        <span class="keyword">if</span> (j &gt;= k &amp;&amp; i != <span class="number">0</span> &amp;&amp; i != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            counts++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="间隔6个数只取2个值计算"><a href="#间隔6个数只取2个值计算" class="headerlink" title="间隔6个数只取2个值计算"></a>间隔6个数只取2个值计算</h2><p>　　该解法是看到这个博客<a href="https://blog.csdn.net/songyunli1111/article/details/78690447" rel="external nofollow noopener noreferrer" target="_blank">判断质数/素数——我知道的最快的方法</a>  才想到的。通过观察，2、3包揽了几乎绝大部分的合数。</p><p>　　所有数可以大致以如下方式表示：</p><table><thead><tr><th>…</th><th>6x,</th><th>6x+1,</th><th>6x+2,</th><th>6x+3,</th><th>6x+4,</th><th>6x+5,</th><th>6x+6</th><th>==&gt;</th></tr></thead><tbody><tr><td>==&gt;</td><td>6(x+1),</td><td>6(x+1)+1,</td><td>6(x+1)+2,</td><td>6(x+1)+3,</td><td>6(x+1)+4,</td><td>6(x+1)+5,</td><td>6(x+1)+6</td><td>…</td></tr></tbody></table><p>　　其中6x, 6x+2, 6x+3, 6x+4都是合数，剩下 6x+1, 6x+5才存在素数的可能性。故实际，每6个数，只需要检查两个数！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 令x≥1，将大于等于5的自然数表示如下：</span></span><br><span class="line"><span class="comment">/// ··· 6x，6x+1，6x+2，6x+3，6x+4，6x+5，6(x+1），6(x+1)+1 ···</span></span><br><span class="line"><span class="comment">/// 故只需要判断6x+1和6x+5两个数，再间隔6个数再次判断</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">SuperNormalGetNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">    bool isnofrime = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = beginnum; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">6</span> != <span class="number">1</span> &amp;&amp; i % <span class="number">6</span> != <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        isnofrime = <span class="keyword">false</span>;</span><br><span class="line">        k = (<span class="keyword">int</span>)Math.Sqrt(i);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">5</span>; j &lt;= k; j += <span class="number">6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断是否能整除</span></span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span> || i % (j + <span class="number">2</span>) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                isnofrime = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isnofrime)</span><br><span class="line">        &#123;</span><br><span class="line">            counts++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用前面存在的素数来遍历判断"><a href="#用前面存在的素数来遍历判断" class="headerlink" title="用前面存在的素数来遍历判断"></a>用前面存在的素数来遍历判断</h2><p>　　合数能被素数整除，但是素数不能被其他素数整除。所以只需要保存前面获取的素数，后面的数直接除前面这些素数，不能整除，就也是素数！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 从2开始，获取素数，保存起来，给后面的数判断素数，一直判断到最大值。</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">ListGetNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, counts;</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; primelts = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="comment">//加入第一个素数2</span></span><br><span class="line">    primelts.Add(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">3</span>; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; primelts.Count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//能整除，不是素数</span></span><br><span class="line">            <span class="keyword">if</span> (i % primelts[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j == primelts.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                primelts.Add(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; primelts.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (primelts[i] &gt;= beginnum)</span><br><span class="line">        &#123;</span><br><span class="line">            counts++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结合开方根用前面存在的素数来遍历判断"><a href="#结合开方根用前面存在的素数来遍历判断" class="headerlink" title="结合开方根用前面存在的素数来遍历判断"></a>结合开方根用前面存在的素数来遍历判断</h2><p>　　上面的方法同样存在重复判断，实际上当除以的素数大于开方根的时候，后面的素数就更加不可能了，该数直接可以断定是素数了。he = su1 x su2，当su1&lt; sqrt(he)时，su2 &gt; sqrt(he);当su1&gt;sqrt(he)时，su&lt; sqrt(he)，这里就重复了。所以当前面一段找不到结果，后面的肯定也找不到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 从2开始，获取素数，保存起来，给后面的数判断素数，一直判断到最大值。</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">ListGetNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, counts, k;</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; primelts = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="comment">//加入第一个素数2</span></span><br><span class="line">    primelts.Add(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">3</span>; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k = (<span class="keyword">int</span>)Math.Sqrt(i) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; primelts.Count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (primelts[j] &gt; k)</span><br><span class="line">            &#123;</span><br><span class="line">                primelts.Add(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//能整除，不是素数</span></span><br><span class="line">            <span class="keyword">if</span> (i % primelts[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j == primelts.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                primelts.Add(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; primelts.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (primelts[i] &gt;= beginnum)</span><br><span class="line">        &#123;</span><br><span class="line">            counts++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单线性筛法"><a href="#简单线性筛法" class="headerlink" title="简单线性筛法"></a>简单线性筛法</h2><p>　　从头开始，剩下的最小的数肯定是素数，然后根据这个数，翻倍剔除掉剩下集合中的合数；最后转移该素数，继续轮回执行。执行到整个集合为空为止，全部素数已经转移出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 简单线性筛法</span></span><br><span class="line"><span class="comment">/// 从头开始，取到一个素数后，将后面对应该素数的合数全部删掉。</span></span><br><span class="line"><span class="comment">/// 这样每一轮，剩下最小的那个数肯定是素数。</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">FilterNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dictionary&lt;<span class="keyword">int</span>, bool&gt; allnums = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>, bool&gt;();</span><br><span class="line">    <span class="keyword">int</span> mininum = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//按照顺序排放</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mininum; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        allnums.Add(i, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; primelst = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="keyword">while</span> (allnums.Count &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mininum = allnums.ElementAt(<span class="number">0</span>).Key;</span><br><span class="line">        <span class="comment">//第一个数是最小的，肯定是素数</span></span><br><span class="line">        allnums.Remove(mininum);</span><br><span class="line">        primelst.Add(mininum);</span><br><span class="line">        <span class="comment">//int会溢出，需要设置为double才能防止溢出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mininum; (<span class="keyword">double</span>)i * mininum &lt;= endnum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将该素数对应的合数全部删除</span></span><br><span class="line">            allnums.Remove((<span class="keyword">int</span>)(<span class="keyword">double</span>)i * mininum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; <span class="keyword">true</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (primelst[<span class="number">0</span>] &lt; beginnum) primelst.RemoveAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> primelst.Count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这里可以用递归，但是数字大的时候会内存溢出。所以我取消了递归的方式。同时还得注意int溢出的问题，会出现46957*91467==48623为true的现象。因为int有最大值，超过就会循环取值了，正转负，负转正。</p><h2 id="优化版线性筛法"><a href="#优化版线性筛法" class="headerlink" title="优化版线性筛法"></a>优化版线性筛法</h2><p>　　上面的解法同样存在重复操作。理想情况，一个数只用剔除一次。</p><p>　　该解法是看到这个文章<a href="https://wenku.baidu.com/view/4881881daaea998fcc220e99.html" rel="external nofollow noopener noreferrer" target="_blank">线性筛法求素数的原理与实现</a>  才想到的。</p><p>这里讲解一下：</p><p>　　 合数 = A x B，当A/B又是合数时，重复下去，合数 = …x…x素数 ==&gt; 最大素数 x 第二大素数 x … x 最小素数 </p><p>　　 所以只要我们找到最小素数，把它当做B，而A又唯一（递增的i），该合数就唯一确定了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 改进FilterNum存在重复操作的缺点</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">SuperFilterNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dictionary&lt;<span class="keyword">int</span>, bool&gt; allnums = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>, bool&gt;();</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; primelst = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="comment">//先将所有数设为素数 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        allnums[i] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!allnums[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//false为素数</span></span><br><span class="line">            primelst.Add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// j =0  ==&gt; primelst[0] ==&gt; 2 * i &lt;= endnum 过滤掉后面一半的数, 因为 合数 = A x B ，必定存在 A(或者B) &lt;= 二分之一 ，</span></span><br><span class="line">        <span class="comment">// 所以实际排查前面二分之一的值时 , 后面二分之一的也已经把合数去掉了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; primelst.Count &amp;&amp; primelst[j] * i &lt;= endnum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 用已获得的素数 x index , 排查出对应唯一确定的合数 </span></span><br><span class="line">            allnums[primelst[j] * i] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// 重点！通过查找最小素数，防止了重复操作</span></span><br><span class="line">            <span class="comment">// 合数 = A x B，当A/B又是合数时，重复下去，合数 = ...x...x素数 ==&gt; 最大素数 x 第二大素数 x ... x 最小素数 </span></span><br><span class="line">            <span class="comment">// i % primelst[j] 就break，说明已经找到最小素数（j从0开始++）</span></span><br><span class="line">            <span class="comment">// 此时break，合数 = i x 最小素数primelst[j] ，能唯一定位到该合数。不会存在重复定位该合数</span></span><br><span class="line">            <span class="comment">// 举例：合数12 (有两种定位方式)== 4 x 3 ==&gt; 2 x 2 x3</span></span><br><span class="line">            <span class="comment">//                              == 6 x 2 =&gt; 3 x 2 x 2 </span></span><br><span class="line">            <span class="comment">// 实际i=4的时候，定位的是8=4x2就break；不会去定位12=4x3</span></span><br><span class="line">            <span class="comment">// i=6的时候，才定位12；</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">//同理，合数18 == 6x3 ==&gt; 2x3x3</span></span><br><span class="line">            <span class="comment">//             == 9x2 ==&gt; 3x3x2</span></span><br><span class="line">            <span class="comment">//i=6，定位12就break；等到i=9才来定位18</span></span><br><span class="line">            <span class="keyword">if</span> (i % primelst[j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (primelst[<span class="number">0</span>] &lt; beginnum)</span><br><span class="line">    &#123;</span><br><span class="line">        primelst.RemoveAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> primelst.Count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　结尾得提一下，上面的算法，三个优化版本，在数据量不大的情况下（十万左右），线性筛选法优势不大，间隔6的那种最快；但是当达到百万以上，线性是最快的！</p><p><img src="/contentimg/28/4.png" alt="Result pic 1" title="3千万"></p><p><img src="/contentimg/28/1.png" alt="Result pic 1" title="3百万"></p><p><img src="/contentimg/28/2.png" alt="Result pic 1" title="3十万"></p><p><img src="/contentimg/28/3.png" alt="Result pic 1" title="3万"></p><p>　　每次运行的时间都会有一点点的区别。注意是毫秒，千分之一秒。所以上面的数据出来是超级快的。</p><p> git代码库: <a href="https://github.com/YaojiaxinPC/hexoblog/tree/master/AlgorithmDemo" rel="external nofollow noopener noreferrer" target="_blank">Codes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文以“判断101-200之间有多少个素数”介绍求素数的7种解法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历每个值进行相除。&lt;/li&gt;
&lt;li&gt;取开方根，只遍历2~开方根。&lt;/li&gt;
&lt;li&gt;间隔6个数只取2个值计算，结合开方根。&lt;/li&gt;
&lt;li&gt;从头开始，保存每个素数，遍历时只需要判断是否能让集合中的素数整除。&lt;/li&gt;
&lt;li&gt;保存素数，结合开方根优化。&lt;/li&gt;
&lt;li&gt;简单线性筛法。&lt;/li&gt;
&lt;li&gt;优化版线性筛法。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="算法" scheme="https://YaojiaxinPC.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C#" scheme="https://YaojiaxinPC.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>http接口调试---天气API获取</title>
    <link href="https://YaojiaxinPC.github.io/27getweatherapi/"/>
    <id>https://YaojiaxinPC.github.io/27getweatherapi/</id>
    <published>2018-10-24T01:20:59.000Z</published>
    <updated>2018-10-24T02:11:54.948Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文通过天气API的获取，记录分享http接口该怎么看文档，怎么调试使用。</p><a id="more"></a><h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><h3 id="国内接口"><a href="#国内接口" class="headerlink" title="国内接口"></a>国内接口</h3><p><a href="http://www.weather.com.cn/" rel="external nofollow noopener noreferrer" target="_blank">中国天气网</a></p><p>　　当然还有其他超级多的接口。具体这里有篇文章也在介绍总结：<a href="https://www.jianshu.com/p/e3e04cf3fc0f" rel="external nofollow noopener noreferrer" target="_blank">免费、稳定的天气预报API</a></p><p>　　这里还得记录一下接口中的地区编号怎么查询。幸好git上有人整理分享了这个：<a href="https://github.com/seeways/PythonDemo/blob/master/other_tools/weather_city.json" rel="external nofollow noopener noreferrer" target="_blank">地区编码整理</a></p><h3 id="国外接口"><a href="#国外接口" class="headerlink" title="国外接口"></a>国外接口</h3><p><a href="https://openweathermap.org/api" rel="external nofollow noopener noreferrer" target="_blank">openweathermap</a></p><p>　　同样得有一个查询地区编号的地方，这个在示例里面有：<a href="http://bulk.openweathermap.org/sample/" rel="external nofollow noopener noreferrer" target="_blank">地区编码查询</a> 。下载下来后，解压用文本格式打开，Ctrl F就能找到想要的地区的编号：</p><p><img src="/contentimg/27/1.png" alt="Result pic 1" title="查找地区编号"></p><h2 id="http接口调试工具—Fiddler"><a href="#http接口调试工具—Fiddler" class="headerlink" title="http接口调试工具—Fiddler"></a>http接口调试工具—Fiddler</h2><p>　　有了接口规范和调试地址，现在就可以开始调试了。下面以Fiddler的调试为例，简单记录怎么看文档，怎么使用该工具获取到数据。</p><h3 id="获取key"><a href="#获取key" class="headerlink" title="获取key"></a>获取key</h3><p>　　api接口使用，大部分是需要先注册账号，购买（有免费的，但是得点击“购买”，以获取key）。绝大部分都会要求key，有的key是附带在get模式下，附带在http连接最后面；有的是post模式下，作为一个key附加。</p><p>　　这个key的作用，就是标记跟踪使用。服务端保存一个key，用户端必须也有对应的key，才给权限操作。</p><p>　　类似使用场景有：用户登录后的定时权限检验（每次登录会刷新key，在这段时间内操作，必须有这个key才有权限操作，通常30s服务端该key会变化，防止用户穿过登录来直接操作），这里为什么不用用户名+密码？因为密码必须要加密，这样每个接口都要进行密码的解密验证，性能消耗大；而用加密后的字符串直接比对的话，存在一种情况，当用户登录后，该连接信息被窃取（网络截获），这样就可以直接跳过登录，使用该字符串当key直接超权限操作了；同时下线长时间离线无操作客户端的功能，也是用到该key，长时间离线下，应该无权限操作，因为key和服务端上的不匹配，必须登录获取最新key才能操作。</p><p>　　下面直接使用国外那个接口的来记录：</p><p>　　注册登录后（这里可能需要VPN），可以去申请自己的key。这里使用默认分配的key来演示。</p><p><img src="/contentimg/27/2.png" alt="Result pic 1" title="找到key"></p><p>　　记录保存该key。然后点击API导航。</p><p><img src="/contentimg/27/3.png" alt="Result pic 1" title="回到API界面"></p><h3 id="看文档"><a href="#看文档" class="headerlink" title="看文档"></a>看文档</h3><p>　　这里我选中Current weather data来记录：</p><p><img src="/contentimg/27/4.png" alt="Result pic 1" title="Current weather data"></p><p>　　文档已经提示了接口格式，但是发现直接这样使用是报错的，提示的401。401错误就是提示未登录，想想前面提到了key，但是这里怎么就没使用？</p><p><img src="/contentimg/27/5.png" alt="Result pic 1" title="接口报错401"></p><p>　　打开一下示例的链接（Example）：</p><p><img src="/contentimg/27/6.png" alt="Result pic 1" title="示例"></p><p>　　发现是需要附带&amp;appid= XXXXX。</p><p>　　这种就是get模式下key的附带方式，放在最后，前提是需要找到这个key对应的“appid”这个字符串是叫什么，不同接口使用的字符串不同。</p><h3 id="使用工具预调试"><a href="#使用工具预调试" class="headerlink" title="使用工具预调试"></a>使用工具预调试</h3><p>　　下面就使用Fiddler来记录，做网页的朋友应该用的较多是postman。</p><p><img src="/contentimg/27/7.png" alt="Result pic 1" title="Fiddler"></p><p>　　该工具作用很大，能捕捉电脑上的全部http通讯。也能作为http调试工具使用。</p><p>　　这里简单介绍作为调试工具使用的记录：</p><p>　　上面分析得到的http链接，其实在空网页上打开已经能获取到data了，但是一般情况会乱码；而且，如果是post模式，就不会直接显示在网页上，找起来很麻烦，所以一般都是直接用调试工具。使用工具，主要原因也是因为这些接口不单单是一个http字符串来的，还是附带好多其他设置项：</p><p>　　这里使用广东省，查上面文档，中间是有空格的，需要转码。</p><p><img src="/contentimg/27/8.png" alt="Result pic 1" title="填入地址"></p><p>　　首先需要知道是get还是post，然后就是HTTP规范1.1。get模式直接复制http串进去就行了，直接回车或者Execute。就可以看到左边的“Result为200”的串，双击就能看到结果了。而post模式下，就需要把附加key全部复制进去下面那个框。</p><p><img src="/contentimg/27/9.png" alt="Result pic 1" title="收到结果"></p><p>　　调试工具已经识别出来返回的是json，自动帮我们解析了，当然也可以看原文本，选择“TextView”。旁边那些Headers等等也有蛮多有用信息可以看的，如果出错的话，就需要关注这些信息了。</p><p>　　http接口，一般要注意编码，还有http串里面一些特殊字符串，http在开发中使用超级多。这里只是简单提及。Fiddler的功能实际也是超级多的，有兴趣的可以多多摸索，该工具免费，同时该工具的同家族中也有个免费的反编译工具，也有收费的界面工具（实际某度可以搜到老版本的破解），做界面的朋友可以关注一下。做客户端的朋友们，可能有人会发现Win10更新到某版本后，IE内核那个dll变化比较大，导致自定义浏览器的一些网页会出问题，Fiddler解决了该问题，目前还没找到Fiddler怎么处理的，只知道打开Fiddler捕捉时，那些网页就正常，关掉后就恢复原来的异常状态了。老外在做浏览器这方面还是很牛逼的，不得不佩服。</p><p>　　结尾附加一下中国天气网的api查询接口示例，不用key：</p><p><img src="/contentimg/27/10.png" alt="Result pic 1" title="中国天气网api查询结果"></p><p>　　后面我再另外设文章分享怎么用C#写http接口服务端，Restful的普通json模式，以及table提交模式。当然还有使用xml格式的soap。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过天气API的获取，记录分享http接口该怎么看文档，怎么调试使用。&lt;/p&gt;
    
    </summary>
    
      <category term="联调" scheme="https://YaojiaxinPC.github.io/categories/%E8%81%94%E8%B0%83/"/>
    
    
      <category term="接口调试" scheme="https://YaojiaxinPC.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%B0%83%E8%AF%95/"/>
    
      <category term="API使用" scheme="https://YaojiaxinPC.github.io/tags/API%E4%BD%BF%E7%94%A8/"/>
    
      <category term="http调试" scheme="https://YaojiaxinPC.github.io/tags/http%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Unity优化_WebGL发布优化</title>
    <link href="https://YaojiaxinPC.github.io/26UnitySuper_1/"/>
    <id>https://YaojiaxinPC.github.io/26UnitySuper_1/</id>
    <published>2018-10-23T06:59:59.000Z</published>
    <updated>2018-10-23T16:27:14.685Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文是记录Unity的优化第一篇：WebGL发布优化。</p><p>　　后续将记录其他平台的优化，以及编程中遇到的优化。</p><a id="more"></a><p>　　开头分享几个博客链接：</p><p>来自印度的：<a href="http://www.theappguruz.com/blog/unity-optimization-initiative" rel="external nofollow noopener noreferrer" target="_blank">App Guruz</a> </p><p>Unity社区的两篇文章：</p><p><a href="https://blogs.unity3d.com/cn/2016/09/20/understanding-memory-in-unity-webgl/" rel="external nofollow noopener noreferrer" target="_blank">了解Unity WebGL中的内存</a> </p><p><a href="https://blogs.unity3d.com/cn/2016/12/05/unity-webgl-memory-the-unity-heap/" rel="external nofollow noopener noreferrer" target="_blank">Unity WebGL内存：Unity Heap</a> </p><p>　　本文就不重复博文中的细节了。</p><p>　　Unity发布WebGL版本，限制是很大的，必须事先定义所需内存，一旦决定，就不能减少或者增加！而且包不能太大，下载速度严重影响启动时间。特别是还有部分API限制。总体上，限制因素很多。当然，如果用2018新特性的，就能动态内存及高压缩。不过，目前还是先从普通版本做起。</p><p>　　小游戏是可以发布成WebGL版本的，但是大游戏难度系数很高，特别是画面越精美的。因为要考虑web可以运行在任何低配置的场景，特别是跑在手机32位浏览器。</p><p>　　针对Unity发布WebGL，细节有好多，目前我就按照遇到的问题，从初级开始，一个一个分享记录吧。</p><p>　　本博客会不定时分享部分官方商店里面的小游戏，同时发布成WebGL版本让大家可以体验。</p><p>　　先记录简单发布2D拾荒者遇到的问题吧。</p><h2 id="疑难解答"><a href="#疑难解答" class="headerlink" title="疑难解答"></a>疑难解答</h2><h3 id="360打不开"><a href="#360打不开" class="headerlink" title="360打不开"></a>360打不开</h3><p>　　该问题在前面的博客有提到，是新版本的Unity编译的包，部分浏览器暂时不支持WebGL2.0的特性，所以识别不了，就不能打开了。</p><p>　　只要用老版本的Unity编译发布，就可以使用了。目前我用的是5.4.6f3。发布出来是Release包；再往上的版本发布的是Build包，就得用Chrome和手机浏览器打开了。</p><h3 id="抛异常–内存不足"><a href="#抛异常–内存不足" class="headerlink" title="抛异常–内存不足"></a>抛异常–内存不足</h3><p>　　这个需要细谈。是本篇的重点。</p><p>　　Unity发布的这个webgl，运行在浏览器上，是需要事先定义内存的，后面不能减小或者增大。所以得了解你这个程序最少需要多少内存，然后根据2的幂来取值。</p><p><img src="/contentimg/26/1.png" alt="Result pic 1" title="定义内存大小的地方"></p><p>　　那怎么看程序需要多少内存？</p><h4 id="Profiler"><a href="#Profiler" class="headerlink" title="Profiler"></a>Profiler</h4><p><img src="/contentimg/26/2.png" alt="Result pic 1" title="Profiler"></p><p>　　在memory部分，可以查看当前场景使用了多少内存。一般看Texture和Audio就行，这两个是最大的，加起来的值就是至少需要的内存，往上取2的幂就能大概出一个值了。像图中，大致23m，所以往上取32m就行。</p><h4 id="gzip解压方式"><a href="#gzip解压方式" class="headerlink" title="gzip解压方式"></a>gzip解压方式</h4><p>　　这里还有个办法，就是先编译一次包。然后把Release里的3个包全换成后缀gzip，解压出来，凑起来的大小就是到时在浏览器里的大小。</p><p><img src="/contentimg/26/3.png" alt="Result pic 1" title="gzip解压后大小 27.6m"></p><h2 id="优化（重点）"><a href="#优化（重点）" class="headerlink" title="优化（重点）"></a>优化（重点）</h2><h3 id="删除多余文件"><a href="#删除多余文件" class="headerlink" title="删除多余文件"></a>删除多余文件</h3><p>　　第一个，首要的，删除多余文件。</p><p>　　可以通过%homepath%\AppData\Local\Unity\Editor\Editor.log，或者是在Console窗口最右边打开。</p><p><img src="/contentimg/26/4.png" alt="Result pic 1" title="Console窗口最右边"></p><p><img src="/contentimg/26/5.png" alt="Result pic 1" title="Editor.log"></p><p>　　查看该日志，可以看到里面记录了整个编译过程，包里有什么文件，大小等等信息。</p><h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><p>　　图片压缩在5.x版本的优化选项较少，在2018的就多了，可以选择压缩类型、压缩质量等等参数。</p><p>　　5.x的<a href="http://blog.sina.com.cn/s/blog_5b6cb9500102vi6i.html" rel="external nofollow noopener noreferrer" target="_blank">取消Generate Mip Maps</a>  ， 因为只是普通的2D图片，不需要3D效果。</p><p><img src="/contentimg/26/6.png" alt="Result pic 1" title="取消Generate Mip Maps"></p><p>然后就是根据自己喜好来调压缩比例了。压缩质量越低，看起来越模糊。</p><p><img src="/contentimg/26/7.png" alt="Result pic 1" title="最高压缩"></p><p><img src="/contentimg/26/8.png" alt="Result pic 1" title="保持原质量"></p><h3 id="audio压缩"><a href="#audio压缩" class="headerlink" title="audio压缩"></a>audio压缩</h3><p>　　其实也不算压缩，只是修改了音频文件的读取方式而已。</p><p>　　首先要找出大文件，一般是背景音乐：</p><p><img src="/contentimg/26/9.png" alt="Result pic 1" title="找出大文件"></p><p>　　这里可以修改的只有一个Load Type选项，一般情况下忽略第一个。第二第三差不多，一般都是建议大文件选第二个（Compressed in memory）；零碎的小文件选第三个（streaming）。区别就是加载时会不会存在延迟，这个在大文件上才会体现出来。</p><p><img src="/contentimg/26/10.png" alt="Result pic 1" title="audio优化"></p><p>　　记住这里选第一个的话，这12个文件，会导致运行时的audio内存高达13m。选stream的话才250kb。差别很大的。</p><h3 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h3><p>　　在这个2D小游戏中，剩下其他的优化效果很小，就设置static选项（让系统自动优化）、取消天空盒等等细节。所以暂时不提，等后面3D部分的再说这个优化。</p><h3 id="编译优化"><a href="#编译优化" class="headerlink" title="编译优化"></a>编译优化</h3><p>　　由于这个2D小游戏很简单，没涉及其他的，所以可以直接上编译选项优化了。</p><p>　　直接到Player Settings设置：</p><p><img src="/contentimg/26/11.png" alt="Result pic 1" title="Publishing Settings"></p><p>　　Enable Exceptions设为None，启用Data caching。根据前面观察的内存大小，设置一个值（该值后面能在文本文件直接修改，故此处影响小，随便填）。</p><p><img src="/contentimg/26/12.png" alt="Result pic 1" title="Other Settings"></p><p>　　这里只有两个是必须的：</p><ol><li><p>启用“Strip Engine Code”，该项表示剔除不用的dll。</p></li><li><p>不打印log。</p></li></ol><p>　　其他的看喜好选吧。不是必要设置。然后就可以编译出包了！</p><p><img src="/contentimg/26/13.png" alt="Result pic 1" title="记录申请内存大小的属性"></p><h2 id="html优化"><a href="#html优化" class="headerlink" title="html优化"></a>html优化</h2><p>　　现在可以运行看到效果了，初始是不提供file模式看效果的，这里有篇文件介绍怎么设置Chrome支持file模式运行：</p><p><a href="http://www.cnblogs.com/huwenya/p/9547224.html" rel="external nofollow noopener noreferrer" target="_blank">Unity发布WebGl注意事项</a> </p><p>　　细节我就不再提了。下面要说的是怎么让内容居中显示：</p><p>　　初始启动，是在左上角的。体验不是很好。但是可以用F12看到，是绘制在canvas上的内容，是可以通过修改html代码来实现居中显示的。</p><p>　　html居中显示的方式是：</p><ol><li>增加div。</li><li>设置style=”position: absolute;left:50%;top:50%;margin-left:0px;margin-top:0px;”</li></ol><p>　　注意这里有个margin偏移值，因为目前的居中设置，是以该内容的左上角来居中的，所以出来效果是在第四象限的位置。就得让它根据自己的大小来偏1/2过去，就居中了。</p><p>　　由于html代码不支持动态计算，所以只能写css脚本了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"contdivc"</span> <span class="attr">style</span>=<span class="string">"position: absolute;left:50%;top:50%;margin-left:0px;margin-top:0px;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    window.onload=function() &#123;</span></span><br><span class="line"><span class="undefined">            document.getElementById( "contdivc" ).style.marginLeft = "-"+960/2 + "px";</span></span><br><span class="line"><span class="undefined">document.getElementById( "contdivc" ).style.marginTop = "-"+600/2 + "px";</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"emscripten"</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">oncontextmenu</span>=<span class="string">"event.preventDefault()"</span> <span class="attr">height</span>=<span class="string">"600px"</span> <span class="attr">width</span>=<span class="string">"960px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　现在刷新运行，居中了！</p><p>　　但是不能每次编译都来这里修改html的呀。怎么处理？</p><p>　　回到开头，Unity日志里面其实有提到，是用插件来编译的，这样，是肯定存在一个模版文件的！</p><p>　　该模版就在安装目录下：5.4.6f3\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\WebGLTemplates</p><p><img src="/contentimg/26/14.png" alt="Result pic 1" title="母板html"></p><p>　　那就好办了，直接改该文件就行了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"contdivc"</span> <span class="attr">style</span>=<span class="string">"position: absolute;left:50%;top:50%;margin-left:0px;margin-top:0px;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    window.onload=function() &#123;</span></span><br><span class="line"><span class="undefined">            document.getElementById( "contdivc" ).style.marginLeft = "-"+%UNITY_WIDTH%/2 + "px";</span></span><br><span class="line"><span class="undefined">document.getElementById( "contdivc" ).style.marginTop = "-"+%UNITY_HEIGHT%/2 + "px";</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"emscripten"</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">oncontextmenu</span>=<span class="string">"event.preventDefault()"</span> <span class="attr">height</span>=<span class="string">"%UNITY_HEIGHT%px"</span> <span class="attr">width</span>=<span class="string">"%UNITY_WIDTH%px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文末贴几个我觉得还不错的文章：</p><p><a href="http://www.cnblogs.com/huwenya/p/9547224.html" rel="external nofollow noopener noreferrer" target="_blank">Unity发布WebGl注意事项</a></p><p><a href="https://www.cnblogs.com/Jason-c/p/8137193.html" rel="external nofollow noopener noreferrer" target="_blank">Unity 性能优化（力荐）</a></p><p><a href="https://blog.csdn.net/ElyXiao/article/details/51980863" rel="external nofollow noopener noreferrer" target="_blank">unity几种优化建议</a></p><p><a href="https://blog.csdn.net/mayzhengxi/article/details/76616864" rel="external nofollow noopener noreferrer" target="_blank">Unity5.3.3 webgl 注意</a></p><p><a href="https://blog.csdn.net/lyh916/article/details/44115095" rel="external nofollow noopener noreferrer" target="_blank">[Unity优化]减少内存占用：贴图优化</a></p><p><a href="https://blog.csdn.net/yuyingwin/article/details/78851312" rel="external nofollow noopener noreferrer" target="_blank">Unity3d Mesh、Texture、UI 压缩降低内存</a></p><p><a href="https://blog.csdn.net/qq_33747722/article/details/70544822" rel="external nofollow noopener noreferrer" target="_blank">Unity游戏开发性能优化（Sprite优化）</a></p><p><a href="https://blog.csdn.net/a673544319/article/details/82142283" rel="external nofollow noopener noreferrer" target="_blank">Unity游戏开发图片纹理压缩方案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文是记录Unity的优化第一篇：WebGL发布优化。&lt;/p&gt;
&lt;p&gt;　　后续将记录其他平台的优化，以及编程中遇到的优化。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity优化" scheme="https://YaojiaxinPC.github.io/categories/Unity%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="发布优化" scheme="https://YaojiaxinPC.github.io/tags/%E5%8F%91%E5%B8%83%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Unity平台预编译指令</title>
    <link href="https://YaojiaxinPC.github.io/25UnityPlatform_define/"/>
    <id>https://YaojiaxinPC.github.io/25UnityPlatform_define/</id>
    <published>2018-10-23T05:07:59.000Z</published>
    <updated>2018-10-23T05:30:01.855Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录Unity的平台预编译指令。</p><a id="more"></a><p><a href="https://docs.unity3d.com/Manual/PlatformDependentCompilation.html" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a> </p><p>　　在脚本中，经常看到define指令，具体到底有多少指令？下面简单转载一下官方文档。</p><style>table th:first-of-type {    width: 200px;}</style><table><thead><tr><th style="text-align:right">定义</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:right">UNITY_EDITOR</td><td style="text-align:left">#define指令，用于从游戏代码中调用Unity Editor脚本。</td></tr><tr><td style="text-align:right">UNITY_EDITOR_WIN</td><td style="text-align:left">Windows上编辑器代码的#define指令。</td></tr><tr><td style="text-align:right">UNITY_EDITOR_OSX</td><td style="text-align:left">Mac OS X上编辑器代码的#define指令。</td></tr><tr><td style="text-align:right">UNITY_STANDALONE_OSX</td><td style="text-align:left">#define指令，用于编译/执行专门用于Mac OS X的代码（包括Universal，PPC和Intel架构）。</td></tr><tr><td style="text-align:right">UNITY_STANDALONE_WIN</td><td style="text-align:left">#define指令，用于专门为Windows独立应用程序编译/执行代码。</td></tr><tr><td style="text-align:right">UNITY_STANDALONE_LINUX</td><td style="text-align:left">#define指令，用于专门为Linux独立应用程序编译/执行代码。</td></tr><tr><td style="text-align:right">UNITY_STANDALONE</td><td style="text-align:left">#define指令，用于编译/执行任何独立平台（Mac OS X，Windows或Linux）的代码。</td></tr><tr><td style="text-align:right">UNITY_WII</td><td style="text-align:left">#define指令，用于编译/执行Wii控制台的代码。</td></tr><tr><td style="text-align:right">UNITY_IOS</td><td style="text-align:left">#define指令，用于编译/执行iOS平台的代码。</td></tr><tr><td style="text-align:right">UNITY_IPHONE</td><td style="text-align:left">已过时。请改用UNITY_IOS。</td></tr><tr><td style="text-align:right">UNITY_ANDROID</td><td style="text-align:left">适用于Android平台的#define指令。</td></tr><tr><td style="text-align:right">UNITY_PS4</td><td style="text-align:left">用于运行PlayStation 4代码的#define指令。</td></tr><tr><td style="text-align:right">UNITY_XBOXONE</td><td style="text-align:left">执行Xbox One #define指令代码。</td></tr><tr><td style="text-align:right">UNITY_TIZEN</td><td style="text-align:left">Tizen平台的#define指令。</td></tr><tr><td style="text-align:right">UNITY_TVOS</td><td style="text-align:left">Apple TV平台的#define指令。</td></tr><tr><td style="text-align:right">UNITY_WSA</td><td style="text-align:left">通用Windows平台 #define指令。此外，NETFX_CORE是在针对.NET Core编译C＃文件和使用.NET 脚本后端时定义的。</td></tr><tr><td style="text-align:right">UNITY_WSA_10_0</td><td style="text-align:left">通用Windows平台的#define指令。另外，在针对.NET Core编译C＃文件时定义了WINDOWS_UWP。</td></tr><tr><td style="text-align:right">UNITY_WINRT</td><td style="text-align:left">与UNITY_WSA相同。</td></tr><tr><td style="text-align:right">UNITY_WINRT_10_0</td><td style="text-align:left">相当于UNITY_WSA_10_0</td></tr><tr><td style="text-align:right">UNITY_WEBGL</td><td style="text-align:left">WebGL #define指令。</td></tr><tr><td style="text-align:right">UNITY_FACEBOOK</td><td style="text-align:left">Facebook平台的#define指令（WebGL或Windows独立版）。</td></tr><tr><td style="text-align:right">UNITY_ADS</td><td style="text-align:left">#define指令，用于从您的游戏代码中调用Unity Ads方法。5.2及更高版本。</td></tr><tr><td style="text-align:right">UNITY_ANALYTICS</td><td style="text-align:left">用于调用Unity Analytics的 #define指令为游戏代码方法。5.2及更高版本。</td></tr><tr><td style="text-align:right">UNITY_ASSERTIONS</td><td style="text-align:left">断言控制进程的#define指令。</td></tr></tbody></table><p>　　这里插入一下MarkDown插入表格的技巧：<a href="https://blog.csdn.net/maxsky/article/details/54666998" rel="external nofollow noopener noreferrer" target="_blank">Markdown 表格之调整宽度技巧</a></p><p><img src="/contentimg/25/1.png" alt="Result pic 1" title="源文件"></p><p>还有给定版本号XYZ</p><blockquote><p> Unity以下列格式公开三个全局#define指令：UNITY_X，UNITY_X_Y和UNITY_X_Y_Z</p></blockquote><p>例如：Unity 5.0.1指令的示例：</p><table><thead><tr><th style="text-align:right">定义</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:right">UNITY_5</td><td style="text-align:left">每个5.XY版本都公开了Unity 5发行版的#define指令。</td></tr><tr><td style="text-align:right">UNITY_5_0</td><td style="text-align:left">主要版本Unity 5.0的#define指令，在每个5.0.Z版本中公开。</td></tr><tr><td style="text-align:right">UNITY_5_0_1</td><td style="text-align:left">Unity 5.0.1次要版本的#define指令。</td></tr></tbody></table><p>还能以UNITY_X_Y_OR_NEWER格式来有选择地编译代码。</p><table><thead><tr><th style="text-align:right">定义</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:right">ENABLE_MONO</td><td style="text-align:left">为Mono编写后端#define脚本。</td></tr><tr><td style="text-align:right">ENABLE_IL2CPP</td><td style="text-align:left">用于IL2CPP的脚本后端#define 。</td></tr><tr><td style="text-align:right">ENABLE_DOTNET</td><td style="text-align:left">脚本编写后端#define for .NET。</td></tr><tr><td style="text-align:right">NETFX_CORE</td><td style="text-align:left">在.NET上针对.NET Core类库构建脚本时定义。</td></tr><tr><td style="text-align:right">NET_2_0</td><td style="text-align:left">在Mono和IL2CPP上针对.NET 2.0 API兼容级别构建脚本时定义。</td></tr><tr><td style="text-align:right">NET_2_0_SUBSET</td><td style="text-align:left">在Mono和IL2CPP上针对.NET 2.0 Subset API兼容级别构建脚本时定义。</td></tr><tr><td style="text-align:right">NET_4_6</td><td style="text-align:left">在Mono和IL2CPP上针对.NET 4.x API兼容级别构建脚本时定义。</td></tr><tr><td style="text-align:right">NET_STANDARD_2_0</td><td style="text-align:left">在Mono和IL2CPP上针对.NET Standard 2.0 API兼容级别构建脚本时定义。</td></tr><tr><td style="text-align:right">ENABLE_WINMD_SUPPORT</td><td style="text-align:left">在IL2CPP和.NET上启用Windows运行时支持时定义。有关详细信息，请参阅<a href="https://docs.unity3d.com/Manual/IL2CPP-WindowsRuntimeSupport.html" rel="external nofollow noopener noreferrer" target="_blank">Windows运行时支持</a>  。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录Unity的平台预编译指令。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity" scheme="https://YaojiaxinPC.github.io/categories/Unity/"/>
    
    
      <category term="指令" scheme="https://YaojiaxinPC.github.io/tags/%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>5个简单算法</title>
    <link href="https://YaojiaxinPC.github.io/24algorithm_1/"/>
    <id>https://YaojiaxinPC.github.io/24algorithm_1/</id>
    <published>2018-10-23T00:07:59.000Z</published>
    <updated>2018-10-23T04:04:53.674Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文介绍五个算法小题目：</p><ol><li>四个不同数字组成互不相等且不重复的三位数。</li><li>斐波那契数列。</li><li>字符串转整型。</li><li>简单逻辑思考题。</li><li>数组移动</li></ol><a id="more"></a><p>　　分享一下博客上看到的一些算法题：</p><h2 id="四个数字组成三位数"><a href="#四个数字组成三位数" class="headerlink" title="四个数字组成三位数"></a>四个数字组成三位数</h2><p>　　有数字：1、2、3、4，请问能组成多少个互不相同且无重复数字的三位数？请输出这些数字。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>　　三位数，百位数有4种选择，则十位数有3种选择，从而个位数只有2种选择。共4x3x2=24种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == k || k == i) <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">            count++;</span><br><span class="line">            Console.WriteLine(<span class="string">"第&#123;1&#125;种情况：&#123;0&#125;"</span>, i * <span class="number">100</span> + j * <span class="number">10</span> + k, count.ToString(<span class="string">"00"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　如果要写能处理不同输入数字数量的，就得用递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 题目：有数字：1、2、3、4，请问能组成多少个互不相同且无重复数字的三位数？请输出这些数字。</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">public class NumToInt : IGetResult</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConsoleOut</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>&gt; inputlst = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;() &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] inputnums = inputlst.ToArray();</span><br><span class="line">        List&lt;<span class="keyword">int</span>&gt; result = NumToIntMethod(inputnums);</span><br><span class="line">        StringBuilder txt = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (result.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            txt.Append(<span class="string">"结果共 "</span> + result.Count + <span class="string">" 个；分别是： "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; result.Count - <span class="number">1</span>) txt.Append(result[i] + <span class="string">"、 "</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    txt.Append(result[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            txt.Append(<span class="string">"存在重复数字，请重新输入！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(txt.ToString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 输入有多少数字，组合排序后输出结果</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="inputnum"&gt;&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;<span class="keyword">int</span>&gt; <span class="title">NumToIntMethod</span><span class="params">(<span class="keyword">int</span>[] inputnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>&gt; results = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除重复值</span></span><br><span class="line">        <span class="keyword">int</span>[] hassamenum = inputnum.GroupBy(i =&gt; i).Select(i =&gt; i.Key).ToArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不存在重复值</span></span><br><span class="line">        <span class="keyword">if</span> (hassamenum.Count() == inputnum.Count())</span><br><span class="line">        &#123;</span><br><span class="line">            GetNum(<span class="number">0</span>, inputnum.ToList(),ref results);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">///  递归调用</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="beforenum"&gt;前面组合的数字&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="leftlst"&gt;剔除掉已选数字后的集合&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="alllst"&gt;全部结果总集合&lt;/param&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GetNum</span><span class="params">(<span class="keyword">int</span> beforenum, List&lt;<span class="keyword">int</span>&gt; leftlst, ref List&lt;<span class="keyword">int</span>&gt; alllst)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//只剩最后一个数字，表示可以输出结果</span></span><br><span class="line">        <span class="keyword">if</span> (leftlst.Count == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!alllst.Contains(beforenum))<span class="comment">//检查是否重复，99.9%概率不会重复</span></span><br><span class="line">            &#123;</span><br><span class="line">                alllst.Add(beforenum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"重复！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; leftlst.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将前面的数字组合</span></span><br><span class="line">            <span class="keyword">int</span> tmpnum = beforenum * <span class="number">10</span> + leftlst[i];</span><br><span class="line">            List&lt;<span class="keyword">int</span>&gt; tmplst = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            tmplst.AddRange(leftlst);</span><br><span class="line">            <span class="comment">//剔除已组合的数字</span></span><br><span class="line">            tmplst.RemoveAt(i);</span><br><span class="line"></span><br><span class="line">            GetNum(tmpnum, tmplst, ref alllst);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a><a href="https://baike.baidu.com/item/斐波那契数列/99145?fr=aladdin" rel="external nofollow noopener noreferrer" target="_blank">斐波那契数列</a></h2><p>　　有一列数：1、1、2、3、5……求第30个数。</p><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><p>　　第i个数等于第(i-1)个数+第(i-2)个数。使用递归。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetNum</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (GetNum(index - <span class="number">1</span>) + GetNum(index - <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这里提一下我们在朋友圈经常看到的一个斐波那契数列应用：<a href="https://zhidao.baidu.com/question/287761267.html" rel="external nofollow noopener noreferrer" target="_blank">切割巧克力</a></p><p>　　某人把一个8x8的巧克力切成4块，却能拼成一个5x13的长方形==》64 = 65?!</p><p>　　其实这里就是利用了斐波那契数列的这个性质：5、8、13正是数列中相邻的三个项！每个奇数项的平方都比前后两项之积多1，每个偶数项的平方都比前后两项之积少1。加上另一个特性：前一项与后一项之比越来越接近黄金分割。</p><h2 id="字符串转整型"><a href="#字符串转整型" class="headerlink" title="字符串转整型"></a>字符串转整型</h2><p>　　将用户输入的字符串，不用系统api转化为整型。</p><h3 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h3><p>　　依靠ASCII，或者每个char与0的差值，判断是否为数字，是否10之内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetNum</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> gap = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        gap = str[i] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span> (gap &lt; <span class="number">0</span> || gap &gt;= <span class="number">10</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        num = num * <span class="number">10</span> + gap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逻辑思考题"><a href="#逻辑思考题" class="headerlink" title="逻辑思考题"></a>逻辑思考题</h2><p>　　A、B、C、D、E五个学生计划报名参加活动，请根据以下条件判断谁真正参加活动：</p><ol><li><p>A参加，B也参加；</p></li><li><p>B和C只有一个人参加；</p></li><li><p>C和D或者都参加，或者都不参加；</p></li><li><p>D和E中至少有一个人参加；</p></li><li><p>如果E参加，那么A和D也参加。</p></li></ol><h3 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h3><p>　　1，0为参加或者不参加；设置5个循环进行判断，将条件转化成对应的值判断进行循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] name = &#123; <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] value = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (value[<span class="number">0</span>] = <span class="number">0</span>; value[<span class="number">0</span>] &lt; <span class="number">2</span>; value[<span class="number">0</span>]++) <span class="comment">// &lt; 2 取0、1两个值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (value[<span class="number">1</span>] = <span class="number">0</span>; value[<span class="number">1</span>] &lt; <span class="number">2</span>; value[<span class="number">1</span>]++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (value[<span class="number">2</span>] = <span class="number">0</span>; value[<span class="number">2</span>] &lt; <span class="number">2</span>; value[<span class="number">2</span>]++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (value[<span class="number">3</span>] = <span class="number">0</span>; value[<span class="number">3</span>] &lt; <span class="number">2</span>; value[<span class="number">3</span>]++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (value[<span class="number">4</span>] = <span class="number">0</span>; value[<span class="number">4</span>] &lt; <span class="number">2</span>; value[<span class="number">4</span>]++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>((value[<span class="number">1</span>]&gt;=value[<span class="number">0</span>]) <span class="comment">//B不参加时，A肯定不参加；B参加时，A不一定参加</span></span><br><span class="line">                        &amp;&amp;(value[<span class="number">1</span>]+value[<span class="number">2</span>]==<span class="number">1</span>)</span><br><span class="line">                        &amp;&amp;(value[<span class="number">2</span>]==value[<span class="number">3</span>])</span><br><span class="line">                        &amp;&amp;(value[<span class="number">3</span>]+value[<span class="number">4</span>] ==<span class="number">1</span>)</span><br><span class="line">                        &amp;&amp;(value[<span class="number">4</span>]==<span class="number">0</span> </span><br><span class="line">                        ||(value[<span class="number">4</span>] == <span class="number">1</span>&amp;&amp;value[<span class="number">0</span>] ==<span class="number">1</span> &amp;&amp; value[<span class="number">3</span>] ==<span class="number">1</span>)))</span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.Length; i++)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span> (value[i] == <span class="number">1</span>)</span><br><span class="line">                                    Console.WriteLine(<span class="string">"&#123;0&#125;参加"</span>,name[i]);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    Console.WriteLine(<span class="string">"&#123;0&#125;不参加"</span>, name[i]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　该逻辑思考题比较有趣，第一次看到这样和代码结合起来的逻辑题。    </p><h2 id="数组移动"><a href="#数组移动" class="headerlink" title="数组移动"></a><a href="https://www.cnblogs.com/I-am-Betty/p/3611518.html" rel="external nofollow noopener noreferrer" target="_blank">数组移动</a></h2><p>　　这个得推荐去链接中的<a href="https://www.cnblogs.com/I-am-Betty/p/3611518.html" rel="external nofollow noopener noreferrer" target="_blank">博客</a> 仔细看，想法很新奇的。</p><p>这里简单拿一个来讲：</p><p>　　把数组元素前后部分交换 MoveFirstPartOfArrayToTheEnd(int[] array, int index) 比如 {1,2,3,4,5,6,7} 3  =&gt; {4,5,6,7,1,2,3}</p><h3 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h3><p>　　简单处理：把1-2-3排后面；然后从头开始把剩下的排进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GetNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span>[] aa = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span>[] bb = <span class="keyword">new</span> <span class="keyword">int</span>[aa.Count()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; aa.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; index)</span><br><span class="line">        &#123;</span><br><span class="line">            bb[i + (aa.Count() - index)] = aa[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            bb[i - index] = aa[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    foreach (<span class="keyword">var</span> item in bb)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　上面的处理思想一般般，该题主要是了解链接中反转的用法：</p><ol><li><p>分段1，2，3—4，5，6，7</p></li><li><p>分段反转3，2，1 — 7，6，5，4</p></li><li><p>整体反转4，5，6，7，1，2，3</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReverseNums</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] aa = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span>[] a1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a1.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a1[i] = aa[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] a2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span> - <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a2.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a2[i] = aa[i + a1.Count()];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b1 = a1.Reverse().ToArray();</span><br><span class="line">    <span class="keyword">var</span> b2 = a2.Reverse().ToArray();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a1.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        aa[i] = b1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a2.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        aa[i + a1.Count()] = b2[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bb = aa.Reverse().ToArray();</span><br><span class="line"></span><br><span class="line">    foreach (<span class="keyword">var</span> item in bb)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> git代码库: <a href="https://github.com/YaojiaxinPC/hexoblog/tree/master/AlgorithmDemo" rel="external nofollow noopener noreferrer" target="_blank">Codes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文介绍五个算法小题目：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;四个不同数字组成互不相等且不重复的三位数。&lt;/li&gt;
&lt;li&gt;斐波那契数列。&lt;/li&gt;
&lt;li&gt;字符串转整型。&lt;/li&gt;
&lt;li&gt;简单逻辑思考题。&lt;/li&gt;
&lt;li&gt;数组移动&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="算法" scheme="https://YaojiaxinPC.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C#" scheme="https://YaojiaxinPC.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Unity发布WebGL---360等部分浏览器不支持</title>
    <link href="https://YaojiaxinPC.github.io/23unitywebgl360error/"/>
    <id>https://YaojiaxinPC.github.io/23unitywebgl360error/</id>
    <published>2018-10-22T13:07:59.000Z</published>
    <updated>2018-10-22T16:00:27.728Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文介绍三种版本Unity发布WebGL对浏览器的影响问题：</p><ol><li>2018.2全新支持WebAssembly，支持内存动态调配，极大压缩包大小。</li><li>5.5.0能发布Release版本，但是在360等浏览器上会抛异常；再往上的版本只能发布Build版本。</li><li>5.4.6以下版本，发布Release版本，支持360等浏览器运行。</li></ol><a id="more"></a><p>　　准备在博客上发一个小游戏demo，结果在360抛异常了，在chrome上是可以的，手机上也行。所以webgl是没问题的，推测是unity编译器的问题。但是搜索上找不到关键字。可能没什么人关注这个问题吧，毕竟都是用在手游上的。</p><p>　　通过浏览器调试工具，排查到是缺少“decompress.js”，比较了一下，编译出来”.unityweb”后缀的，都是没有“UnityConfig”文件夹。由于不同版本生成的UnityLoader.js不同，调用工具的步骤已经不同了，才导致360等低版本的浏览器打不开新Unity特性的WebGL程序。</p><p><img src="/contentimg/23/12.png" alt="Result pic 1" title="WebGLSupport目录比较"></p><p>　　由于C++方面和编译器有关，好多用2008可以编译，但是2010开始的会抛异常。所以就尝试用5.x的来编译。结果很神奇，出来的包不一样，是Release文件夹！之前用2017是Build文件夹。没想到360竟然这次跑成功了！</p><p>　　由此推断是webgl版本问题。接着是一个一个版本的更新看，5.5的更新还有提到gz，后面的没提到，下载了5.6的，编译出来是build；所以再找5.5的，终于是Release，但是360上抛异常了。那往前一个版本，5.4.6，正常运行！</p><p>　　下面是3个版本的运行情况：</p><h3 id="2018-2-13f1-WebAssembly模式"><a href="#2018-2-13f1-WebAssembly模式" class="headerlink" title="2018.2.13f1-WebAssembly模式"></a>2018.2.13f1-WebAssembly模式</h3><p>　　由于WebAssembly的比较亮点：包小很多，而且能动态申请内存，可以一开始就申请32m（其他版本的都得申请64m）。这里就选该模式。</p><p><img src="/contentimg/23/1.png" alt="Result pic 1" title="Chrome控制台输出"></p><p><img src="/contentimg/23/2.png" alt="Result pic 1" title="文件包大小"></p><p><img src="/contentimg/23/3.png" alt="Result pic 1" title="浏览器请求情况"></p><h3 id="2017-4-3f1"><a href="#2017-4-3f1" class="headerlink" title="2017.4.3f1"></a>2017.4.3f1</h3><p>　　WebAssembly模式在该版本是测试版，编译出来的包太大，而且运行还抛异常，这里就不提这个。</p><p><img src="/contentimg/23/4.png" alt="Result pic 1" title="Chrome控制台输出"></p><p><img src="/contentimg/23/5.png" alt="Result pic 1" title="文件包大小"></p><p><img src="/contentimg/23/6.png" alt="Result pic 1" title="浏览器请求情况"></p><h3 id="5-4-6f3"><a href="#5-4-6f3" class="headerlink" title="5.4.6f3"></a>5.4.6f3</h3><p>　　能编译出来360正常运行的版本中最新的一个。</p><p><img src="/contentimg/23/7.png" alt="Result pic 1" title="Chrome控制台输出"></p><p><img src="/contentimg/23/8.png" alt="Result pic 1" title="文件包大小"></p><p><img src="/contentimg/23/9.png" alt="Result pic 1" title="浏览器请求情况"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>　　通过前面三个版本的比较。推荐：</p><ol><li>简单的小游戏用5.4.6发布，请求量少，支持的浏览器多；</li><li>复杂的游戏用2018.2发布，包压缩率高，动态内存，但是手机上打开会提示请求摄像头权限？（可能存在扫描设备的代码）</li><li>中间的版本优势不大。通过Profiler工具的比较，2018的优势&gt;&gt;5.4.6</li></ol><p><img src="/contentimg/23/10.png" alt="Result pic 1" title="2018内存分配"></p><p><img src="/contentimg/23/11.png" alt="Result pic 1" title="5.4.6内存分配"></p><p>　　两个的代码和设置是一样的，但是Textures相差一倍，Textures是优化中最重要的一个，2018的竟然能帮我们直接优化了一倍。还有Assets的数量，也是一倍的差距。</p><p>　　再加上OpenGL ES3.0的优势，所以，复杂点的游戏，还是推荐用2018.2！</p><p>　　文末贴一下介绍2018.2的WebAssembly的一个中文链接：</p><p> <a href="http://forum.china.unity3d.com/thread-32663-1-1.html" rel="external nofollow noopener noreferrer" target="_blank">Unity 2018.2正式支持WebAssembly</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文介绍三种版本Unity发布WebGL对浏览器的影响问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2018.2全新支持WebAssembly，支持内存动态调配，极大压缩包大小。&lt;/li&gt;
&lt;li&gt;5.5.0能发布Release版本，但是在360等浏览器上会抛异常；再往上的版本只能发布Build版本。&lt;/li&gt;
&lt;li&gt;5.4.6以下版本，发布Release版本，支持360等浏览器运行。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Unity3D" scheme="https://YaojiaxinPC.github.io/categories/Unity3D/"/>
    
    
      <category term="webgl" scheme="https://YaojiaxinPC.github.io/tags/webgl/"/>
    
      <category term="环境" scheme="https://YaojiaxinPC.github.io/tags/%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Unity入门官方案例---2D Roguelike</title>
    <link href="https://YaojiaxinPC.github.io/22Roguelike/"/>
    <id>https://YaojiaxinPC.github.io/22Roguelike/</id>
    <published>2018-10-20T16:07:59.000Z</published>
    <updated>2018-10-29T04:28:14.925Z</updated>
    
    <content type="html"><![CDATA[<p>　　介绍一下接触到的好的Unity官方作品：<a href="https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-roguelike-29825" rel="external nofollow noopener noreferrer" target="_blank">2D Roguelike</a>   。</p><a id="more"></a><p><img src="/contentimg/22/1.jpg" alt="Result pic 1" title="2D Roguelike"></p><h2 id="游戏简介"><a href="#游戏简介" class="headerlink" title="游戏简介"></a>游戏简介</h2><p>　　该小游戏是2D类型，操作只有上下左右4个方向的移动，每动一下消耗1点能量，能量通过吃到食物补充；场景中有墙阻挡，需要撞4下墙才能销毁该障碍，同时还有怪物追击，被攻击到会大量消耗能量；但是怪物移动速度缓慢。</p><p>　　由于场景中的食物是固定的，吃了就没了，所以就设置了一个刷新点：“exit出口”，每到达一次，就能刷新一下全图场景，同时作为天数记录+1天；相应的，存活天数越多，怪物也会越多！</p><p>　　目前游戏以天数为关卡记录。</p><h2 id="游戏体验"><a href="#游戏体验" class="headerlink" title="游戏体验"></a>游戏体验</h2>  <p><div style="width:100%; height:500px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="500" height="500" src="/unitydemo/2/index.html"></iframe></div></p><h2 id="游戏制作"><a href="#游戏制作" class="headerlink" title="游戏制作"></a>游戏制作</h2><p>　　原材料真的很少，才一张图集。里面打包集合了全部墙和地板、人物的贴图。然后就是一些背景音乐了。</p><h3 id="1-游戏规则细化"><a href="#1-游戏规则细化" class="headerlink" title="1.游戏规则细化"></a>1.游戏规则细化</h3><p>　　写代码前，需要先了解要做什么功能。</p><p>　　这是一个逃亡游戏，为了限制逃亡，需要加上“移动能量消耗”这个限制；竟然是逃亡，那就有怪物，先用最简单的，降低怪物移动速度（玩家移动两次，怪物才移动一次），怪物接触玩家，玩家损失能量；接下来，场景中需要有障碍物，但是这些障碍物是可以通过消耗能量来击穿，防止堵死。</p><p>　　剩下就是全游戏最重要的能量了，设置两种食物，拾取到就增加能量。能量归零，游戏结束。</p><p>　　为了简化游戏，把全部对象设置了统一单位移动。全部材料统一单位。全场景10x10单位，减掉外围的一层墙，内部是8x8单位的地板，随机布置障碍物、食物和怪物。</p><p>　　增加存活天数为关卡难度设置，天数越多，难度越大；难度以怪物数量来体现。</p><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h3><p>　　这个代码架构很不错。使用抽象层，由于怪物和玩家都是一样的移动，一样的碰撞，该部分能通过泛型T抽象出来处理。而碰撞，玩家的碰撞和怪物的碰撞又是一样的逻辑，又可以抽象处理。</p><p><img src="/contentimg/22/1.png" alt="Result pic 1" title="两个抽象层函数"></p><p>　　细节的代码逻辑这里就不提了。这里简单讲讲里面一些知识点吧。</p><h4 id="RuntimeInitializeOnLoadMethod"><a href="#RuntimeInitializeOnLoadMethod" class="headerlink" title="RuntimeInitializeOnLoadMethod"></a>RuntimeInitializeOnLoadMethod</h4><p>　　该特性，实际是让函数在物体在OnLoad的时候自己执行该函数。这里有篇文章<a href="https://www.cnblogs.com/meteoric_cry/p/7602122.html" rel="external nofollow noopener noreferrer" target="_blank">Unity的RuntimeInitializeOnLoadMethod属性初探</a>  简单讲。</p><h4 id="Input-GetAxisRaw"><a href="#Input-GetAxisRaw" class="headerlink" title="Input.GetAxisRaw"></a>Input.GetAxisRaw</h4><p>　　Raw不经过处理的，会直接返回-1，0，1。</p><p>　　Input.GetAxis则是-1~+1的范围缓慢变化。两者有区别。由于我们限制了单位移动，所以用raw的才适合。</p><h4 id="float-Epsilon"><a href="#float-Epsilon" class="headerlink" title="float.Epsilon"></a>float.Epsilon</h4><p><img src="/contentimg/22/2.png" alt="Result pic 1" title="移动动画"></p><p>　　这里使用StartCoroutine来处理，防止while卡死线程。注意StartCoroutine和多线程不是同样的概念。但是可以简单理解成另外开一个线程去处理这个一帧一帧移动的动画。判断是否移动到目的的时候，不是用==，而是用float.Epsilon，避免了一些数据溢出的bug。注意,实际上会出现 double 1.0!= 1.0，所以只能会一个很小的范围来判断是否 double 1.0 ≈ 1.0。</p><h4 id="Physics2D-Linecast"><a href="#Physics2D-Linecast" class="headerlink" title="Physics2D.Linecast"></a>Physics2D.Linecast</h4><p><img src="/contentimg/22/3.png" alt="Result pic 1" title="射线检测碰撞"></p><p>　　游戏中使用的是碰撞器，所以移动前可以事先检查目的单位是否存在碰撞器。但是需要注意，物体自身的碰撞器会先被射线检测到，所以需要提前屏蔽自身的碰撞器，检测后才启用。</p><h4 id="输入检测"><a href="#输入检测" class="headerlink" title="输入检测"></a>输入检测</h4><p><img src="/contentimg/22/4.png" alt="Result pic 1" title="输入检测判断"></p><p>　　这里我修改了原来的代码。原来是通过平台处理，移动端使用滑动手势。我觉得不好用，还是统一成单点判断处理。通过判断点击的部位在人物的相对位置来处理。</p><h4 id="鼠标点击转化为相对坐标"><a href="#鼠标点击转化为相对坐标" class="headerlink" title="鼠标点击转化为相对坐标"></a>鼠标点击转化为相对坐标</h4><blockquote><p> touchEnd = Camera.main.ScreenToWorldPoint(Input.mousePosition);</p></blockquote><p>　　这里，其实整个游戏的坐标，是通过相机上的单位来换算统一成单位坐标的。所以可以直接使用相机的相对坐标来处理。</p><h4 id="代码小缺陷处理"><a href="#代码小缺陷处理" class="headerlink" title="代码小缺陷处理"></a>代码小缺陷处理</h4><p>　　我发现，当你剩下最后1能量，刚好移动到Exit就为0时，是能加载到下一关，然后就全部不动了。因为这里缺少了判断。</p><p>　　由于我使用了游戏结束后重新开始，我改的是下面这里。</p><p><img src="/contentimg/22/5.png" alt="Result pic 1" title="场景重载时检查playerFoodPoints"></p><h3 id="3-开始制作游戏"><a href="#3-开始制作游戏" class="headerlink" title="3.开始制作游戏"></a>3.开始制作游戏</h3><p>　　这里比较简单，把图集拆开，制作预制体。两个步骤而已。</p><h4 id="拆图集"><a href="#拆图集" class="headerlink" title="拆图集"></a>拆图集</h4><p>　　拆图集，这里需要了解一个概念：Pixels Per Unit</p><p><img src="/contentimg/22/6.png" alt="Result pic 1" title="Pixels Per Unit"></p><p>　　这里我为什么设置成32？</p><p>　　首先，我们看原文件大小：</p><p><img src="/contentimg/22/7.png" alt="Result pic 1" title="256 x 224"></p><p>　　是指位深度？不是这样算。我们数一下图集里面的单元，共7 x 8 。</p><p>　　对应：256==》8 &amp; 224 ==》 7</p><p>　　刚好整除，得到32像素就是一个图片的单位，也刚好图片都是正方形大小。所以这里的Pixels Per Unit，就是指多少像素一个Unit。</p><p>　　这里也有个文章介绍这个 <a href="http://gad.qq.com/article/detail/21059" rel="external nofollow noopener noreferrer" target="_blank">Unity UGUI 原理篇(二)：Canvas Scaler 縮放核心</a> </p><p>　　其他优化部分就不记录。因为有另外分开文章记录发布优化。</p><h4 id="制作预制体"><a href="#制作预制体" class="headerlink" title="制作预制体"></a>制作预制体</h4><p>　　该部分简单，就是拖拖图片而已。注意里面碰撞器是和图片岔开的，偏移一半。</p><p><img src="/contentimg/22/8.png" alt="Result pic 1" title="碰撞器岔开原单位"></p><p>　　为什么要岔开，因为初始状态下，射线检测的出发点，是在左上角。这样一开始就碰到左边的物体了。所以需要岔开。增加一半单位的距离。</p><h4 id="整合Scene"><a href="#整合Scene" class="headerlink" title="整合Scene"></a>整合Scene</h4><p><img src="/contentimg/22/9.png" alt="Result pic 1" title="摄像头的Size"></p><p>　　这里有疑问的，就是这个Size的值，应该设多少？</p><p>　　这个Size的意义，是显示界面高度的一半，共多少个单位。这里5，得到显示界面的高度是10个单位，正好对应游戏中10x10的比例。</p><p>　　为什么不是宽度？这个就得去问官方了。本问不纠结这个问题。</p><p>　　为什么开头演示那里是正方形的大小，但是默认工程是长方形的？</p><p>　　这个是发布时的设置。</p><p><img src="/contentimg/22/10.png" alt="Result pic 1" title="发布显示大小"></p><p>　　当然，该游戏实际上不用碰撞器也行，因为单位长度都是1，实际可以用数组集合来记录处理。有点像扫雷游戏那样。具体后面分享到扫雷游戏再提这种写法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　介绍一下接触到的好的Unity官方作品：&lt;a href=&quot;https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-roguelike-29825&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;2D Roguelike&lt;/a&gt;   。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity3D" scheme="https://YaojiaxinPC.github.io/categories/Unity3D/"/>
    
    
      <category term="游戏开发" scheme="https://YaojiaxinPC.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="2D" scheme="https://YaojiaxinPC.github.io/tags/2D/"/>
    
      <category term="入门级" scheme="https://YaojiaxinPC.github.io/tags/%E5%85%A5%E9%97%A8%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>abowman&#39;s demo</title>
    <link href="https://YaojiaxinPC.github.io/21swfobjectdemo/"/>
    <id>https://YaojiaxinPC.github.io/21swfobjectdemo/</id>
    <published>2018-10-19T16:07:59.000Z</published>
    <updated>2018-10-27T11:54:45.406Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享<a href="https://github.com/swfobject/swfobject" rel="external nofollow noopener noreferrer" target="_blank">swfobject</a>   插件的简单使用，展示abowman上面的3个小挂饰。</p><a id="more"></a><p>　　swfobject的git代码里面已经包了一个自动生成html的功能，所以实际是去找swf动画，加进去就可以看到效果了。</p><p>　　小鱼挂饰：<a id="download" href="/unitydemo/1/fish.swf" download="fish.swf"><i class="fa fa-download"></i><span> Download fish.swf </span><br></a></p><p><div style="width:100%; height:450px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="100%" height="400" src="/unitydemo/1/fish.html"></iframe></div></p><p>　　宠物鼠挂饰：<a id="download" href="/unitydemo/1/hamster.swf" download="hamster.swf"><i class="fa fa-download"></i><span> Download hamster.swf </span><br></a></p><p><div style="width:100%; height:450px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="100%" height="400" src="/unitydemo/1/hamster.html"></iframe></div></p><p>　　企鹅群挂饰：<a id="download" href="/unitydemo/1/penguins.swf" download="penguins.swf"><i class="fa fa-download"></i><span> Download penguins.swf </span><br></a></p><p><div style="width:100%; height:450px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="100%" height="400" src="/unitydemo/1/penguins.html"></iframe></div></p><p><img src="/contentimg/21/1.png" alt="Result pic 1" title="html代码自动生成"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享&lt;a href=&quot;https://github.com/swfobject/swfobject&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;swfobject&lt;/a&gt;   插件的简单使用，展示abowman上面的3个小挂饰。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://YaojiaxinPC.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="abowman" scheme="https://YaojiaxinPC.github.io/tags/abowman/"/>
    
      <category term="swf" scheme="https://YaojiaxinPC.github.io/tags/swf/"/>
    
      <category term="flash" scheme="https://YaojiaxinPC.github.io/tags/flash/"/>
    
      <category term="swfobject" scheme="https://YaojiaxinPC.github.io/tags/swfobject/"/>
    
  </entry>
  
  <entry>
    <title>百度sitemap和谷歌sitemap同时使用不同的url</title>
    <link href="https://YaojiaxinPC.github.io/20sitemap2url/"/>
    <id>https://YaojiaxinPC.github.io/20sitemap2url/</id>
    <published>2018-10-19T16:07:59.000Z</published>
    <updated>2018-10-20T13:35:30.441Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享如果在同一次hexo g中，百度sitemap和谷歌sitemap使用不同的url。</p><a id="more"></a><p>　　目前我挂谷歌是挂github的链接，而挂百度使用域名。但是默认配置文件中的url只有一个。这样每次生成，他们都会使用那个默认url。这样得生成两次，分开提交才能做好。</p><p>　　真有必要这么麻烦吗？</p><p>　　于是我开始找“node_modules”文件夹里面的源码。</p><p>　　谷歌的sitemap生成源码里：</p><p><img src="/contentimg/20/1.png" alt="Result pic 1" title="hexo-generator-sitemap源码"></p><p>　　是直接拿到hexo.config.sitemap，然后就是generator.js，这样绕进去找。得绕有点久。那先看看百度那边。</p><p><img src="/contentimg/20/2.png" alt="Result pic 1" title="hexo-generator-baidu-sitemap源码"></p><p><img src="/contentimg/20/3.png" alt="Result pic 1" title="baidusitemap.ejs源码"></p><p>　　有戏，使用的不是同一个sitemap，然后在baidusitemap.ejs里面又读了一次url！</p><p>　　那就好办了，在百度sitemap那里多写一个url就搞定了：</p><p><img src="/contentimg/20/4.png" alt="Result pic 1" title="baidusitemap下多加一个url"></p><p>　　搞定，一次hexo g。两个sitemap的域名是不同的了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享如果在同一次hexo g中，百度sitemap和谷歌sitemap使用不同的url。&lt;/p&gt;
    
    </summary>
    
      <category term="源码分析" scheme="https://YaojiaxinPC.github.io/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="hexo源码" scheme="https://YaojiaxinPC.github.io/tags/hexo%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>markdown扩展</title>
    <link href="https://YaojiaxinPC.github.io/19markdownextend/"/>
    <id>https://YaojiaxinPC.github.io/19markdownextend/</id>
    <published>2018-10-18T16:07:59.000Z</published>
    <updated>2018-10-27T11:20:43.537Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享markdown的妙用：插入本地文件。</p><a id="more"></a><p>　　前一篇博客，我插入了一个pdf文件。</p><p>实际上是这样写的：</p><p><img src="/contentimg/19/1.png" alt="Result pic 1" title="源文件"></p><p>　　还能这样写（使用html，并加入图标）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a id=&quot;download&quot; href=&quot;/contentimg/18/Office-2019.pdf&quot;&gt;&lt;i class=&quot;fa fa-download&quot;&gt;&lt;/i&gt;&lt;span&gt; Download PDF &lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>　　这里也放一下pdf转html的一个网站吧，速度蛮快的：</p><p><a href="http://app.xunjiepdf.com/pdf2html" rel="external nofollow noopener noreferrer" target="_blank">迅捷PDF在线转换器</a></p><p>　　转化完下载下来是一个压缩包，解压放到工程中，然后到主配置文件修改：</p><p><img src="/contentimg/19/2.png" alt="Result pic 2" title="_config.yml"></p><p>　　提醒hexo忽略编译该文件夹。然后清理整个工程：hexo clean。再生成和发布，就可以使用了。</p><h1 id="优化版"><a href="#优化版" class="headerlink" title="优化版"></a>优化版</h1><p>　　目前这个在移动端无法适配大小。而且如果每个pdf都拿去转html，效率一般般。如果只需要完成电脑端的查看，可以直接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:100%; height:950px;border:none;text-align:center"</span>&gt;</span><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">allowtransparency</span>=<span class="string">"yes"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"800"</span> <span class="attr">src</span>=<span class="string">"filepath.pdf"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　这种做法，实际hexo有个插件已经集成自动转化这种代码。但是不推荐这种做法！理由是iframe+pdf原文件，在手机端打开，不是提示下载，就是提示不支持。</p><p>　　但是日常生活中，我们看到那些做得好的网站，是能在线浏览pdf的？都是后台转html？不是，这里有个开源插件：<a href="http://mozilla.github.io/pdf.js/getting_started/#download" rel="external nofollow noopener noreferrer" target="_blank">pdf.js下载</a> 源码120+m，有兴趣的前端工程师可以去github下载来看。这个链接是已经build的。拿到手后，修改一些参数后就可以使用了。</p><p><img src="/contentimg/19/3.png" alt="Result pic 2" title="解压后，全部复制到source目录下"></p><p>　　要改的地方只有一个：找到示例中的pdf文件，删掉，同时在viewer.js脚本中找到这个文件的指向，删掉。</p><p><img src="/contentimg/19/4.png" alt="Result pic 2" title="设为空string"></p><p><img src="/contentimg/19/5.png" alt="Result pic 2" title="使用示例"></p><p>　　然后到配置文件设置不编译这个目录，重新生成，就可以启用了。使用方法是在src中，先定位到该viewer.html，然后传你要显示的pdf给它。这样在电脑端或者移动端，都是可以实时预览，而且下次引用也方便。只需要指定新的pdf目录即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享markdown的妙用：插入本地文件。&lt;/p&gt;
    
    </summary>
    
      <category term="markdown扩展" scheme="https://YaojiaxinPC.github.io/categories/markdown%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="markdown" scheme="https://YaojiaxinPC.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>office2019破解安装版</title>
    <link href="https://YaojiaxinPC.github.io/18office2019/"/>
    <id>https://YaojiaxinPC.github.io/18office2019/</id>
    <published>2018-10-18T16:06:59.000Z</published>
    <updated>2018-11-05T16:55:40.690Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享破解吧看到的office2019的破解安装。</p><a id="more"></a><p>　　在这里得感谢破解吧。上面好多破解版软件。在此提醒大家，请用于个人学习，勿用于商业用途。</p><p>　　下面引用破解吧的教程：</p><p><div style="width:100%; height:950px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="100%" height="800" src="/unitydemo/pdfjs-web/web/viewer.html?file=/contentimg/18/Office-2019.pdf"></iframe></div></p><p>　　<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=781052&amp;tdsourcetag=s_pcqq_aiomsg" rel="external nofollow noopener noreferrer" target="_blank">原文地址</a> </p><p>　　<a href="https://otp.landian.la/zh-cn/" rel="external nofollow noopener noreferrer" target="_blank">OTP地址</a> </p><p>　　<a id="download" href="/contentimg/18/Office-2019.pdf" download="Office-2019.pdf"><i class="fa fa-download"></i><span> Download PDF </span><br></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享破解吧看到的office2019的破解安装。&lt;/p&gt;
    
    </summary>
    
      <category term="软件破解包" scheme="https://YaojiaxinPC.github.io/categories/%E8%BD%AF%E4%BB%B6%E7%A0%B4%E8%A7%A3%E5%8C%85/"/>
    
    
      <category term="office" scheme="https://YaojiaxinPC.github.io/tags/office/"/>
    
      <category term="破解吧" scheme="https://YaojiaxinPC.github.io/tags/%E7%A0%B4%E8%A7%A3%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title>github security alert 解决之路</title>
    <link href="https://YaojiaxinPC.github.io/17git-securityalert/"/>
    <id>https://YaojiaxinPC.github.io/17git-securityalert/</id>
    <published>2018-10-18T16:05:59.000Z</published>
    <updated>2018-10-19T06:12:54.316Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/contentimg/17/1.png" alt="Result pic 1" title="github security alert "></p><p>　　本文记录我遇到github的“security alert”时，怎么处理解决。</p><a id="more"></a><p>　　邮箱收到这个警告的时候蛮懵的，因为代码什么的没改过。最近做的操作，就是手动修改了“package.json”，以及删除“package-lock.json”文件和“node_modules”整个文件夹。后面重新安装，npm正常跑起来，博客也能正常更新，怎么就突然发警告了？</p><p>　　登陆git查看具体警告内容：</p><p><img src="/contentimg/17/2.png" alt="Result pic 2" title="具体警告内容"></p><p>　　原来是提示需要更新插件版本而已。</p><p>那就手动更新吧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update XXX</span><br></pre></td></tr></table></figure><p>　　不对，说好的添加文件的提示怎么没出来，直接就回车返回了？</p><p>　　那强制更新到某版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update XXX@1.2.3</span><br></pre></td></tr></table></figure><p>　　还是一样？那就只能用install了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install XXX@1.2.3</span><br></pre></td></tr></table></figure><p><img src="/contentimg/17/4.png" alt="Result pic 4" title="成功更新"></p><p>　　再次提交博客环境工程，这次git不报警告了。</p><p><img src="/contentimg/17/3.png" alt="Result pic 3" title="问题解决"></p><p>最后贴一下“package.json”和“package-lock.json”关系的几个链接吧：</p><p><a href="https://blog.csdn.net/m18633778874/article/details/81625421" rel="external nofollow noopener noreferrer" target="_blank">【前端】简单了解package.json与package-lock.json</a> </p><p><a href="https://www.cnblogs.com/cangqinglang/p/8336754.html" rel="external nofollow noopener noreferrer" target="_blank">package-lock.json的作用</a> </p><p>　　简单讲就是package.json负责安装我们需要的工具，package-lock.json着负责把那些工具需要的包记录安装起来。由于lock文件很大，东西很多，一般我们不会去看，所以这时候就会遇到一些依赖包版本过低的问题。</p><p><img src="/contentimg/17/5.png" alt="Result pic 5" title="依赖关系"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/contentimg/17/1.png&quot; alt=&quot;Result pic 1&quot; title=&quot;github security alert &quot;&gt;&lt;/p&gt;
&lt;p&gt;　　本文记录我遇到github的“security alert”时，怎么处理解决。&lt;/p&gt;
    
    </summary>
    
      <category term="github疑难杂症" scheme="https://YaojiaxinPC.github.io/categories/github%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
      <category term="github" scheme="https://YaojiaxinPC.github.io/tags/github/"/>
    
      <category term="security alert" scheme="https://YaojiaxinPC.github.io/tags/security-alert/"/>
    
  </entry>
  
</feed>
