<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yao&#39;s Blog</title>
  
  <subtitle>Welcome to yao&#39;s blog.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yaojx.net/"/>
  <updated>2018-10-19T07:22:53.836Z</updated>
  <id>http://yaojx.net/</id>
  
  <author>
    <name>姚佳鑫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>markdown扩展</title>
    <link href="http://yaojx.net/2018/10/19/19markdownextend/"/>
    <id>http://yaojx.net/2018/10/19/19markdownextend/</id>
    <published>2018-10-18T16:07:59.000Z</published>
    <updated>2018-10-19T07:22:53.836Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享markdown的妙用：插入本地文件。</p><a id="more"></a><p>　　前一篇博客，我插入了一个pdf文件。</p><p>实际上是这样写的：</p><p><img src="/contentimg/19/1.png" alt="Result pic 1" title="源文件"></p><p>　　这里也放一下pdf转html的一个网站吧，速度蛮快的：</p><p><a href="http://app.xunjiepdf.com/pdf2html" target="_blank" rel="noopener">迅捷PDF在线转换器</a></p><p>　　转化完下载下来是一个压缩包，解压放到工程中，然后到主配置文件修改：</p><p><img src="/contentimg/19/2.png" alt="Result pic 2" title="_config.yml"></p><p>　　提醒hexo忽略编译该文件夹。然后清理整个工程：hexo clean。再生成和发布，就可以使用了。</p><p>插入html方式前面有提到。就是利用iframe。所以这里放文件，实际也可以写个html脚本来处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享markdown的妙用：插入本地文件。&lt;/p&gt;
    
    </summary>
    
      <category term="markdown扩展" scheme="http://yaojx.net/categories/markdown%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="markdown" scheme="http://yaojx.net/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>office2019破解安装版</title>
    <link href="http://yaojx.net/2018/10/19/18office2019/"/>
    <id>http://yaojx.net/2018/10/19/18office2019/</id>
    <published>2018-10-18T16:06:59.000Z</published>
    <updated>2018-10-19T07:13:57.826Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享破解吧看到的office2019的破解安装。</p><a id="more"></a><p>　　在这里得感谢破解吧。上面好多破解版软件。在此提醒大家，请用于个人学习，勿用于商业用途。</p><p>　　下面引用破解吧的教程：</p><p><div style="width:100%; height:950px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="850" height="800" src="/contentimg/18/Office-2019.pdf.html"></iframe></div></p><p>　　<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=781052&amp;tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">原文地址</a> </p><p>　　<a href="https://otp.landian.la/zh-cn/" target="_blank" rel="noopener">OTP地址</a> </p><p>　　<a href="/contentimg/18/Office-2019.pdf">pdf</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享破解吧看到的office2019的破解安装。&lt;/p&gt;
    
    </summary>
    
      <category term="软件破解包" scheme="http://yaojx.net/categories/%E8%BD%AF%E4%BB%B6%E7%A0%B4%E8%A7%A3%E5%8C%85/"/>
    
    
      <category term="office" scheme="http://yaojx.net/tags/office/"/>
    
      <category term="破解吧" scheme="http://yaojx.net/tags/%E7%A0%B4%E8%A7%A3%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title>github security alert 解决之路</title>
    <link href="http://yaojx.net/2018/10/19/17git-securityalert/"/>
    <id>http://yaojx.net/2018/10/19/17git-securityalert/</id>
    <published>2018-10-18T16:05:59.000Z</published>
    <updated>2018-10-19T06:12:54.316Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/contentimg/17/1.png" alt="Result pic 1" title="github security alert "></p><p>　　本文记录我遇到github的“security alert”时，怎么处理解决。</p><a id="more"></a><p>　　邮箱收到这个警告的时候蛮懵的，因为代码什么的没改过。最近做的操作，就是手动修改了“package.json”，以及删除“package-lock.json”文件和“node_modules”整个文件夹。后面重新安装，npm正常跑起来，博客也能正常更新，怎么就突然发警告了？</p><p>　　登陆git查看具体警告内容：</p><p><img src="/contentimg/17/2.png" alt="Result pic 2" title="具体警告内容"></p><p>　　原来是提示需要更新插件版本而已。</p><p>那就手动更新吧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update XXX</span><br></pre></td></tr></table></figure><p>　　不对，说好的添加文件的提示怎么没出来，直接就回车返回了？</p><p>　　那强制更新到某版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update XXX@1.2.3</span><br></pre></td></tr></table></figure><p>　　还是一样？那就只能用install了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install XXX@1.2.3</span><br></pre></td></tr></table></figure><p><img src="/contentimg/17/4.png" alt="Result pic 4" title="成功更新"></p><p>　　再次提交博客环境工程，这次git不报警告了。</p><p><img src="/contentimg/17/3.png" alt="Result pic 3" title="问题解决"></p><p>最后贴一下“package.json”和“package-lock.json”关系的几个链接吧：</p><p><a href="https://blog.csdn.net/m18633778874/article/details/81625421" target="_blank" rel="noopener">【前端】简单了解package.json与package-lock.json</a> </p><p><a href="https://www.cnblogs.com/cangqinglang/p/8336754.html" target="_blank" rel="noopener">package-lock.json的作用</a> </p><p>　　简单讲就是package.json负责安装我们需要的工具，package-lock.json着负责把那些工具需要的包记录安装起来。由于lock文件很大，东西很多，一般我们不会去看，所以这时候就会遇到一些依赖包版本过低的问题。</p><p><img src="/contentimg/17/5.png" alt="Result pic 5" title="依赖关系"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/contentimg/17/1.png&quot; alt=&quot;Result pic 1&quot; title=&quot;github security alert &quot;&gt;&lt;/p&gt;
&lt;p&gt;　　本文记录我遇到github的“security alert”时，怎么处理解决。&lt;/p&gt;
    
    </summary>
    
      <category term="github疑难杂症" scheme="http://yaojx.net/categories/github%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
      <category term="github" scheme="http://yaojx.net/tags/github/"/>
    
      <category term="security alert" scheme="http://yaojx.net/tags/security-alert/"/>
    
  </entry>
  
  <entry>
    <title>VMWare安装Linux系统和mac系统</title>
    <link href="http://yaojx.net/2018/10/19/16VM_macandlinux/"/>
    <id>http://yaojx.net/2018/10/19/16VM_macandlinux/</id>
    <published>2018-10-18T16:04:59.000Z</published>
    <updated>2018-10-19T08:42:20.403Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录如何在VM虚拟机中装Linux系统和Mac系统。全文截图解说，打开会比较慢。</p><a id="more"></a><p>　　开头贴一下下载链接吧，版本有点老了：</p><p><a href="https://pan.baidu.com/s/1a6BF-GQ2Uwd25h8dw1WWKw" target="_blank" rel="noopener">百度云盘</a>  提取码：y9y9</p><p>　　系统就不提供了，可以去msdn等等地方下载。</p><p>　　下面开始贴图说明安装过程：</p><h2 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h2><p><img src="/contentimg/16/1/1.png" alt="Result pic 1" title="使用unlock打补丁"></p><p><img src="/contentimg/16/1/2.png" alt="Result pic 1" title="VMWare出现mac的选项"></p><p><img src="/contentimg/16/1/3.png" alt="Result pic 1" title="开始安装"></p><p><img src="/contentimg/16/1/4.png" alt="Result pic 1" title="选择语言"></p><p><img src="/contentimg/16/1/5.png" alt="Result pic 1" title="安装初始化界面"></p><p>　　第一次装的时候，由于系统磁盘格式问题，会出问题：</p><p><img src="/contentimg/16/1/6.png" alt="Result pic 1" title="直接选择“重新安装os x”"></p><p><img src="/contentimg/16/1/7.png" alt="Result pic 1" title="没显示磁盘？？？"></p><p>　　所以得返回：（当然一开始就得先搞磁盘，再来安装才对）</p><p><img src="/contentimg/16/1/8.png" alt="Result pic 1" title="左上角退出安装"></p><p><img src="/contentimg/16/1/9.png" alt="Result pic 1" title="选择磁盘工具"><br>　　<br><img src="/contentimg/16/1/10.png" alt="Result pic 1" title="格式化磁盘"></p><p><img src="/contentimg/16/1/11.png" alt="Result pic 1" title="格式化后出现可识别磁盘"></p><p><img src="/contentimg/16/1/12.png" alt="Result pic 1" title="回到安装系统界面"></p><p><img src="/contentimg/16/1/13.png" alt="Result pic 1" title="选择刚才的磁盘开始安装"></p><p><img src="/contentimg/16/1/14.png" alt="Result pic 1" title="安装开始"></p><p><img src="/contentimg/16/1/15.png" alt="Result pic 1" title="完成"></p><p><img src="/contentimg/16/1/16.png" alt="Result pic 1" title="重启，选择语言"></p><p><img src="/contentimg/16/1/17.png" alt="Result pic 1" title="选择时区"></p><p>　　注意中国在右边。</p><p><img src="/contentimg/16/1/18.png" alt="Result pic 1" title="进入系统界面"></p><p><img src="/contentimg/16/1/19.png" alt="Result pic 1" title="安装VMtool"></p><p>　　右下角，把光驱引用的文件定位到打补丁时增加的darwin文件。具体在安装目录下能找到。</p><p><img src="/contentimg/16/1/20.png" alt="Result pic 1" title="重新连接光驱"></p><p><img src="/contentimg/16/1/21.png" alt="Result pic 1" title="选择安装位置"></p><p><img src="/contentimg/16/1/22.png" alt="Result pic 1" title="完成安装"></p><p><img src="/contentimg/16/1/23.png" alt="Result pic 1" title="重启"></p><p><img src="/contentimg/16/1/24.png" alt="Result pic 1" title="开始使用"></p><h2 id="CentOS安装"><a href="#CentOS安装" class="headerlink" title="CentOS安装"></a>CentOS安装</h2><p>　　Linux的安装比较无趣。步骤也简单</p><p><img src="/contentimg/16/2/1.png" alt="Result pic 1" title="VM选择系统"></p><p><img src="/contentimg/16/2/2.png" alt="Result pic 1" title="选择CentOS系统"></p><p><img src="/contentimg/16/2/3.png" alt="Result pic 1" title="开始安装"></p><p><img src="/contentimg/16/2/4.png" alt="Result pic 1" title="磁盘检查"></p><p><img src="/contentimg/16/2/5.png" alt="Result pic 1" title="选择语言"></p><p><img src="/contentimg/16/2/6.png" alt="Result pic 1" title="设置"></p><p>　　这里得选择安装位置，才能下一步。</p><p><img src="/contentimg/16/2/7.png" alt="Result pic 1" title="设置密码"></p><p><img src="/contentimg/16/2/8.png" alt="Result pic 1" title="设置账户"></p><p><img src="/contentimg/16/2/9.png" alt="Result pic 1" title="完成安装"></p><p><img src="/contentimg/16/2/10.png" alt="Result pic 1" title="开始使用"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录如何在VM虚拟机中装Linux系统和Mac系统。全文截图解说，打开会比较慢。&lt;/p&gt;
    
    </summary>
    
      <category term="虚拟机" scheme="http://yaojx.net/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="VMWare" scheme="http://yaojx.net/tags/VMWare/"/>
    
      <category term="Linux" scheme="http://yaojx.net/tags/Linux/"/>
    
      <category term="Mac" scheme="http://yaojx.net/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>可随身携带的windows系统</title>
    <link href="http://yaojx.net/2018/10/19/15SSDforwto/"/>
    <id>http://yaojx.net/2018/10/19/15SSDforwto/</id>
    <published>2018-10-18T16:03:59.000Z</published>
    <updated>2018-10-19T08:02:50.896Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录将SSD利用wto配置成可随身携带的系统。同时介绍一些SSD的知识。</p><a id="more"></a><p>　　开头贴一下百度百科。</p><p><a href="https://baike.baidu.com/item/Windows%20To%20Go/9911487?fr=aladdin" target="_blank" rel="noopener">Windows To Go</a></p><p>　　Windows To Go是Windows 8/8.1、Windows 10的一种企业功能，被内置于Windows 8企业版、Windows 8.1企业版、Windows 10企业版、教育版与专业版（1607以后）中。对于满足Windows 8硬件要求的电脑，Windows To Go可使Windows 8、Windows 8.1、Windows10从USB驱动器中启动并运行，不必考虑电脑上运行的操作系统（2012款之前的Mac和Windows RT不被支持）。</p><p>　　Windows To Go的设计并不旨在代替台式计算机、便携式计算机，或取代其他移动产品。恰恰相反，它为有效使用备用的工作场所方案资源提供有力支持。</p><hr><p>　　wto就是win8新版本开始提供的便携式系统，可以装在U盘上，然后随便找个主机插上去，就能登录这个系统进行使用。脱离了硬件上的捆绑。</p><p>　　个人建议最好弄成win10的，后面更新新版本那种。不过，按照我尝试后发现，首先得和你系统版本对应，并不是你去网上下载一个最新版就能使用的。我的win10是1703版本的，下载的包1803的就不能用，重启后进不了安装界面。</p><p>　　所以最好找你系统当时安装的那个包来做系统包。</p><p>　　启动wto的方式，在win菜单那里直接打“win”就会出来：</p><p><img src="/contentimg/15/1.png" alt="Result pic 1" title="启动wto"></p><p>　　当然也可以去控制面板找。</p><p><img src="/contentimg/15/2.png" alt="Result pic 2" title="wto界面"></p><p>　　下一步，选择iso。这里需要挂载一下iso，它才能识别到。不能直接定位到iso压缩包。</p><p><img src="/contentimg/15/3.png" alt="Result pic 3" title="wto搜索镜像"></p><p>　　安装过程很简单。这里不记录。重点是这个U盘安装了这个后，会隐藏起来，在现在使用的系统中就不会显式显示出来：</p><p><img src="/contentimg/15/4.png" alt="Result pic 4" title="U盘隐藏"></p><p>　　不过既然还是能识别到，就可以使用，直接右键给它分配一个盘符就可以使用了。利用这个特性，就可以跳过登陆验证，直接获取电脑上其他盘的文件了。</p><p>　　这个方式比用PE取消登陆密码要好。又不会破坏原系统的东西。适合用于电脑卡在更新界面无法登陆时，用U盘系统启动，然后分配给C盘盘符，进去把更新的文件删掉；然后回原系统启动，就不会更新了。具体步骤可以百度。以前是只能去F8安全模式弄，现在可以直接U盘启动弄了，容易很多。而且是和U盘速度挂钩的，如果用SSD，那就是秒开了，挂在那些老电脑上完全满分。</p><hr><p>　　下面介绍一下这个U盘的一些知识吧。我用的是SSD，所以特意查了下相关的东西。目前市面上，能达到直连效果的只有3.1的gen2。当然比较推荐圆头的那种typeC接口，就是手机上那种接口（注意，SSD还真能连在手机上用，驱动得起来）。</p><p>　　这里有个软件可以检测：</p><p><img src="/contentimg/15/5.png" alt="Result pic 5" title="U盘接口速度检测"></p><p><a href="https://www.aida64.com/" target="_blank" rel="noopener">aida</a> </p><p>　　注意这里电脑USB口的影响也有的，软件里面会提醒。当能达到3.1最高时，是能和直连那样达到几百兆的传输速度的。</p><p>　　这个软件，密钥搜一下很多，可以直接用。不用破解。</p><p>当然也有个检测磁盘评分的，不过觉得不太适合，那个是直连时检测4K对齐等等参数的：</p><p><img src="/contentimg/15/6.png" alt="Result pic 6" title="SSD速度检测"></p><p>　　对WTO还是蛮看好的。随身携带，电脑那么重，现在却只用带个U盘就行，省力很多。而且如果用的SSD，挂在老电脑上，完全就是脱胎换骨。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录将SSD利用wto配置成可随身携带的系统。同时介绍一些SSD的知识。&lt;/p&gt;
    
    </summary>
    
      <category term="windows系统妙用" scheme="http://yaojx.net/categories/windows%E7%B3%BB%E7%BB%9F%E5%A6%99%E7%94%A8/"/>
    
    
      <category term="wto" scheme="http://yaojx.net/tags/wto/"/>
    
      <category term="SSD" scheme="http://yaojx.net/tags/SSD/"/>
    
  </entry>
  
  <entry>
    <title>编写bat自动备份博客到codingpage</title>
    <link href="http://yaojx.net/2018/10/19/14batforcodingpage/"/>
    <id>http://yaojx.net/2018/10/19/14batforcodingpage/</id>
    <published>2018-10-18T16:02:59.000Z</published>
    <updated>2018-10-19T09:32:17.545Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录编写bat自动同步博客到codingpage。</p><a id="more"></a><p>　　由于gitpage在国内访问没codingpage快，我是把域名挂在codingpage的。但是博客和代码等等都在github那边，平时靠两边复制文件来同步，操作繁琐，便想到了用批处理来做这件事。</p><p>　　在github这边，用gitbash生成，提交好后，点击bat，将public目录下的同步到coding。需求是这样的。那怎么实现？</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>　　新建文件夹codingpage，将public的文件复制到那边，然后提交。这里有问题，需要先清空codingpage文件夹，然后才能复制。写了一下del的处理，发现好麻烦，考虑的东西太多了。</p><p>　　所以方案一放弃。</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>　　还是新建文件夹codingpage，但是是用来init git，让它出来一个.git后缀的文件夹：</p><p><img src="/contentimg/14/1.png" alt="Result pic 1" title="初始化git文件夹"></p><p>　　后面的操作就是把这个.git文件夹复制过去public目录，然后cd进public，git提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'use SSH command，will pull public to coding page'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> publicdir=D:\<span class="built_in">source</span>\blogcode\public\.git</span><br><span class="line"><span class="built_in">set</span> publicd=D:\<span class="built_in">source</span>\blogcode\public</span><br><span class="line"><span class="built_in">set</span> aimdir=D:\<span class="built_in">source</span>\yaojiaxinpc\.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> aimdir is %aimdir%</span><br><span class="line"><span class="built_in">echo</span> publicdir is %publicdir%</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> d|xcopy %aimdir%\* %publicdir% /s /c /y</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ***********************************************</span><br><span class="line"><span class="built_in">echo</span> ***********************************************</span><br><span class="line"><span class="built_in">echo</span> ***************start  to  commit***************</span><br><span class="line"><span class="built_in">echo</span> ***********************************************</span><br><span class="line"><span class="built_in">echo</span> ***********************************************</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /d %publicd%</span><br><span class="line"><span class="built_in">echo</span> gitdone</span><br><span class="line"></span><br><span class="line">del CNAME</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> git pull origin master</span><br><span class="line"><span class="built_in">echo</span> but this useless because it<span class="string">'s backups.so it won'</span>t <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"><span class="built_in">echo</span> add all file to git...</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> <span class="string">"year=%date:~0,4%"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"month=%date:~5,2%"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"day=%date:~8,2%"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"hour_ten=%time:~0,1%"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"hour_one=%time:~1,1%"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"minute=%time:~3,2%"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"second=%time:~6,2%"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"%hour_ten%"</span> == <span class="string">" "</span> (</span><br><span class="line">    <span class="built_in">set</span> cmitmessage=%year%%month%%day%0%hour_one%%minute%%second%</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">set</span> cmitmessage=%year%%month%%day%%hour_ten%%hour_one%%minute%%second%</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">"%cmitmessage%"</span></span><br><span class="line"><span class="built_in">echo</span> use time <span class="keyword">for</span> message, commiting... </span><br><span class="line"></span><br><span class="line">git push origin master -f</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> git push <span class="keyword">done</span>!</span><br><span class="line">pause&gt;nul</span><br></pre></td></tr></table></figure><p><a href="https://github.com/YaojiaxinPC/blogcode/blob/master/clonetocoding.bat" target="_blank" rel="noopener">对应git</a></p><p>　　该方案行得通，而且处理方式简单许多。下面记录一下过程中遇到的问题。</p><hr><p>　　按照脚本从上到下来记录吧。</p><p>　　首先是定义变量：</p><blockquote><p> set 变量</p></blockquote><p>　　引用</p><blockquote><p> %变量%</p></blockquote><p>　　然后是复制 xcopy，这里会遇到弹窗选择“文件”：“文件夹”的弹窗选择，所以手动加一下追加输入：</p><blockquote><p> d|XXXXX</p></blockquote><p>　　d是里面要输入的东西。</p><p>　　这样完成了将.git复制到public目录的工作了。得将运行目录定位到public目录。</p><blockquote><p> cd /d XXXX</p></blockquote><p>　　codingpage那边不需要CNAME文件，所以删掉它。</p><blockquote><p> del 文件</p></blockquote><p>　　剩下的是git操作。</p><p>　　先用cmd实验一下git操作：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure><p><img src="/contentimg/14/2.png" alt="Result pic 1" title="检查cmd下能否运行git"></p><p><img src="/contentimg/14/3.png" alt="Result pic 1" title="cmd下的git"></p><p>　　①添加命令：“.”表示全部</p><blockquote><p> git add .</p></blockquote><p>　　②同步命令：</p><blockquote><p> git pull origin master</p></blockquote><p>　　③提交命令：（后面还得推送才是完整的提交）</p><blockquote><p> git commit -m ‘注释’</p></blockquote><p>　　④推送命令：</p><blockquote><p>  git push origin master</p></blockquote><p>　　这里我用的是主线，可以根据需要进行修改。</p><p>　　那就简单了，直接复制过去批处理。</p><p>　　这里遇到的问题蛮多的：</p><ol><li>批处理里面不能写多余的空格，特别是路径和变量定义。因为会完整识别出来空格并运用，导致出问题。</li><li>git commit不加注释，就强制进入VIM模式。所以得加。</li><li>单引号 和 双引号 的区别，刚开始一直报错当前文件夹没有可提交的东西，排查到是commit出错，后面排查出来是引号问题。</li></ol><p>　　这里搜到一篇比较完整的git批处理：<a href="http://blog.51cto.com/13717297/2136859" target="_blank" rel="noopener">bat文件方式对git进行操作</a> </p><p>　　以及面对VIM模式：<a href="https://www.cnblogs.com/macliu/p/6062917.html" target="_blank" rel="noopener">在git bush中如何退出vim编辑器</a> </p><p>还有运行该bat后，github desktop无法提交，提示：failed to receive handshake</p><p>　　其实只要注销重新登录就行的，不过我就去改配置文件，删掉用户信息，提交一遍，再加回去，就正常了。</p><p><img src="/contentimg/14/4.png" alt="Result pic 1" title="配置文件"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录编写bat自动同步博客到codingpage。&lt;/p&gt;
    
    </summary>
    
      <category term="批处理" scheme="http://yaojx.net/categories/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
    
      <category term="批处理" scheme="http://yaojx.net/tags/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
      <category term="git" scheme="http://yaojx.net/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>修改蜘蛛网悬浮于顶层</title>
    <link href="http://yaojx.net/2018/10/19/13jsclickpass/"/>
    <id>http://yaojx.net/2018/10/19/13jsclickpass/</id>
    <published>2018-10-18T16:01:59.000Z</published>
    <updated>2018-10-18T09:01:38.675Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录我如何修改当前主题NexT中引用的canvas-nest的一些细节。</p><a id="more"></a><p>　　默认NexT主题，蜘蛛网是跟随鼠标运动的，但是我感觉那样不好玩，如果静置的话，会变成一个圈，不好看。然后我浏览了一下整个目录结构，找到</p><p><img src="/contentimg/13/1.png" alt="Result pic 1" title="引用目录结构"></p><p>　　看到有<a href="https://github.com/hustcc/canvas-nest.js" target="_blank" rel="noopener">canvas-nest</a> 还有<a href="http://fancybox.net/" target="_blank" rel="noopener">fancybox</a>  。</p><p>　　canvas-nest：蜘蛛网的实现js代码。</p><p>　　fancybox：淡入淡出功能模块。</p><p>　　于是我就想到把蜘蛛网的鼠标部分代码去掉。引入fancybox的淡入淡出动画，点击的时候出现“赞”的图标。</p><p>　　“赞”部分的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(document).bind(&quot;click&quot;,function(e)&#123;var $i = $(&quot;&lt;a style=&apos;border:none;border-bottom:0px&apos;&gt;&quot;).prepend(&quot;&lt;img src=&apos;/images/redhand.png&apos;/&gt;&quot;);var x=e.pageX,y=e.pageY;$i.css(&#123;&quot;z-index&quot;:99999,  </span><br><span class="line"> &quot;top&quot;:y-15,&quot;left&quot;:x,&quot;position&quot;:&quot;absolute&quot;,&quot;color&quot;:&quot;red&quot;&#125;);$(&quot;body&quot;).append($i);$i.animate(&#123;&quot;top&quot;:y-180,&quot;opacity&quot;:0&#125;,1500,function()&#123;$i.remove();&#125;);e.stopPropagation();&#125;);</span><br></pre></td></tr></table></figure><p>　　然后又想到把蜘蛛网放到顶层</p><blockquote><p> zIndex=99</p></blockquote><p>　　结果发现这时候鼠标不能选中代码和文字进行复制了。推测是canvas层挡住了，所以得给它设置穿透：</p><blockquote><p> pointer-events:none;</p></blockquote><p><a href="http://www.css88.com/book/css/properties/user-interface/pointer-events.htm" target="_blank" rel="noopener">pointer-events</a></p><p><img src="/contentimg/13/2.png" alt="Result pic 2" title="pointer-events"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录我如何修改当前主题NexT中引用的canvas-nest的一些细节。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yaojx.net/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yaojx.net/tags/js/"/>
    
      <category term="canvas-nest" scheme="http://yaojx.net/tags/canvas-nest/"/>
    
  </entry>
  
  <entry>
    <title>Markdown内嵌html文件</title>
    <link href="http://yaojx.net/2018/10/18/12hottoaddhtml/"/>
    <id>http://yaojx.net/2018/10/18/12hottoaddhtml/</id>
    <published>2018-10-18T15:59:58.000Z</published>
    <updated>2018-10-18T07:34:33.160Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录如何在Markdown内嵌html文件，并设置hexo忽略编译该html。</p><a id="more"></a><p>　　前面一篇博客，我在页面里面嵌入了一个时钟html文件。</p><p>　　到底如何实现的呢？</p><p>　　刚开始，我是直接引用下面这样的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;div style=&quot;width:100%; height:350px;border:none;text-align:center&quot;&gt;</span><br><span class="line">&lt;iframe allowtransparency=&quot;yes&quot; frameborder=&quot;0&quot; width=&quot;300&quot; height=&quot;300&quot; src=&quot;/contentimg/11/click.html&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><img src="/contentimg/12/1.png" alt="Result pic 1" title="直接嵌入iframe"></p><p>　　Markdown可以插入外部html：利用iframe标签来实现。</p><p>　　实际上，这样还是不行，hexo会自动给该html添加框架的代码，导致实际的效果变成主页嵌套该html代码。</p><p><img src="/contentimg/12/2.png" alt="Result pic 2" title="主页嵌套html"></p><p>　　刚开始没头绪，后面对比文件大小。</p><p><img src="/contentimg/12/3.png" alt="Result pic 3" title="生成public文件比对"></p><p>　　打开看到是加入了框架的代码导致。所以这时候要解决的是怎样让hexo编译的时候忽略该文件不加入框架代码。</p><p>　　还好hexo也考虑到这个问题：</p><p><img src="/contentimg/12/4.png" alt="Result pic 4" title="属性skip_render"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">skip_render: </span><br><span class="line"> - contentimg/<span class="number">11</span>/click.html</span><br><span class="line"> - <span class="number">404</span>/<span class="number">404</span>.html</span><br><span class="line"> - README.md</span><br></pre></td></tr></table></figure><p>　　在这里添加需要忽略编译的文件或文件夹。包括README.md也能这样弄，就不用像我前面的优化博客中提到那样在gulp里面操作复制文件了。</p><p>　　文件夹的话是/*。注意设置完后，需要hexo clean，再hexo g。才能看到效果。不然直接hexo g，是不起效的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录如何在Markdown内嵌html文件，并设置hexo忽略编译该html。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yaojx.net/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yaojx.net/tags/js/"/>
    
      <category term="skip_render" scheme="http://yaojx.net/tags/skip-render/"/>
    
      <category term="Markdown内嵌html" scheme="http://yaojx.net/tags/Markdown%E5%86%85%E5%B5%8Chtml/"/>
    
  </entry>
  
  <entry>
    <title>Markdown内嵌前端代码实例--时钟挂件</title>
    <link href="http://yaojx.net/2018/10/18/11clock-js/"/>
    <id>http://yaojx.net/2018/10/18/11clock-js/</id>
    <published>2018-10-18T15:58:58.000Z</published>
    <updated>2018-10-18T07:38:05.225Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享一个时钟挂件实例。该部分代码是网上搜索复制来的，非本人版权，请勿用于商业用途。</p><a id="more"></a>  <p><div style="width:100%; height:350px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="300" height="300" src="/contentimg/11/click.html"></iframe></div></p><p>　　这里利用iframe引用外部html，同时设置</p><blockquote><p>allowtransparency=”yes” frameborder=”0”</p></blockquote><p>　　让iframe的背景透明，边框消失。</p><blockquote><p>div style=”width:100%; height:350px;border:none;text-align:center”</p></blockquote><p>　　但是此时的iframe是靠左上的。我想居中，就需要利用div来实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享一个时钟挂件实例。该部分代码是网上搜索复制来的，非本人版权，请勿用于商业用途。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yaojx.net/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="http://yaojx.net/tags/js/"/>
    
      <category term="时钟挂件" scheme="http://yaojx.net/tags/%E6%97%B6%E9%92%9F%E6%8C%82%E4%BB%B6/"/>
    
      <category term="Markdown内嵌前端代码" scheme="http://yaojx.net/tags/Markdown%E5%86%85%E5%B5%8C%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg-简单AES加解密记录</title>
    <link href="http://yaojx.net/2018/10/18/10ffmpeg-aes-1/"/>
    <id>http://yaojx.net/2018/10/18/10ffmpeg-aes-1/</id>
    <published>2018-10-18T15:57:58.000Z</published>
    <updated>2018-10-18T08:21:39.014Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录如何将浏览器中的视频缓存文件合并成一个mp4文件。该方式使用ffmpeg。视频片段为m3u8格式。</p><a id="more"></a><hr><p>　　视频分段缓存技术之中的一种格式m3u8，据说是苹果开发的。而这里由于有ffmpeg工具，运用起来很快捷，当然也可以自己写代码集成一个播放器。本文暂时只记录简单的运用ffmpeg工具加解密和播放。代码集成等后面有空再分享。</p><p>观摩这项技术时参考的几篇文章分享如下：</p><p><a href="https://blog.csdn.net/psh18513234633/article/details/79312607" target="_blank" rel="noopener">使用ffmpeg转码m3u8并播放</a></p><p><a href="https://blog.csdn.net/weiyuefei/article/details/70257616" target="_blank" rel="noopener">hls协议（最清晰的讲解）</a></p><p><a href="https://blog.csdn.net/newarow/article/details/82805672" target="_blank" rel="noopener">流媒体开发之–HLS–M3U8解析(2): HLS草案</a></p><p><a href="https://gist.github.com/larvata/95df619df7109d8b74d2b965a3266354#file-ffmpeg-cheatsheet-md" target="_blank" rel="noopener">ffmpeg Cheatsheet</a></p><p><a href="https://www.cnblogs.com/codeAB/p/9184266.html" target="_blank" rel="noopener">使用ffmpeg视频切片并加密</a></p><p><a href="https://blog.csdn.net/cnhome/article/details/73250495" target="_blank" rel="noopener">ffmpeg分解视频文件并加密</a></p><p><a href="https://blog.csdn.net/xuyankuanrong/article/details/77529468" target="_blank" rel="noopener">FFmpeg之ffplay命令使用</a></p><p>还有一些cmd操作：</p><p><a href="https://blog.csdn.net/xhhjin/article/details/7373524" target="_blank" rel="noopener">CMD批处理循环，太强大了</a></p><p><a href="http://www.360doc.com/content/14/0212/22/9849466_352039289.shtml" target="_blank" rel="noopener">copy /b 命令无缝合并多个文件</a></p><p>　　当然还有其他很多参考过的网页，但是都很散，有用信息不多，暂不分享那些网页。</p><p>　　这项技术运用在很多浏览器上，所以想找东西练手，还是蛮多的（某些想下载但是没提示下载的视频，实际上是放在缓存文件夹里面，然后本地加载拼起来的）。</p><p>这里我就简单分享一下如何自己用ffmepg对一个视频加密，以及解密该视频。</p><p>目前我接触到3种情况：</p><ol><li><p>未加密的视频，用PotPlayer可以直接打开观看；</p></li><li><p>有AES的key，没IV（其实就是使用了默认值），部分有两个m3u8；</p></li><li><p>有AES的key和IV，就是下面将要分享的操作。</p></li></ol><p>　　目前要使用的工具，首先必须要有<a href="https://www.ffmpeg.org/download.html" target="_blank" rel="noopener">ffmepg</a> ，下载成已经Build好的包，不然自己来生成比较麻烦，当然，有兴趣可以下载代码来看，是开源的。</p><p><img src="/contentimg/10/1.png" alt="Result pic 1" title="下载ffmpeg"> </p><p>　　生成key部分我使用了<a href="http://gnuwin32.sourceforge.net/packages/openssl.htm" target="_blank" rel="noopener">Openssl</a>  ，功能超级多，但是本文只用到简单的生成随机密码。好像是我下载不对，操作发现不支持hex，所以后面生成hex部分得写一下代码处理，当然也有网页生成，数据库生成，这里就不写明了。</p><p><img src="/contentimg/10/2.png" alt="Result pic 2" title="下载openssl"> </p><p>　　然后就是准备一个视频。我这次下载了这些东西：</p><p><img src="/contentimg/10/3.png" alt="Result pic 3" title="全部所需东西"> </p><p>　　接下来就开始动手：（实际不用Openssl也行，直接手动写几个编码当密码就行）</p><p><img src="/contentimg/10/4.png" alt="Result pic 4" title="缓存目录结构"></p><p>　　通过上面推荐的链接，大家应该知道是主要m3u8文件，然后附带的ts文件（可以不写后缀，就是些视频片段，可以在播放器中打开观看），key（会改变视频片段的编码，导致无法播放）。</p><p>　　这里的m3u8可以用播放器打开，正常是会报错的，因为视频片段被AES加密了编码模式，所以普通读取出来不是正常的头，就报错了。</p><p><img src="/contentimg/10/5.png" alt="Result pic 5" title="无法打开加密文件"></p><p>　　如果你遇到的m3u8没有加密，那这里是打开可以播放的。上面那些ts也是可以直接播放器打开的。</p><p>　　一般情况下，m3u8文件可能需要进行修改。就是当你操作的是手机端，把缓存搞在电脑上转码时（或者从C盘缓存目录拷贝出来时），里面的路径是不对的，里面记录的是绝对路径，需要修改。像下面图片，手机拷过来后是手机上的绝对路径，用记事本ctrl + H，该成电脑上的当前路径后就能用了（或者删掉变成相对路径）。</p><p><img src="/contentimg/10/6.png" alt="Result pic 6" title="修改路径"></p><p>现在从头开始做吧。</p><p>　　目前我们手上只有一个test.mp4，先介绍不加密的方式分段生成m3u8。</p><h2 id="无加密方式生成m3u8"><a href="#无加密方式生成m3u8" class="headerlink" title="无加密方式生成m3u8"></a>无加密方式生成m3u8</h2><p>　　新建一个文件夹来放置后面要生成的ts文件。</p><p>　　先用管理员身份运行cmd：</p><p>　　cd到ffmpeg.exe所在的地方（不过我推荐是cd到要生成文件的地方，然后ffmpeg.exe弄成全路径来执行，效率会高一些）。</p><p>　　例如我test.mp4在D:\aa\bb目录下：</p><p>　　这样我在cmd中输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg.exe -y -i D:\aa\bb\test.mp4 -hls_time <span class="number">6</span> -hls_playlist_type vod -hls_segment_filename "D:\aa\bb\file%d" D:\aa\bb\playlist.m3u8</span><br></pre></td></tr></table></figure><p>　　-hls_time  是每一段视频多长时间</p><p>　　-hls_segment_filename   分段生成在哪里，命名规则%d</p><p>　　以及结尾的m3u8输出路径</p><p><img src="/contentimg/10/7.png" alt="Result pic 7" title="处理无加密方式片段"></p><p>　　目录下已经生成分段文件+m3u8文件了，由于这里没有加密，所以分段文件可以用播放器直接打开。当然也可以直接打开m3u8文件。</p><p><img src="/contentimg/10/8.png" alt="Result pic 8" title="无加密playlist.m3u8"></p><p>这里插播一下ffplay的使用：</p><p><img src="/contentimg/10/9.png" alt="Result pic 9" title="使用ffplay播放视频"></p><p>　　指令中要注意的就是路径，从前面我们知道是m3u8中记录是用相对路径，所以需要把cmd移到该目录下，然后用ffplay的全路径 + -allowed_extensions ALL （就是允许全部后缀模式，否则没后缀的不让播放） +m3u8 + 回车</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">aa</span>\<span class="title">ffmpeg</span>-4.0.2-<span class="title">win64</span>-<span class="title">static</span>\<span class="title">bin</span>\<span class="title">ffplay.exe</span> -<span class="title">allowed_extensions</span> <span class="title">ALL</span> <span class="title">playlist.m3u8</span></span></span><br></pre></td></tr></table></figure><p>　　既然提到分段，那就有合并了。</p><p>　　由于这里没有使用加密，所以可以直接把全部ts文件合并成一个文件就行。</p><p>　　可以cmd直接合并，但是需要提前处理命名规则，因为cmd按字符比较的，01和1是两种不同的概念，这里可以写个循环处理改命名，然后再用cmd的copy /b * new.mp4。</p><p>　　cmd代码不好写。所以推荐还是用ffmpeg。</p><p>代码如下：合并并转码成mp4格式<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">aa</span>\<span class="title">ffmpeg</span>-4.0.2-<span class="title">win64</span>-<span class="title">static</span>\<span class="title">bin</span>\<span class="title">ffmpeg.exe</span> -<span class="title">allowed_extensions</span> <span class="title">ALL</span> -<span class="title">i</span> <span class="title">playlist.m3u8</span> -<span class="title">acodec</span> <span class="title">copy</span> -<span class="title">vcodec</span> <span class="title">copy</span> -<span class="title">f</span> <span class="title">mp4</span> <span class="title">output.mp4</span></span></span><br></pre></td></tr></table></figure></p><p><img src="/contentimg/10/10.png" alt="Result pic 10" title="合并并转码成mp4格式"></p><h2 id="加密方式生成m3u8"><a href="#加密方式生成m3u8" class="headerlink" title="加密方式生成m3u8"></a>加密方式生成m3u8</h2><p>　　有了前面那些截图，这里的操作其实就是多了写密码步骤而已，其他大部分一样，所以这里就不再截图了。</p><p>　　加密，目前我看的是AES。概念那些大家有空去了解一下，这里只分享一下怎么用。</p><p>具体步骤是：<a href="https://www.cnblogs.com/codeAB/p/9184266.html" target="_blank" rel="noopener">使用ffmpeg视频切片并加密</a>  </p><p>　　然后里面一些参数，其实在源文件里面已经有了，可以找这些文档来弄明白设置什么参数：</p><p><img src="/contentimg/10/11.png" alt="Result pic 11" title="源文件说明文档"></p><p>　　这里我多分享一下直接用一个key来加密怎么操作吧。就是手上有一个密码+一个视频，弄到最后是一个放密码的文本文件，然后就是ts+m3u8，没有IV。</p><p>　　其实就是前面步骤中，enc.keyinfo中第三行的IV删掉就行。</p><p>　　同时步骤一中用openssl生成key的，改成：新建文本文件，写入密码后保存，然后删掉后缀当key。</p><p>其他照旧：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">aa</span>\<span class="title">ffmpeg</span>-4.0.2-<span class="title">win64</span>-<span class="title">static</span>\<span class="title">bin</span>\<span class="title">ffmpeg.exe</span> -<span class="title">y</span> -<span class="title">i</span> <span class="title">test.mp4</span> -<span class="title">hls_time</span> 6 -<span class="title">hls_key_info_file</span> <span class="title">k0.keyinfo</span> -<span class="title">hls_playlist_type</span> <span class="title">vod</span> -<span class="title">hls_segment_filename</span> "<span class="title">file</span>%<span class="title">d</span>" <span class="title">playlist.m3u8</span></span></span><br></pre></td></tr></table></figure><p><img src="/contentimg/10/12.png" alt="Result pic 12" title="加密方式m3u8文件"></p><p>　　密码文件k0，用openssl生成的话，打开是乱码的，自己写入的就不会乱码，使用起来暂时未发现区别：</p><p><img src="/contentimg/10/13.png" alt="Result pic 13" title="密码文件"></p><p>　　加密方式生成的ts文件，你会发现无法用播放器打开，只能用ffplay打开（打开方式同无加密一样的代码，都是直接传入m3u8文件即可）。</p><p>　　这样解密方式，实际也和前面一样，都是围绕m3u8，是否有key，实际都是内部处理的。</p><p>这里可能会遇到问题的是，网上的都是说EXT-X-KEY这里的是http，实际都可以，找得到文件就行。然后就是开头提的两个m3u8的，这个就溜一点：</p><p>　　改EXT-X-KEY的文件地址为key的本地地址后，发现这样去转是失败的（提示找不到ts文件），这时可以把下面的一堆ts信息，换成另一个m3u8里面的ts信息，就可以转换了。我遇到的情况，是第一个ts信息是本地文件，第二个是一个找不到的路径的文件（但是这个带key，第一个不带），修改成本地文件后，除了#EXTINF的数字不同外，其他都一样（文件也能找到了），结果还是报错，就把那个m3u8的ts信息都复制过来（#EXTINF的数字保持一样），本个m3u8只保留EXT-X-KEY这里的URI=”k0”，其他都是用另一个m3u8的，就可以转换了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录如何将浏览器中的视频缓存文件合并成一个mp4文件。该方式使用ffmpeg。视频片段为m3u8格式。&lt;/p&gt;
    
    </summary>
    
      <category term="编程人生" scheme="http://yaojx.net/categories/%E7%BC%96%E7%A8%8B%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="视频处理" scheme="http://yaojx.net/tags/%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86/"/>
    
      <category term="工具使用" scheme="http://yaojx.net/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
      <category term="ffmpeg" scheme="http://yaojx.net/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客心得---配置主题Next</title>
    <link href="http://yaojx.net/2018/10/18/9howtoeditthemes/"/>
    <id>http://yaojx.net/2018/10/18/9howtoeditthemes/</id>
    <published>2018-10-18T15:55:58.000Z</published>
    <updated>2018-10-18T09:14:55.131Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文是记录如何修改配置Next，增加统计功能、评论区、RSS等模块。是在前面几篇文章的扩展记录。</p><a id="more"></a><p>　　<br><a href="http://theme-next.iissnan.com/getting-started.html#avatar-setting" target="_blank" rel="noopener">Next的使用说明</a></p><p>　　开头先贴官方配置说明。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文是记录如何修改配置Next，增加统计功能、评论区、RSS等模块。是在前面几篇文章的扩展记录。&lt;/p&gt;
    
    </summary>
    
      <category term="编程人生" scheme="http://yaojx.net/categories/%E7%BC%96%E7%A8%8B%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="js" scheme="http://yaojx.net/tags/js/"/>
    
      <category term="前端技术" scheme="http://yaojx.net/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/"/>
    
      <category term="个人博客" scheme="http://yaojx.net/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客心得---个人站点yaojx.net的优化之路</title>
    <link href="http://yaojx.net/2018/10/18/8SupGitPage/"/>
    <id>http://yaojx.net/2018/10/18/8SupGitPage/</id>
    <published>2018-10-18T14:55:58.000Z</published>
    <updated>2018-10-18T15:56:38.445Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文是记录配置域名转址，以及如何优化gitpage访问等等高级功能的文章。该系列有3篇：1.付费虚拟云主机+WordPress；2.免费github+Hexo；3.个人站点yaojx.net的优化之路。</p><a id="more"></a><p>　　整个优化非常坎坷，最后总结，才发现部署到coding就已经达到了优化中的99%。剩下这个1%，花了我99%的时间和精力。</p><p>　　本文不废话怎么排查，从什么地方入手。直接根据我优化中的体会来讲。</p><h2 id="一-转址"><a href="#一-转址" class="headerlink" title="一.转址"></a>一.转址</h2><h3 id="1-1-理解转址"><a href="#1-1-理解转址" class="headerlink" title="1.1 理解转址"></a>1.1 理解转址</h3><p><a href="https://www.2cto.com/net/201306/221200.html" target="_blank" rel="noopener">域名解析中A记录、CNAME、MX记录、NS记录的区别和联系</a></p><p><a href="http://winterttr.me/2015/10/23/from-dns-to-github-custom-domain/" target="_blank" rel="noopener">从DNS到github pages自定义域名 – 漫谈域名那些事</a></p><p>　　上面这两篇文章讲得很详细，介绍了DNS配置中几个选项间的关系。</p><p>　　转址的作用，就是当我在浏览器输入A的时候，浏览器自动帮我跳转到B网站（A方式），这里CNAME还添加了将B网站的前缀域名修改为A网站的效果（可配置，当没设置该项时就不会修改域名）。</p><p>　　一般情况下，我们只需要设置两个A方式（带www的，和不带www的），然后在page那边设置CNAME。</p><h3 id="1-2-GoDaddy转址"><a href="#1-2-GoDaddy转址" class="headerlink" title="1.2 GoDaddy转址"></a>1.2 GoDaddy转址</h3><p><img src="/contentimg/8/1.png" alt="Result pic 1" title="GoDaddy设置转址"></p><p>　　这里GoDaddy给我们设置了一个基础的转址，但是不是很好用(起作用慢)。推荐是去修改上面DNS管理。</p><p>　　这里我就不截图了，默认项可以保留，默认有几个A和几个CNAME。直接添加新选项，然后TTL设置为自定义“600”。其他默认项暂时没必要删除。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A       @     目标ip地址  //@ 相当于 yaojx.net</span><br><span class="line">A       www   目标ip地址  // 如果没这一项，网站就是www.yaojx.net了</span><br></pre></td></tr></table></figure><p>　　注意TTL设置600最小见效才快。不然得等好几个小时。</p><h3 id="1-3-dnspod转址（即现在的腾讯云服务）"><a href="#1-3-dnspod转址（即现在的腾讯云服务）" class="headerlink" title="1.3 dnspod转址（即现在的腾讯云服务）"></a>1.3 dnspod转址（即现在的腾讯云服务）</h3><p>　　这个不用记录了，直接有“一键”的。就是输入两个ip就行，默认“一键”后，给我们创造了两个A类型的，一个是“www”，另一个是“@”。</p><p>　　这里提一下怎么找gitpage和codingpage的ip：</p><p><img src="/contentimg/8/2.png" alt="Result pic 2" title="找page的ip"></p><p>　　直接ping网站，注意这里github的IP会左右变动。但是不影响我们使用A方式转址。图中ip没一致，但是仍然可以转址成功。</p><h3 id="1-4-GitHub相关配置"><a href="#1-4-GitHub相关配置" class="headerlink" title="1.4 GitHub相关配置"></a>1.4 GitHub相关配置</h3><p><a href="https://help.github.com/articles/troubleshooting-custom-domains/" target="_blank" rel="noopener">GitHub自定义域疑难解答</a></p><p>　　coding那个就不用说明了，和腾讯一样都是一键的。</p><p>　　GitHub这边要弄的东西不复杂，就添加一个文件<a href="https://github.com/YaojiaxinPC/YaojiaxinPC.github.io/blob/master/CNAME" target="_blank" rel="noopener">CNAME</a> ，注意没有后缀，五个字母都大写。里面放的是你要跳转的域名。</p><p>　　该文件一创建马上生效，你访问YaojiaxinPC.github.io就会跳到CNAME里面的域名yaojx.net然后又回来YaojiaxinPC.github.io，当然这时候前缀已经改为yaojx.net了。（这个过程可以在chrome中捕捉到，所以修改转址后，直接访问YaojiaxinPC.github.io反而耗时。）</p><p>　　这里遇到的坑是，刚开始使用GoDaddy，后面改cloudflare，因为都在国外，转址更新见效慢，域名那边没转址对YaojiaxinPC.github.io，导致跳过来gitpage后，是个404，访问YaojiaxinPC.github.io这边，又已经转址到yao.net–&gt;404，构不成一个环。卡了好久，等几个小时后，DNS同步到了后才见效。</p><p>　　coding那边就不用，一设置就见效。所以后面我域名都放到DNSPOD上了。</p><h2 id="二-优化工具"><a href="#二-优化工具" class="headerlink" title="二.优化工具"></a>二.优化工具</h2><h3 id="2-1-百度统计-分析优化内容"><a href="#2-1-百度统计-分析优化内容" class="headerlink" title="2.1 百度统计 分析优化内容"></a>2.1 <a href="https://tongji.baidu.com/web/welcome" target="_blank" rel="noopener">百度统计</a> 分析优化内容</h3><p><img src="/contentimg/8/3.png" alt="Result pic 3" title="百度统计情况-githubpage"></p><p><img src="/contentimg/8/4.png" alt="Result pic 4" title="百度统计情况-codingpage"></p><p>　　里面提到的合并js，以及Gzip压缩，都要改大量代码，所以这两项目前我还没去弄。只根据未优化前期提的建议，使用了后面提到的gulp压缩工具而已。同时前期还有提到头像文件太大等等其他建议（头像后面我改成170X170）。</p><h3 id="2-2-Chrome调试工具使用"><a href="#2-2-Chrome调试工具使用" class="headerlink" title="2.2 Chrome调试工具使用"></a>2.2 Chrome调试工具使用</h3><p><img src="/contentimg/8/5.png" alt="Result pic 5" title="Chrome调试工具"></p><p>　　未优化前期，用Chrome打开，一直提示加载过慢（5S以上），使用默认字体代替，同时提示是ttf文件下载太久。当时就把我引到优化字体的方向上，后面追查了好长时间，发现搞错了。重点在DNS解析和IP。当然，如果有用谷歌字体，这里会有问题的，谷歌被墙，所以在next主题中最好使用本地字体，搜索有提到用360库的，还有github上的ed链接等等那些，效果都一般，还是不使用这些字体好。</p><p><img src="/contentimg/8/6.png" alt="Result pic 6" title="取消使用谷歌字体"></p><p>还有其他一些统计工具，不过实际Chrome的调试工具就已经能完成那些统计了，就不推荐那些工具了。</p><h3 id="2-3-站长工具"><a href="#2-3-站长工具" class="headerlink" title="2.3 站长工具"></a>2.3 <a href="http://tool.chinaz.com/gzips/" target="_blank" rel="noopener">站长工具</a></h3><p><img src="/contentimg/8/7.png" alt="Result pic 7" title="codingpage自带优化"></p><p><img src="/contentimg/8/8.png" alt="Result pic 8" title="手动优化后的githubpage"></p><p>　　第二个图是更新了文章后截的图，大小上是大了一点点（其他东西都是和coding那边一样的），都是使用手动gulp优化后的Gzip压缩（文件只是体积变小，百度统计认的gzip是后缀为gz的压缩文件，意思不同）。但是在上面图中识别出来是不同：codingpage的直接压缩率99.96%？？？同时识别不出来gzip压缩。这样就能解释怎么放那边打开是秒开了。</p><h2 id="三-Gulp压缩"><a href="#三-Gulp压缩" class="headerlink" title="三.Gulp压缩"></a>三.Gulp压缩</h2><p>　　这个是重点，让整个包从15.7m压缩到11.7m。而且整个操作除了安装工具，写一个<a href="https://github.com/YaojiaxinPC/blogcode/blob/master/gulpfile.js" target="_blank" rel="noopener">js脚本</a> 外，不用修改工程中的任何东西和代码。不会对原工程造成影响！</p><p>　　<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm主页</a> </p><h3 id="3-1-安装gulp"><a href="#3-1-安装gulp" class="headerlink" title="3.1 安装gulp"></a>3.1 安装gulp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;name&gt; [-g] [--save-dev]</span><br></pre></td></tr></table></figure><ol><li>name：node插件名称。例：</li></ol><blockquote><p> npm install gulp –save-dev</p></blockquote><ol><li><p>-g：全局安装。将会安装在%homepath%\AppData\Roaming\npm，并且写入系统环境变量；</p><ul><li><p>非全局安装：将会安装在当前目录的node_modules文件夹下，只能在当前目录通过require()调用使用。</p></li><li><p>全局安装：可以通过命令行在任何地方调用它。</p></li></ul></li></ol><ol><li><p>–save：将保存配置信息至package.json（package.json是nodejs项目配置文件）。</p></li><li><p>-dev：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点。</p></li></ol><p>　　配置文件package.json记录了当前工程使用的相关包，只需要在有这个文件的文件夹下面执行“npm install”，就会根据package.json下载所有需要的包。</p><p><img src="/contentimg/8/9.png" alt="Result pic 9" title="package.json"></p><h3 id="3-2-编写gulp脚本"><a href="#3-2-编写gulp脚本" class="headerlink" title="3.2 编写gulp脚本"></a>3.2 编写gulp脚本</h3><p>　　<a href="https://github.com/YaojiaxinPC/blogcode/blob/master/gulpfile.js" target="_blank" rel="noopener">gulp脚本</a> </p><p>　　可以使用我github上的这个脚本。里面做的事情就是压缩html、css、js、图片等，在我电脑上，无法进行覆盖操作，所以我就把生成的压缩文件保存到缓存文件夹，然后用del/copy/mv等操作来处理。</p><p>　　注意hexo编译的时候，会把后缀为“md”的文件都转成html，所以README.md也会变成README.html。这样，就不能把它放在source里面，只能放外面，在gulp后再复制进去public中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line"><span class="keyword">var</span> mv = <span class="built_in">require</span>(<span class="string">'mv'</span>);</span><br><span class="line"><span class="keyword">var</span> copy = <span class="built_in">require</span>(<span class="string">'copy'</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">'gulp-htmlclean'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// Clean  任务执行前，先清除之前生成的缓存文件</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> del([<span class="string">'./public1/**'</span>], cb)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// move  任务执行完成后，从主目录复制文件过来缓存目录</span></span><br><span class="line"><span class="comment">//(此时会自动删除主目录),然后再复制回去（因为不能覆盖，所以不能从缓存目录直接过去主目录进行覆盖）</span></span><br><span class="line">gulp.task(<span class="string">'filedone'</span>,[<span class="string">'copy-all'</span>],()=&gt;&#123;gulp.start(<span class="string">'filedone-dealREADME'</span>);&#125;);</span><br><span class="line"><span class="comment">//将public下的文件复制到缓存文件夹下</span></span><br><span class="line">gulp.task(<span class="string">'copy-all'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> mv(<span class="string">'./public'</span>, <span class="string">'./public1'</span>,&#123;<span class="attr">clobber</span>: <span class="literal">false</span>&#125;, cb)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制README.md。处理完成后才进行重命名</span></span><br><span class="line">gulp.task(<span class="string">'filedone-dealREADME'</span>,[<span class="string">'copy-readme'</span>],()=&gt;&#123;gulp.start(<span class="string">'backcopy'</span>);&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//复制README.md</span></span><br><span class="line">gulp.task(<span class="string">'copy-readme'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> copy(<span class="string">'README.md'</span>, <span class="string">'./public1'</span>, cb);</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'backcopy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> mv(<span class="string">'./public1'</span>, <span class="string">'./public'</span>,&#123;<span class="attr">clobber</span>: <span class="literal">false</span>&#125;, cb)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: <span class="literal">true</span>,</span><br><span class="line">            minifyJS: <span class="literal">true</span>,</span><br><span class="line">            minifyCSS: <span class="literal">true</span>,</span><br><span class="line">            minifyURLs: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public1'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss(&#123;</span><br><span class="line">            compatibility: <span class="string">'ie8'</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public1'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public1'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩主题图片</span></span><br><span class="line">gulp.task(<span class="string">'minify-images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/images/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin(</span><br><span class="line">        [imagemin.gifsicle(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">3</span>&#125;), </span><br><span class="line">        imagemin.jpegtran(&#123;<span class="string">'progressive'</span>: <span class="literal">true</span>&#125;), </span><br><span class="line">        imagemin.optipng(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">7</span>&#125;), </span><br><span class="line">        imagemin.svgo()],</span><br><span class="line">        &#123;<span class="string">'verbose'</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public1/images'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩文章图片</span></span><br><span class="line">gulp.task(<span class="string">'minify-contentimg'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/contentimg/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin(</span><br><span class="line">        [imagemin.gifsicle(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">3</span>&#125;), </span><br><span class="line">        imagemin.jpegtran(&#123;<span class="string">'progressive'</span>: <span class="literal">true</span>&#125;), </span><br><span class="line">        imagemin.optipng(&#123;<span class="string">'optimizationLevel'</span>: <span class="number">7</span>&#125;), </span><br><span class="line">        imagemin.svgo()],</span><br><span class="line">        &#123;<span class="string">'verbose'</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public1/contentimg'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//压缩字体文件（实际没看出效果）</span></span><br><span class="line">gulp.task(<span class="string">'fontttf'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./public/lib/font-awesome/fonts/*.*'</span>)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./public1/lib/font-awesome/fonts'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//build完后复制文件回去</span></span><br><span class="line">gulp.task(<span class="string">'build'</span>, [<span class="string">'minify-html'</span>,<span class="string">'minify-css'</span>,<span class="string">'minify-js'</span>,<span class="string">'minify-images'</span>,<span class="string">'minify-contentimg'</span>,<span class="string">'fontttf'</span>],()=&gt;&#123;gulp.start(<span class="string">'filedone'</span>);&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行清理任务后才build</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'clean'</span>],()=&gt;&#123;gulp.start(<span class="string">'build'</span>);&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-3-当下载不了工具怎么办"><a href="#3-3-当下载不了工具怎么办" class="headerlink" title="3.3 当下载不了工具怎么办"></a>3.3 当下载不了工具怎么办</h3><p>　　npm是一个前端自动化工具。有中文官网，但是网络很不好，同时我们在gitbash里面操作下载，也经常因为网络问题下载不了。</p><p>　　后面排查分析，了解到gitbash里面的install操作，实际上是去github上找最新版本down下来。所以如果遇到安装的时候报联网失败，是可以分析找到github上对应的包，直接下载来安装的（npm的服务器ping经常断流，不是墙的问题）。</p><p>　　在install失败的时候，会提示“XXX网站”连接失败，这时候把这个网站复制到百度云离线下载，是能下载下来的：</p><p><img src="/contentimg/8/10.png" alt="Result pic 10" title="下载copy失败时扒的html"></p><p>　　打开后找version，拉到最下面，找到最新的一个版本后，找下载链接tarball。然后用百度云离线再下载下来。放到D盘根目录：</p><blockquote><p>  npm install d:/XXX.tgz</p></blockquote><p><img src="/contentimg/8/11.png" alt="Result pic 11" title="下载copy失败时扒的tarball"></p><p>　　如果还不行，就直接手动解压，放到node_modules目录吧。</p><p>　　这里贴几个npm的介绍博客链接吧：</p><p><a href="https://www.cnblogs.com/QRL909109/p/5620824.html" target="_blank" rel="noopener">前端自动化gulp遇上es6从 无知到深爱</a> </p><p><a href="https://www.cnblogs.com/strick/p/5151714.html" target="_blank" rel="noopener">前端自动化构建工具gulp记录</a> </p><p><a href="http://www.ruanyifeng.com/blog/2016/01/npm-install.html" target="_blank" rel="noopener">npm 模块安装机制简介</a> </p><p>　　另外，在github下载别人的博客代码后，可以通过cmd cd到目录下，直接npm install就行，会默认自己找package.json来安装。注意看一下里面的结构，联网下载的是有前缀^，本地文件的是相对路径。</p><p>　　package-lock.json影响不大，可以删除。当安装package.json时，会重新生成。</p><p><img src="/contentimg/8/12.png" alt="Result pic 12" title="package.json"></p><h2 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h2><p>　　划重点，其实如果你部署在codingpage上，本篇文章就不用看了。因为都是秒开的。</p><p>　　部署在github上，逼格虽然高了些，但由于服务器在国外，而且没自带加速，优化之路很麻烦：压缩+CDN加速。</p><p>　　而压缩，其实就是牺牲cpu解压换来的。目前使用gulp进行初步压缩。复杂的可以直接压缩成gz文件来处理。</p><p>　　在我认为，js文件压缩就没必要了，合并js文件还可以，压缩就没必要。图片方面是主要优化对象，而这里，其实还有个<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a> 七牛在国内，访问比github快。而且每月有10g的免费额度。</p><p>　　注意，这里page的优化，DNS解析权重最大，所以上面提到的合并js，其实就是避免来回的dns解析请求。而IP，github服务器在国外，访问相对国内的coding会慢好多。</p><p>　　由于整个page是静态文件，所以好多技术性上的优化（缓存），权重是很小的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文是记录配置域名转址，以及如何优化gitpage访问等等高级功能的文章。该系列有3篇：1.付费虚拟云主机+WordPress；2.免费github+Hexo；3.个人站点yaojx.net的优化之路。&lt;/p&gt;
    
    </summary>
    
      <category term="编程人生" scheme="http://yaojx.net/categories/%E7%BC%96%E7%A8%8B%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="个人博客" scheme="http://yaojx.net/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="域名" scheme="http://yaojx.net/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客心得---github+Hexo</title>
    <link href="http://yaojx.net/2018/10/16/7CreatGitPage/"/>
    <id>http://yaojx.net/2018/10/16/7CreatGitPage/</id>
    <published>2018-10-16T15:55:58.000Z</published>
    <updated>2018-10-18T02:04:29.682Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文是记录如何安装环境，发布初版个人GitPage网页。该系列有3篇：1.付费虚拟云主机+WordPress；2.免费github+Hexo；3.个人站点yaojx.net的优化之路。</p><a id="more"></a><p>　　这个比较好玩，逼格高好多，网速也快了好多。是利用GitHub的<a href="https://pages.github.com/" target="_blank" rel="noopener">GitPage</a>  技术，把自己通过Hexo工具编译出来的静态html文件放在帐号共享项目中，就能让别人通过“用户名.github.io”固定连接来访问你的这些html网页。后面加上DNS转址功能把那串固定连接隐藏掉，基本别人就看不出来你这个网站是主机承载还是gitpage了。</p><h2 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="一.环境准备"></a>一.环境准备</h2><p>　　首先当然是：注册<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>  帐号，当然，国内的<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a> 也行，就是<a href="https://coding.net/help/doc/coding-service/coding-pages-introduction.html" target="_blank" rel="noopener">Coding Pages</a> 。最终我采用的方案是布到GitHub，同时备份一份到Coding，国内访问就用Coding，ping只有50，秒开。GitHub优化到最后，DNS解析始终突破不了，因为它的服务器是在国外。 </p><h3 id="1-1-安装Node-js"><a href="#1-1-安装Node-js" class="headerlink" title="1.1 安装Node.js"></a>1.1 安装Node.js</h3><p>　　<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Nodejs官网</a></p><p>　　<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Nodejs下载</a></p><p>　　<a href="https://segmentfault.com/a/1190000004947261" target="_blank" rel="noopener">Nodejs安装教程</a></p><p><img src="/contentimg/7/1.png" alt="Result pic 1" title="Node安装检验"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h3 id="1-2-安装Git"><a href="#1-2-安装Git" class="headerlink" title="1.2 安装Git"></a>1.2 安装Git</h3><p>　　<a href="https://git-scm.com/download/" target="_blank" rel="noopener">Git下载</a></p><p>　　安装完成git后，在桌面创建一个快捷方式，这时候点击启动后，里面的路径会是C盘下的。为了使用方便，我们是希望它直接cd到博客所在的目录，可以按照下面这样改：删除“–cd-to-home”、“%HOMEDRIVE%%HOMEPATH%”；添加博客目录到“起始位置”。</p><p><img src="/contentimg/7/2.png" alt="Result pic 2" title="Git小窍门"></p><p>　　检验安装情况：</p><p><img src="/contentimg/7/3.png" alt="Result pic 3" title="npm版本检查"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>　　我当时遇到“bash: npm: command not found”。后面搜索到是没安装好，只能在cmd下使用，需要在gitbash里面再装。</p><p>　　需要输入命令“ git clone –recursive git://github.com/isaacs/npm.git”，然后再输入“cd npm”，“node cli.js install npm -gf”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive git://github.com/isaacs/npm.git</span><br><span class="line"><span class="built_in">cd</span> npm</span><br><span class="line">node cli.js install npm -gf</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/daocaoren92wq/article/details/64444532" target="_blank" rel="noopener">windows git bash npm: command not found</a></p><h3 id="1-3-安装Hexo"><a href="#1-3-安装Hexo" class="headerlink" title="1.3 安装Hexo"></a>1.3 安装Hexo</h3><p>　　先选个文件夹作为博客文件存储。这里我选“D:\source\yaojiaxinpc”。</p><p>　　打开gitbash，cd到这个目录。安装hexo：输入指令“npm install hexo-cli -g ”。</p><p>　　等它下载安装好后，输入指令“hexo init”。当然后面可以加文件夹的名字。不加就默认装在当前目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//安装hexo</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">//查看hexo版本</span><br><span class="line">hexo -v</span><br><span class="line"></span><br><span class="line">//初始化hexo</span><br><span class="line">hexo init</span><br><span class="line">//会下载文件到当前目录，生成node_modules等文件夹</span><br></pre></td></tr></table></figure><p><img src="/contentimg/7/6.png" alt="Result pic 6" title="hexo安装"></p><p><img src="/contentimg/7/4.png" alt="Result pic 4" title="npm工具保存目录"></p><p>　　后期文件夹中的“node_modules”目录，都是从这里的cmd运行编译过去的。</p><h2 id="二-初次建站"><a href="#二-初次建站" class="headerlink" title="二.初次建站"></a>二.初次建站</h2><h3 id="2-1-Hexo建站"><a href="#2-1-Hexo建站" class="headerlink" title="2.1 Hexo建站"></a>2.1 Hexo建站</h3><p>　　这里贴一下<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm主页</a> 。上面好东西蛮多，工具类等等。</p><p>　　说明文档：<a href="https://docs.npmjs.com/getting-started/what-is-npm" target="_blank" rel="noopener">What is npm?</a></p><p><img src="/contentimg/7/7.png" alt="Result pic 7" title="初始化完成hexo"></p><p>　　站址文件生成指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g  //hexo generate</span><br></pre></td></tr></table></figure><p><img src="/contentimg/7/8.png" alt="Result pic 8" title="生成Public文件夹"></p><p>　　这时候目录下会多出来一个Public文件夹。里面的东西就是我们需要的网站文件，到时发布到网上的也是这里的东西（不是整个工程，就Public目录下的文件直接上传就行，不然会报错。）</p><p><img src="/contentimg/7/5.png" alt="Result pic 5" title="上传整个工程导致的错误"></p><p><img src="/contentimg/7/10.png" alt="Result pic 10" title="快捷方式出权限问题"></p><p>　　<strong><em>这里我也遇到“hexo Permission denied”的问题，是权限问题，但是由于是运行在windows系统，不是sudo，也不是unsafe和SSH密钥问题。最后解决的方法是：打开gitbash的源文件，cd到新目录重新上面部署的步骤，运行完，快捷方式那个就正常了</em></strong></p><h3 id="2-2-本地站址访问"><a href="#2-2-本地站址访问" class="headerlink" title="2.2 本地站址访问"></a>2.2 本地站址访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s  //hexo server</span><br></pre></td></tr></table></figure><p><img src="/contentimg/7/9.png" alt="Result pic 9" title="本地启动html服务"></p><h3 id="2-3-目录结构说明"><a href="#2-3-目录结构说明" class="headerlink" title="2.3 目录结构说明"></a>2.3 目录结构说明</h3><p><img src="/contentimg/7/11.png" alt="Result pic 11" title="主目录下文件"></p><p>　　第一个“node_modules”，都是工具里面的东西，不用关注，当作编译工具看待吧，就是根据“package.json”里面记录的要安装的工具，安装到这个目录底下。</p><p>　　重点关注的是“_config.yml”文件，然后就是“themes”，主题目录，接着是“source”：放博文和图片等等其他东西的地方。</p><p>　　“public”是生成html等最终产物的地方，到时提交这个目录里面的东西上去就行，推荐用GitHub DeskTop，或者SVN提交。厉害的也可以用gitbash。</p><p>　　“scaffolds”目录，就一些模版而已。可以在gitbash里面打：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new pagename</span><br></pre></td></tr></table></figure><p><img src="/contentimg/7/12.png" alt="Result pic 12" title="指令生成页面md文件"></p><h2 id="三-发布Page"><a href="#三-发布Page" class="headerlink" title="三.发布Page"></a>三.发布Page</h2><h3 id="3-1-1-GitHub准备"><a href="#3-1-1-GitHub准备" class="headerlink" title="3.1.1 GitHub准备"></a>3.1.1 GitHub准备</h3><p>　　这里可以弄SSH密钥后，设置成gitbash来直接“hexo d”就上传public文件目录。也可以手动拖文件到GitHub DeskTop里上传。而拉到网页上的话，github是支持的，但是coding不支持多文件。</p><p>　　下面记录SSH key方式，因为这种方式可以直接gitbash界面操作，可以在执行完“hexo g”后直接“hexo d -m ‘comment message’”就部署上去，很方便。</p><p>　　登陆github个人主页，个人头像下拉–&gt;Settings–&gt;SSH and GPG keys–&gt;New SSH key</p><p><img src="/contentimg/7/13.png" alt="Result pic 13" title="New SSH Key"></p><p>　　然后回到电脑上，生成key文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"git邮箱"</span></span><br></pre></td></tr></table></figure><p>　　连续3次回车就行，就会生成key文件。在系统当前用户目录下(开启查看隐藏文件) %homepath%.ssh</p><p><img src="/contentimg/7/14.png" alt="Result pic 14" title="key文件"></p><p>　　将id_rsa.pub文件以文本方式打开。打开之后全部复制到key中。</p><p>　　然后就可以回gitbash测试情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">yes</span><br></pre></td></tr></table></figure><p><img src="/contentimg/7/15.png" alt="Result pic 15" title="检查连接"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"git用户名"</span></span><br><span class="line">git config --global user.email <span class="string">"git邮箱"</span></span><br></pre></td></tr></table></figure><p>　　还没结束，还需要到“_config.yml”文件进行对应的配置：</p><p><img src="/contentimg/7/16.png" alt="Result pic 16" title="配置提交目录和分支"></p><p>　　记住，这里使用的是SSH，所以repository也应该用SSH目录下的。</p><p><img src="/contentimg/7/17.png" alt="Result pic 17" title="repository地址"></p><p>　　在github desktop中，这里才是用https下的地址。两个使用的是不同的协议的。</p><p>　　同时注意是主线master。</p><h3 id="3-1-2-GitPage访问"><a href="#3-1-2-GitPage访问" class="headerlink" title="3.1.2 GitPage访问"></a>3.1.2 GitPage访问</h3><p>　　到浏览器中输入YaojiaxinPC.github.io (用户名.github.io)。就可以看了。</p><p>这里也记录一下gitpage的一些细节吧。</p><p><img src="/contentimg/7/18.png" alt="Result pic 18" title="创建代码库"></p><p>　　刚注册好后，点击头像左边的“+”，新建目录“New repository”。根据gitpage推荐，是“用户名”+github.io，当然也可以起其他名字，只是起其他名字的话，就变成三级域名了，前缀会自动给你加“用户名.github.io”，后面的才是“/”+你这里起的名字。</p><p><img src="/contentimg/7/19.png" alt="Result pic 19" title="page设置选项"></p><p>　　在这个页面往下拉，到图中这里，就是设置你的page是关联哪个代码库的，所以是可以更改的。第一次弄的时候，可以到这里选Theme，然后根据步骤自动生成一个页面来试试看效果。</p><p>　　再往下的，就是删库功能项了。<br>　　<br>　　剩下的，就是一点点修改，本地看效果后，更新上来看外网效果了。</p><h3 id="3-2-1-Coding准备"><a href="#3-2-1-Coding准备" class="headerlink" title="3.2.1 Coding准备"></a>3.2.1 Coding准备</h3><p>　　这里也讲讲国内的coding吧。</p><p>　　和github差距还是蛮大的，不过好在国内访问快。现在和TX联手了，收费项目也变多了。商业用途用它还不错，但是个人非盈利的就不好说了。不过还是多多支持国产吧。这里还是得感谢coding的，gitpage那边，整优化搞了两三天，都不理想，访问最快2s起步（还是半夜3、4点的才能达到这个效果），后面还是挂到coding这边，就能秒开了。<br>　　<br><img src="/contentimg/7/20.png" alt="Result pic 20" title="coding开启page"></p><h3 id="3-2-2-Coding-Pages访问"><a href="#3-2-2-Coding-Pages访问" class="headerlink" title="3.2.2 Coding Pages访问"></a>3.2.2 Coding Pages访问</h3><p>　　coding做得比gitpage好的地方还是有的，在dns转址上，极其方便，还加了https访问。这点得给个赞。</p><p><img src="/contentimg/7/21.png" alt="Result pic 21" title="coding设置page"></p><p>　　这里的设置和gitpage的是一样的，不过更好操作一些。而且还没项目名字限制，想起什么名字都行。</p><h2 id="四-Hexo更换Themes"><a href="#四-Hexo更换Themes" class="headerlink" title="四.Hexo更换Themes"></a>四.Hexo更换Themes</h2><p>　　到这里，其实已经可以自己做博客放上去了。不过，作为一个非前端人员，而我又觉得初始版面不好看，怎么处理？幸好hexo早考虑到这个，给了好多皮肤让我们换。</p><p>　　<a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="noopener">Hexo主题官网</a></p><h3 id="更换Next主题"><a href="#更换Next主题" class="headerlink" title="更换Next主题"></a>更换Next主题</h3><p>　　我比较喜欢头像挂左边的，加上搜索教程的时候，都是推荐<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a> 的。所以一开始是用的这个主题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean //删除public目录（建议每次生成都要执行该删除指令，防止冲突）</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>　　这里的操作，其实就是去github上拷贝一个皮肤下来，放到目录“themes/yilia”。所以其实你也可以手动去网页上下载zip，然后解压到themes目录下就行。</p><p>　　下载好themes后，修改主配置文件：</p><p><img src="/contentimg/7/22.png" alt="Result pic 22" title="修改主配置文件应用新皮肤"></p><p>　　该部分另外开一个文章详细说明。</p><p>　　结尾贴一下几篇Markdown的介绍网址吧。</p><p>　　当然还有个中文前面隔开两个空格的小窍门：英文输入法下，切全角，然后两下空格。</p><p><a href="https://www.zybuluo.com/mdeditor#fnref:code" target="_blank" rel="noopener">Cmd Markdown 编辑阅读器</a></p><p><a href="http://mahua.jser.me/" target="_blank" rel="noopener">MaHua 在线markdown编辑器</a></p><p><a href="https://wizardforcel.gitbooks.io/markdown-simple-world/2.html" target="_blank" rel="noopener">Markdown 基本语法</a></p><p><a href="https://segmentfault.com/a/1190000010223222" target="_blank" rel="noopener">Markdown 语法整理大集合2017</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文是记录如何安装环境，发布初版个人GitPage网页。该系列有3篇：1.付费虚拟云主机+WordPress；2.免费github+Hexo；3.个人站点yaojx.net的优化之路。&lt;/p&gt;
    
    </summary>
    
      <category term="编程人生" scheme="http://yaojx.net/categories/%E7%BC%96%E7%A8%8B%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="个人博客" scheme="http://yaojx.net/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客心得---godaddy+WordPress</title>
    <link href="http://yaojx.net/2018/10/16/6CreatWordPress/"/>
    <id>http://yaojx.net/2018/10/16/6CreatWordPress/</id>
    <published>2018-10-16T14:55:58.000Z</published>
    <updated>2018-10-18T01:59:01.921Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文是记录如何搭建个人博客系列的第一篇。该系列有3篇：1.付费虚拟云主机+WordPress；2.免费github+Hexo；3.个人站点yaojx.net的优化之路。</p><a id="more"></a><p>　　搭建个人博客的第一篇，理应分析一下为什么要弄这件事。</p><p>　　作为一个CS开发人员，现在转型手游/端游开发，和网站开发还是没挂钩，怎么会想到做一个网站？其实，不应该是前端开发人员才做网站，谁都可以做，只是使用的工具不同而已：从事网站开发的，一般都是自己搭整套系统来显示自己的实力；非网页开发的程序员，靠搜索+工具，也是能搭出来一个网站的；再特殊点，非技术人员，花点钱，想弄怎样的网站就能弄怎样的网站。这样实现过程并不是重点，重点是为什么要做网站？</p><p>　　写代码有好几年了，但是，现在回头发现什么都没留下。为什么会这样？因为平时，虽然经常逛技术论坛和技术博客，但是也是看过后，觉得好的，就收藏网址，几年下来还真保存了几兆的网站链接，下载了不少工程。但是收藏得越多，去回顾的动力就越弱，如果加上这个技术点使用得少，时间一久就会模糊的，导致后面遇到，头脑有个印象，但是就是想不起来。特别是在一次硬盘出问题后就没后文了。</p><p>　　后面接触了GitHub，明白了一个道理：技术无国界，技术需要让人知道。技术应该是分享出来让更多人了解的，大家一起探讨，才能优化改善。GitHub的开源，实际上是他们分享给我们，他们是怎么做到这样的。如果有人能看得懂，并且加入优化改善，一方面对开源方是利好，另一方面，对贡献方，是磨练，也是一种承认，承认你的技术，你对该系统的贡献。久而久之，大家都会一起进步，同时带动更大的群体，发展到现在科技圈的繁荣，越来越多高新技术人才出现。</p><p>　　而如果我还是像之前那样，学到一点东西就悄悄保存在自己的硬盘上，有什么用？这就和你到github上下载东西，用到自己的工程中，却把水印去掉，甚至偷偷改了变量名一样。这并不是你学到东西的体现，只是你会运用的表现。这样并不能进步，永远只能偷偷跟在别人后面。</p><p>　　真正学到东西，是你摸清楚整个流程，然后能用自己的话讲出来。所以这个时候弄一个分享记录平台就有好处了。你学了这个东西，分析记录到平台上，别人看到后，会进行点评，指正里面的错误，或者和你一起讨论。这样才是真正的技术精髓。</p><p>　　所以我就建了这个个人博客了。</p><p>　　整个流程蛮折腾的，也花了点钱，不过好在体验过，学到了东西，也值了。</p><p>　　这里建个人博客，有不花钱的：博客园、CSDN等等，甚至微博、FaceBook都可以。如果想逼格高点，就得注册个人域名了。</p><p>　　我这里用了<a href="https://sg.godaddy.com/zh" target="_blank" rel="noopener">GoDaddy</a>  注册域名，现在GoDaddy和中国合作了，网站也有中文版，但是由于是国外的，国内访问速度一般般，好处就是不用备案。在阿里腾讯那些注册，得备案，然后要花300+大洋去买主机，不然不给办。不过如果有学生优惠，还是可以在国内弄的。</p><p>　　这里贴一下我当时参考的<a href="http://cio.idcquan.com/22161.shtml" target="_blank" rel="noopener">链接</a> 吧。注意“免费的东西才是最贵的”这个道理。</p><p>　　当时我遇到活动价，基础Linux虚拟主机，1＄/m，然后买一年送一个域名，相当于12x7=84￥=一年期限的“域名”+“博客主机”。当然这里的“博客主机”，可定制性不是很高，没有给Linux的root权限，所以不能自己搭整个网页程序放上去，只能用自带现成的程序。而这个现成程序，就是WordPress。可定制性不高，虽然可以自己改文件，然后更新到主机，但是由于网速问题，我还是放弃了这个念头。</p><p>下面记录一下怎么弄：</p><p><img src="/contentimg/6/1.png" alt="Result pic 1" title="基础虚拟主机情况"></p><p>　　买了虚拟主机送域名后，登陆帐号，进到“主机管理”页面。目前，这个管理网页，我们用到的操作就是登陆cPanel，还有设置DNS转址（不过响应很慢，改了后等很久才响应过来，建议使用其他的服务商来处理。第三篇博文将介绍这个DNS转址处理）。其他的都不用用到（包括SSH登陆，买包月wordpress套餐等等）。点击“cPanel管理员”登陆。</p><p><img src="/contentimg/6/2.png" alt="Result pic 2" title="登陆虚拟主机"></p><p>　　跳转到“应用程序”–&gt;“My Applications”，可以看到这里已经有一个wordpress，不用理会，直接删除掉。删除要选上面那一排，下面一排的设计不合理，是批量的情况下使用的。</p><p>　　删除完，回到“Applications Browser”，里面有很多现成的程序，不过都是国外的，有时间可以自己试试。找到WordPress，安装。这样才能进行自由定制。安装完后要登陆配置wordpress，流程很简单的，只不过网络问题，得等而已。这里就不记录。</p><p>　　这样，虽然看起来是安装程序，但是仔细看一下，我们看得到文件夹的，是可以上传下载的，数据库也是。管理文件有ftp方式，数据库有一个php页面，都是智能化的，不用自己在linux界面打命令（cPanel的作用–可视化操作）。这样，只要我们能忍受0.3kb/s和经常性断流，是可以把整个博客压缩下载下来，同时把数据库爬一份下来，布到本地，就能随便自己改css、js文件等等那些了，改完再传回去。</p><p>　　怎么玩这个wordpress的，我就不详细说了，网上教程好多，这里贴个链接<a href="https://www.cnblogs.com/4770k/p/5199523.html" target="_blank" rel="noopener">从零起步搭建Wordpress个人博客——Windows 平台篇（上）</a></p><p>按教程，这里会遇到问题：</p><p>　　网页打不开，报“iis运行php网站提示FastCgiModule错误模块”：打开控制面板，打开“启动或关系Windows功能”，选择iis下的“应用程序开发功能”，开启“CGI”即可。</p><p><img src="/contentimg/6/3.png" alt="Result pic 3" title="开启CGI"></p><p>　　可以自己加几个挂件上去，写写js脚本，还是蛮好玩的。注意写脚本要区分desktop还是phone，我没接触过前端，所以只是简单的使用了窗口大小来判断，不同情况下，某些插件应该区别对待的。例如我引用了<a href="https://github.com/hustcc/canvas-nest.js" target="_blank" rel="noopener">蜘蛛网浮动</a> 的特效。里面设置的是对应电脑端：99个浮动点。如果放到手机端，会密集恐惧症，所以这里就得改小了。这里360浏览器，反应wordpress的大小还是比较有趣的，双击时是变成移动端的宽度大小，所以可以粗略用这个来看效果。当然，还是谷歌浏览器写js脚本比较好。其他还有一个时钟挂件，代码是网上找到。js代码很好找，有现成的，实在不行，F12定位，也能看出来是那些代码，然后复制粘贴+修改，凑齐css+js+html就能跑出来效果了。这样抄了几个小特效，发现前端蛮好玩的，就是代码写起来没vs的美观，一直在想怎么会有人写代码不换行的？还有可视化编程，不能改的时候就能看到效果，只能改后，到浏览器刷新才能看到，这样调位置时超级烦（不过后面发现可以在浏览器中的缓存中改，就能实时看到效果，改好后复制回来就行）。总体上，还是推荐多多接触js的，短短的代码量就能实现很强大的功能。</p><p>　　这里也提一下一些心得吧，在挂饰中，是可以添加js代码的，我的两个特效就是这样加进去的，就不用拉文件下来改，然后发回去的。然后就是发布后，是显示成全文的，所以在编写文章时，开头写大概内容后，添加“more标签”，这样显示出来的才是“大概内容”+“继续阅读”。</p><p><img src="/contentimg/6/4.png" alt="Result pic 4" title="添加“继续阅读”标签"></p><p>　　说实话，这个买买买，然后建站的过程不耗时，真正耗时是DNS问题。</p><p>　　第一天搭好后，第二天访问，发现404，登cPanel那边跳过去也不行。当时想不明白，只能删了重装。单独删wordpress是不行的，还是不能访问，所以问题不在wordpress上。后面重置cPanel就可以了，同时发现，主机IP变了。说明是服务器问题，后面找了相关的文章，了解到是用的人多，服务器承载不过来，就经常出现这个情况。当时改谷歌的dns、换手机热点、联通移动等等都试过没用。证明问题真不是出在我这边，真的是服务端那边的。ping域名ip，会发现基本不通。</p><p>　　确实，一开始ping自己的域名，400+的延迟，然后挂DNSpod（现在和腾讯合作），没用，因为ip是国外的，所以需要用CDN加速。</p><p>　　后面还是用的国外免费的：<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">cloudflare</a></p><p>　　登陆注册，设置好域名后，隔几个小时候再来ping，延迟只有200+了。</p><p><img src="/contentimg/6/5.png" alt="Result pic 5" title="设置GoDaddy的域名服务器"></p><p><img src="/contentimg/6/6.png" alt="Result pic 6" title="选免费套餐"></p><p><img src="/contentimg/6/7.png" alt="Result pic 7" title="复制过去GoDaddy的两个链接"></p><p>　　当然，最好也做一下wordpress的优化，就是把插件全部删除，装两个加速的插件上去（有专门对应cloudflare的插件）。这样，虽然不能让第一次打开能快到什么地步，但是第二次打开却是能很快的（使用缓存加速功能）。</p><p>　　这里能挂载，当然也能解除了：</p><p><img src="/contentimg/6/8.png" alt="Result pic 8" title="解除挂载"></p><p>　　这个虚拟主机+WordPress，性价比不高，访问很慢，还经常性断网。后面我还是转战GitPage。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文是记录如何搭建个人博客系列的第一篇。该系列有3篇：1.付费虚拟云主机+WordPress；2.免费github+Hexo；3.个人站点yaojx.net的优化之路。&lt;/p&gt;
    
    </summary>
    
      <category term="编程人生" scheme="http://yaojx.net/categories/%E7%BC%96%E7%A8%8B%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="个人博客" scheme="http://yaojx.net/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="域名" scheme="http://yaojx.net/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>C# Obsolete、Contional等等一些特性的介绍</title>
    <link href="http://yaojx.net/2018/10/15/4fivefeatures/"/>
    <id>http://yaojx.net/2018/10/15/4fivefeatures/</id>
    <published>2018-10-15T14:55:58.000Z</published>
    <updated>2018-10-18T01:58:09.738Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享一些代码使用Attribute的高级写法部分，日常使用中应该很少用到，但是是能给代码书写带来很好的优化效果的。<br><a id="more"></a><br>　　这些东西其实和xml解析时定义的class中做的标记、自定义配置文件的class标记、枚举中文标记等等是类似的。都是在上面“[]”+标记。</p><p>　　日常编码中，应该Enum的中文标记是使用最多的，接下来就是xml解析，自定义配置文件应该用的人比较少，毕竟实用性不大，直接定义字段，或者使用系统自带的要容易用一些。接下来分享的几个，应该较少人接触过。</p><h2 id="一-Obsolete"><a href="#一-Obsolete" class="headerlink" title="一.Obsolete"></a>一.Obsolete</h2><p>　　类似tooltip提示，一般写接口的人会用到，用于标记函数是否过时，以及强制让函数无法通过编译。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObsolete</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    [Obsolete(<span class="string">"OldMethod,please use NewMethod"</span>, <span class="keyword">false</span>)]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OldMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Old Method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [Obsolete(<span class="string">"Error Method,you can't use this method!"</span>, <span class="keyword">true</span>)]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ErrorMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Error Method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">NewMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"New Method"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　实例中的三个方法是一样的操作：调用输出信息。照理说，是能直接调用然后输出的，毕竟没有语法错误，编译器也没提示函数有问题。</p><p>　　但实际使用时是：一个警告，一个直接错误。</p><p><img src="/contentimg/4/1.png" alt="Result pic 1" title="Obsolete"></p><p>　　直接给你一个error，不让编译通过。</p><p><img src="/contentimg/4/2.png" alt="Result pic 2" title="ObsoleteAttribute"></p><p>　　查看定义，该属性是继承Attribute，这样用法就是直接标在函数或者成员上面，并用“[]”包起来。该特性有三种构造函数，第二种常用，就是让函数提示过时，同时里面有message提示信息。用法就是上面第一张图那样，让函数本身“过时”，给了一个警告提，同时鼠标移上去时，会提示message的信息。第三种构造函数，就是加了error，标记是显示成“警告”（可以编译通过），还是“错误”（无法编译通过）。</p><p>　　这个特性，一般写接口的人会使用到，在接口的版本更新后，如果替换了新接口，但是又想老程序能使用时，一般保留老接口的代码。不过这里就有问题了，接下来新使用的程序，应该让他们用新接口而不是用老接口：如果说写在文档里面说明这个情况，但是好多人是连接口文档都不看的，直接dll引用就开始写代码的；如果写在注释里面？那更加不行，一般没报错，是很少有人去看注释的。所以这时候就得用特性了，使用这个特性，写代码的时候就直接编译器提示了，使用者全部都会看到这个提示。（unity经常用这个特性提示每次更新版本后丢弃的老属性，不过现在国内绝大部分公司，都是直接删掉老函数，然后拉分支来处理的，这样导致后期一大堆分支，维护很麻烦）</p><h2 id="二-Conditional"><a href="#二-Conditional" class="headerlink" title="二.Conditional"></a>二.Conditional</h2><p>　　一个好玩的特性，类似于 #if XXXX  #elif  XXXX #else XXX #endif 这种使用：</p><p><img src="/contentimg/4/3.png" alt="Result pic 3" title="预编译条件#if"></p><p>　　使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line"></span><br><span class="line">namespace FeaturesDemo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConditional</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        [Conditional(<span class="string">"ConsoleOut"</span>)]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ConsoleOut</span><span class="params">(string message)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　调用时：发现明明代码写在那里，但是却不执行：</p><p><img src="/contentimg/4/4.1.png" alt="Result pic 4" title="no done?"></p><p>　　因为它的使用前提是你要提示它“要执行”，它才会执行。不然没提示，代码在，但是不执行。</p><p>怎么提示：</p><p>　　方法一：在开头写#define +构造函数中传递的字符串</p><p><img src="/contentimg/4/4.2.png" alt="Result pic 5" title="预编译#define"></p><p>　　方法二：使用“条件编译符号”</p><p><img src="/contentimg/4/4.3.png" alt="Result pic 6" title="条件编译符号"></p><p>这里插播一下怎么运行core程序，因为vs编译生成的是dll：</p><p><img src="/contentimg/4/5.1.png" alt="Result pic 7" title="cmd run core"></p><p>　　cd到vs工程文件所在地方，然后“dotnet build”或者“dotnet run”都行，run是编译后同时运行，然后cd到dll所在地方，“dotnet”+项目名，就能运行。当然目录下要有“项目名.runtimeconfig.json”这个文件（标记目标环境）</p><p><img src="/contentimg/4/5.2.png" alt="Result pic 8" title="项目名.runtimeconfig.json文件"></p><p>　　这里分享几个参考的博文：</p><p><a href="https://www.cnblogs.com/Wddpct/p/5694596.html#3.1.2" target="_blank" rel="noopener">.NET Core全面扫盲贴</a></p><p><a href="https://msdn.microsoft.com/zh-cn/magazine/mt694084#rd" target="_blank" rel="noopener">.NET Core - .NET 使用 .NET Core 跨平台运行</a></p><p><a href="https://www.cnblogs.com/stulzq/p/9074965.html" target="_blank" rel="noopener">.NET Core 跨平台执行命令、脚本</a></p><h2 id="三-CallXXXX特性"><a href="#三-CallXXXX特性" class="headerlink" title="三.CallXXXX特性"></a>三.CallXXXX特性</h2><p>　　这个东西实用性一般般，用于调试排错的时候，就是你找到在哪里出错了，但是看代码又不知道上一层是哪个函数（就是哪里调用这个函数导致出问题），就加这个特性，一层一层排上去，就能找到是哪里出问题了。</p><p><img src="/contentimg/4/6.png" alt="Result pic 9" title="CallXXXX特性"></p><p>　　之前不知道有这个特性的时候，我都是直接用反射，找到哪个函数调用，然后一层一层反射上去。反射的过程超级麻烦，实用性也不好。当然，如果可以，建议直接用vs远程附加调试，打断点就能知道到底怎么出问题了。</p><h2 id="四-DebuggerStepThrough"><a href="#四-DebuggerStepThrough" class="headerlink" title="四.DebuggerStepThrough"></a>四.DebuggerStepThrough</h2><p>　　好吧，这个算凑数的。</p><p>　　这个特性是调试的时候，F10和F11的区别，就是如果函数加了这个特性，执行到这个函数，就算你使用F11（单步，逐语句），它也给你当F10（整个函数直接过，逐过程）。</p><p>　　“[System.Diagnostics.DebuggerStepThrough]”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Runtime.CompilerServices;</span><br><span class="line"></span><br><span class="line">namespace FeaturesDemo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCall</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        [System.Diagnostics.DebuggerStepThrough]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CallMethod</span><span class="params">(string message, [CallerFilePath] string filepath = <span class="string">""</span>, [CallerLineNumber]<span class="keyword">int</span> linenumber = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            [CallerMemberName]string membername = <span class="string">""</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(message);</span><br><span class="line">            <span class="keyword">if</span> (!string.IsNullOrEmpty(filepath))</span><br><span class="line">                Console.WriteLine(<span class="string">"filepath:"</span> + filepath);</span><br><span class="line">            <span class="keyword">if</span> (!linenumber.Equals(<span class="number">0</span>))</span><br><span class="line">                Console.WriteLine(<span class="string">"linenumber:"</span> + linenumber);</span><br><span class="line">            <span class="keyword">if</span> (!string.IsNullOrEmpty(membername))</span><br><span class="line">                Console.WriteLine(<span class="string">"membername:"</span> + membername);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五-枚举中文Description"><a href="#五-枚举中文Description" class="headerlink" title="五.枚举中文Description"></a>五.枚举中文Description</h2><p>　　Description，这个最常用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.ComponentModel;</span><br><span class="line">using System.Reflection;</span><br><span class="line"></span><br><span class="line">namespace FeaturesDemo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumCN</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> string <span class="title">GetDescription</span><span class="params">(Enum obj)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            FieldInfo fi = obj.GetType().GetField(obj.ToString());</span><br><span class="line">            DescriptionAttribute[] arrDesc = fi.GetCustomAttributes(typeof(DescriptionAttribute), <span class="keyword">false</span>) as DescriptionAttribute[];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (arrDesc != <span class="keyword">null</span> &amp;&amp; arrDesc.Length &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> arrDesc[<span class="number">0</span>].Description;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> PersonSex</span><br><span class="line">    &#123;</span><br><span class="line">        [Description(<span class="string">"男人"</span>)]</span><br><span class="line">        Man = <span class="number">0</span>,</span><br><span class="line">        [Description(<span class="string">"女人"</span>)]</span><br><span class="line">        Woman = <span class="number">1</span>,</span><br><span class="line">        [Description(<span class="string">"人妖"</span>)]</span><br><span class="line">        OtherSex = <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这里就不多解释了。做界面的人建议多用，在一些选项框中，中文对应枚举，比对应源的第几个要好用，也不容易出问题。</p><p><img src="/contentimg/4/7.png" alt="Result pic 10" title="枚举中文Description"></p><p>这里插播一下enum的另一个用法：权限校验</p><p>　　就是把枚举和二进制关联起来，0表示没这个权限，1表示有，然后进行与或非操作就能判断。</p><p>定义枚举：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Flags]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumPower</span><br><span class="line">&#123;</span><br><span class="line">    [Description(<span class="string">"游客"</span>)]</span><br><span class="line">    AllNull = <span class="number">0</span>,             <span class="comment">//0x00 表示全部没有    0000</span></span><br><span class="line">    [Description(<span class="string">"创建"</span>)]</span><br><span class="line">    Create = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,         <span class="comment">//0x01或者1  2的0次方  0001</span></span><br><span class="line">    [Description(<span class="string">"读取"</span>)]</span><br><span class="line">    Read = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,           <span class="comment">//0x02或者2  2的1次方  0010</span></span><br><span class="line">    [Description(<span class="string">"更新"</span>)]</span><br><span class="line">    Update = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,         <span class="comment">//0x04或者4  2的2次方  0100</span></span><br><span class="line">    [Description(<span class="string">"删除"</span>)]</span><br><span class="line">    Delete = <span class="number">1</span> &lt;&lt; <span class="number">3</span>          <span class="comment">//0x08或者8  2的3次方  1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　接下来，把权限“与”/“或”操作起来，然后检查是否某位上为1就是有该权限。使用该用法，数据库保存用户权限就容易了，例如有read和delete权限的，直接0010|1000=1010。</p><p>　　判断是否有read权限时：1010&amp;0010 = 0010-&gt;1表示有；当没有时：1000&amp;0010=0000-&gt;0</p><p>　　判断是否有read或者delete其中之一：1010&amp;(0010|1000)=1010-&gt;都有。或者其中一个有0010&amp;(0010|1000)=0010。</p><p>　　可以发现，判断权限时，我们只要&amp;|操作后，检查==0？就可以了。省了一堆if else if语句。</p><p>可以合并成一个函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckPower</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 检查是否有权限，</span></span><br><span class="line">    <span class="comment">/// |操作会合并成一个值，表示满足之一就返回true</span></span><br><span class="line">    <span class="comment">/// 如果有多个值，表示需要满足全部值才返回true</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="ower"&gt;用户的权限值&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="powers"&gt;要检查的权限值&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> bool <span class="title">CheckHasPower</span><span class="params">(EnumPower owner, params EnumPower[] powers)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//没有传权限过来，直接返回false</span></span><br><span class="line">        <span class="keyword">if</span> (powers == <span class="keyword">null</span> || powers.Length &lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//只传一个权限(单权限，或者几个权限的|操作)</span></span><br><span class="line">        <span class="keyword">if</span> (powers.Length &lt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果是EnumPower.AllNull，直接比较是否和owner一样</span></span><br><span class="line">            <span class="keyword">if</span> (powers[<span class="number">0</span>].Equals(EnumPower.AllNull))</span><br><span class="line">                <span class="keyword">return</span> owner.Equals(powers[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> (owner &amp; powers[<span class="number">0</span>]) != <span class="number">0x00</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//合并要检查的权限值</span></span><br><span class="line">        foreach (<span class="keyword">var</span> item in powers)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//核对每一项，如果有一项不成立，返回false</span></span><br><span class="line">            <span class="keyword">if</span> ((owner &amp; item) == <span class="number">0x00</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">   EnumPower owner = EnumPower.AllNull;</span><br><span class="line">   owner = EnumPower.Delete | EnumPower.Create;</span><br><span class="line"></span><br><span class="line">   Console.WriteLine(owner);</span><br><span class="line"></span><br><span class="line">   Console.WriteLine(<span class="string">"EnumPower.Delete:"</span> + CheckPower.CheckHasPower(owner, EnumPower.Delete) + System.Environment.NewLine);</span><br><span class="line">   Console.WriteLine(<span class="string">"EnumPower.Read:"</span> + CheckPower.CheckHasPower(owner, EnumPower.Read) + System.Environment.NewLine);</span><br><span class="line">   Console.WriteLine(<span class="string">"EnumPower.AllNull:"</span> + CheckPower.CheckHasPower(owner, EnumPower.AllNull) + System.Environment.NewLine);</span><br><span class="line">   Console.WriteLine(<span class="string">"EnumPower.Delete | EnumPower.Update:"</span> + CheckPower.CheckHasPower(owner, EnumPower.Delete | EnumPower.Update) + System.Environment.NewLine);</span><br><span class="line">   Console.WriteLine(<span class="string">"EnumPower.AllNull | EnumPower.Update:"</span> + CheckPower.CheckHasPower(owner, EnumPower.AllNull | EnumPower.Update) + System.Environment.NewLine);</span><br><span class="line">   Console.WriteLine(<span class="string">"EnumPower.Update | EnumPower.Delete:"</span> + CheckPower.CheckHasPower(owner, EnumPower.Update | EnumPower.Delete) + System.Environment.NewLine);</span><br><span class="line">   Console.WriteLine(<span class="string">"EnumPower.Update &amp;EnumPower.Delete:"</span> + CheckPower.CheckHasPower(owner, EnumPower.Update, EnumPower.Delete) + System.Environment.NewLine);</span><br><span class="line"></span><br><span class="line">   Console.WriteLine(<span class="string">"EnumPower.Read | EnumPower.Update | EnumPower.Create | EnumPower.Delete:"</span> + CheckPower.CheckHasPower(owner, EnumPower.Read | EnumPower.Update | EnumPower.Create | EnumPower.Delete) + System.Environment.NewLine);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> enumlength = Enum.GetNames(typeof(EnumPower)).Length - <span class="number">1</span>;<span class="comment">//0开始，所以要-1</span></span><br><span class="line">   <span class="comment">//等价于前面全部|的操作</span></span><br><span class="line">   Console.WriteLine(((EnumPower)(<span class="number">1</span> &lt;&lt; enumlength) - <span class="number">1</span>) + <span class="string">":"</span> + CheckPower.CheckHasPower(owner, ((EnumPower)(<span class="number">1</span> &lt;&lt; enumlength) - <span class="number">1</span>)) + System.Environment.NewLine);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">"EnumPower.Read &amp;EnumPower.Update &amp;EnumPower.Create &amp;EnumPower.Delete:"</span> + CheckPower.CheckHasPower(owner, EnumPower.Read, EnumPower.Update, EnumPower.Create, EnumPower.Delete));</span><br></pre></td></tr></table></figure><p><img src="/contentimg/4/8.png" alt="Result pic 11" title="权限校验"></p><p>　　这里比较好玩的是“1&lt;&lt;n”，表示2的n次方。注意“|”和“&amp;”的区别就可以使用了，特别注意&amp;操作，前后顺序，有没有加（），结果是不同的。以及拥有全部权限的另类算法，应该是1111（4个1）,即10000（5位）-1.</p><p>　　当然普遍写法是直接|或者&amp;然后判断==0？，就不会写一个函数来增加多余的部分的。所以上面这个函数显得突兀，只是为了直观理解而写的。</p><h2 id="六-自定义特性"><a href="#六-自定义特性" class="headerlink" title="六.自定义特性"></a>六.自定义特性</h2><p>　　特性类的后缀要以Attribute结尾，需要继承自System.Attribute，一般情况下声明为sealed。</p><p>示例如下：注意使用的时候自动去除Attribute后缀</p><p><img src="/contentimg/4/9.1.png" alt="Result pic 12" title="自定义特性示例"></p><p>　　获取内容的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMyMethod</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetFromClass</span><span class="params">(TestMyClass t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(t.TestProperty);</span><br><span class="line">        MyAttribute[] arrDesc = Attribute.GetCustomAttributes(t.GetType(), typeof(MyAttribute)) as MyAttribute[];</span><br><span class="line">        <span class="keyword">if</span> (arrDesc != <span class="keyword">null</span>)</span><br><span class="line">            foreach (<span class="keyword">var</span> item in arrDesc)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"Description:"</span> + item.Description);</span><br><span class="line">                Console.WriteLine(<span class="string">"LineNumber:"</span> + item.LineNumber);</span><br><span class="line">                Console.WriteLine(<span class="string">"IsClass:"</span> + item.IsClass);</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetFromProperty</span><span class="params">(TestMyProperty t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Console.WriteLine(t.TestProperty);</span><br><span class="line">        foreach (System.Reflection.PropertyInfo item in t.GetType().GetProperties())</span><br><span class="line">        &#123;</span><br><span class="line">            MyAttribute[] atts = Attribute.GetCustomAttributes(item, typeof(MyAttribute)) as MyAttribute[];</span><br><span class="line">            <span class="keyword">if</span> (atts == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">            foreach (<span class="keyword">var</span> at in atts)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"Description:"</span> + at.Description);</span><br><span class="line">                Console.WriteLine(<span class="string">"LineNumber:"</span> + at.LineNumber);</span><br><span class="line">                Console.WriteLine(<span class="string">"IsClass:"</span> + at.IsClass);</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　注意当特性放在不同的地方时获取方式不同，类中的字段是class.GetProperties()下的内容，然后才可以 Attribute.GetCustomAttributes</p><p><img src="/contentimg/4/9.2.png" alt="Result pic 13" title="获取方式不同"></p><p>　　注意当命名不规范的时候，是不会自动裁剪后缀的：</p><p><img src="/contentimg/4/9.3.png" alt="Result pic 14" title="命名不规范"></p><p>　　当然还有C++和其他dll导入时的特性，xml编辑的特性，以及ORM特性等等，由于那些的主题应该是对应的内容，特性只是一个小小的标记，所以那部分的内容到时放在具体项目中分享。</p><p> 本文测试程序工程可以从git直接获取：</p><p> git代码库: <a href="https://github.com/YaojiaxinPC/hexoblog/tree/master/FeaturesDemo" target="_blank" rel="noopener">Codes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享一些代码使用Attribute的高级写法部分，日常使用中应该很少用到，但是是能给代码书写带来很好的优化效果的。&lt;br&gt;
    
    </summary>
    
      <category term="编程技巧" scheme="http://yaojx.net/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="C#" scheme="http://yaojx.net/tags/C/"/>
    
      <category term="Attribute特性" scheme="http://yaojx.net/tags/Attribute%E7%89%B9%E6%80%A7/"/>
    
      <category term="enum特性" scheme="http://yaojx.net/tags/enum%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Json解析C#的四个库</title>
    <link href="http://yaojx.net/2018/10/15/3JsonDeal/"/>
    <id>http://yaojx.net/2018/10/15/3JsonDeal/</id>
    <published>2018-10-15T14:55:58.000Z</published>
    <updated>2018-10-18T01:58:00.922Z</updated>
    
    <content type="html"><![CDATA[<p>　　目前通讯中http是使用最多的，而其中Json基本是首选。大家平时解析时都是直接调用dll，但是有没有考虑过dll里面怎么处理？这个dll又从哪里来？本文将分享我接触到的4个解析Json的C#开源库。<br><a id="more"></a><br>　　目前我用得较多的是Newtonsoft ，后面了解到还有轻量的MiniJSON，SimpleJson以及litjson。</p><p>　　这里MiniJSON最精简，是一个class文件，通过对string进行简单字符串的处理来解析。</p><p>　　然后就是SimpleJson，也是一个class文件，不过代码量超级多，功能相对比较全面。看其他博客对这个评价蛮高的，不过我没使用过，暂不评价。</p><p>　　litjson，就文件多一点，好几个class组成。但是看部分博客提到跨平台上有问题。</p><p>　　由于之前是做windows应用，所以一直使用的是Newtonsoft，代码量远超上面的几个，编译出来的dll也是比他们的要大。所以，比较推荐用Newtonsoft，可定制化高很多，功能和内部考虑的东西也完善。</p><p>　　本文暂不讲怎么使用，只简单介绍怎么去github获取上面几个的源码，以及怎么编译。</p><p>　　提到github，这是一个好东西，好多好的开源项目都在上面。不过国内网速超级慢，使用起来不是很方便。一般情况下，可以不注册账号直接下载项目代码，下载下来是一个zip文件。也可以用VS里面的扩展插件GitHub Extension for Visual Studio，下载安装过程有点久，请耐心等待：</p><p><img src="/contentimg/3/1.png" alt="Result pic 1" title="GitHub Extension for Visual Studio"></p><p>　　使用起来相对没svn好用(当然，这里是可以用svn来使用的)。</p><p>　　推荐使用客户端：<a href="https://desktop.github.com/" target="_blank" rel="noopener">GitHubDesktop</a> 下载下来的应该是一个77M的全量包，直接安装就可以使用：</p><p><img src="/contentimg/3/2.png" alt="Result pic 2" title="GitHubDesktop"></p><p>　　这里使用到的就是File–&gt;Clone…；打开后</p><p><img src="/contentimg/3/3.png" alt="Result pic 3" title="Clone a repository"></p><p>　　这里的url，就是网页上获取的：</p><p><img src="/contentimg/3/4.png" alt="Result pic 4" title="Clone with HTTPS"></p><p>　　这里贴一下看到的其他博主写的专门介绍GitHub Desktop的：<a href="https://www.cnblogs.com/hanford/p/6038417.html" target="_blank" rel="noopener">Windows 上 GitHub Desktop 的操作</a> </p><h2 id="一-MiniJSON"><a href="#一-MiniJSON" class="headerlink" title="一.MiniJSON"></a>一.MiniJSON</h2><p>　　github地址：<a href="https://gist.github.com/darktable/1411710" target="_blank" rel="noopener">MiniJSON</a> </p><p>　　直接在你的项目中新建一个class，全选代码后复制过去，就可以使用了。</p><p>　　由于需要vpn，所以这里放一下代码吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (c) 2013 Calvin Rien</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Based on the JSON parser by Patrick van Bergen</span></span><br><span class="line"><span class="comment"> * http://techblog.procurios.nl/k/618/news/view/14605/14863/How-do-I-write-my-own-parser-for-JSON.html</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Simplified it so that it doesn't throw exceptions</span></span><br><span class="line"><span class="comment"> * and can be used in Unity iPhone with maximum code stripping.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining</span></span><br><span class="line"><span class="comment"> * a copy of this software and associated documentation files (the</span></span><br><span class="line"><span class="comment"> * "Software"), to deal in the Software without restriction, including</span></span><br><span class="line"><span class="comment"> * without limitation the rights to use, copy, modify, merge, publish,</span></span><br><span class="line"><span class="comment"> * distribute, sublicense, and/or sell copies of the Software, and to</span></span><br><span class="line"><span class="comment"> * permit persons to whom the Software is furnished to do so, subject to</span></span><br><span class="line"><span class="comment"> * the following conditions:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The above copyright notice and this permission notice shall be</span></span><br><span class="line"><span class="comment"> * included in all copies or substantial portions of the Software.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,</span></span><br><span class="line"><span class="comment"> * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></span><br><span class="line"><span class="comment"> * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></span><br><span class="line"><span class="comment"> * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY</span></span><br><span class="line"><span class="comment"> * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,</span></span><br><span class="line"><span class="comment"> * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE</span></span><br><span class="line"><span class="comment"> * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">using System;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Text;</span><br><span class="line"> </span><br><span class="line">namespace MiniJSON &#123;</span><br><span class="line">    <span class="comment">// Example usage:</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//  using UnityEngine;</span></span><br><span class="line">    <span class="comment">//  using System.Collections;</span></span><br><span class="line">    <span class="comment">//  using System.Collections.Generic;</span></span><br><span class="line">    <span class="comment">//  using MiniJSON;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//  public class MiniJSONTest : MonoBehaviour &#123;</span></span><br><span class="line">    <span class="comment">//      void Start () &#123;</span></span><br><span class="line">    <span class="comment">//          var jsonString = "&#123; \"array\": [1.44,2,3], " +</span></span><br><span class="line">    <span class="comment">//                          "\"object\": &#123;\"key1\":\"value1\", \"key2\":256&#125;, " +</span></span><br><span class="line">    <span class="comment">//                          "\"string\": \"The quick brown fox \\\"jumps\\\" over the lazy dog \", " +</span></span><br><span class="line">    <span class="comment">//                          "\"unicode\": \"\\u3041 Men\u00fa sesi\u00f3n\", " +</span></span><br><span class="line">    <span class="comment">//                          "\"int\": 65536, " +</span></span><br><span class="line">    <span class="comment">//                          "\"float\": 3.1415926, " +</span></span><br><span class="line">    <span class="comment">//                          "\"bool\": true, " +</span></span><br><span class="line">    <span class="comment">//                          "\"null\": null &#125;";</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//          var dict = Json.Deserialize(jsonString) as Dictionary&lt;string,object&gt;;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//          Debug.Log("deserialized: " + dict.GetType());</span></span><br><span class="line">    <span class="comment">//          Debug.Log("dict['array'][0]: " + ((List&lt;object&gt;) dict["array"])[0]);</span></span><br><span class="line">    <span class="comment">//          Debug.Log("dict['string']: " + (string) dict["string"]);</span></span><br><span class="line">    <span class="comment">//          Debug.Log("dict['float']: " + (double) dict["float"]); // floats come out as doubles</span></span><br><span class="line">    <span class="comment">//          Debug.Log("dict['int']: " + (long) dict["int"]); // ints come out as longs</span></span><br><span class="line">    <span class="comment">//          Debug.Log("dict['unicode']: " + (string) dict["unicode"]);</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//          var str = Json.Serialize(dict);</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//          Debug.Log("serialized: " + str);</span></span><br><span class="line">    <span class="comment">//      &#125;</span></span><br><span class="line">    <span class="comment">//  &#125;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// This class encodes and decodes JSON strings.</span></span><br><span class="line">    <span class="comment">/// Spec. details, see http://www.json.org/</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary.</span></span><br><span class="line">    <span class="comment">/// All numbers are parsed to doubles.</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Json</span> </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">/// Parses the string json into a value</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="json"&gt;A JSON string.&lt;/param&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;returns&gt;An List&amp;lt;object&amp;gt;, a Dictionary&amp;lt;string, object&amp;gt;, a double, an integer,a string, null, true, or false&lt;/returns&gt;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> object <span class="title">Deserialize</span><span class="params">(string json)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// save the string for debug information</span></span><br><span class="line">            <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> Parser.Parse(json);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        sealed class Parser : IDisposable &#123;</span><br><span class="line">            <span class="keyword">const</span> string WORD_BREAK = <span class="string">"&#123;&#125;[],:\""</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> bool <span class="title">IsWordBreak</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Char.IsWhiteSpace(c) || WORD_BREAK.IndexOf(c) != -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">enum</span> TOKEN &#123;</span><br><span class="line">                NONE,</span><br><span class="line">                CURLY_OPEN,</span><br><span class="line">                CURLY_CLOSE,</span><br><span class="line">                SQUARED_OPEN,</span><br><span class="line">                SQUARED_CLOSE,</span><br><span class="line">                COLON,</span><br><span class="line">                COMMA,</span><br><span class="line">                STRING,</span><br><span class="line">                NUMBER,</span><br><span class="line">                TRUE,</span><br><span class="line">                FALSE,</span><br><span class="line">                NULL</span><br><span class="line">            &#125;;</span><br><span class="line"> </span><br><span class="line">            StringReader json;</span><br><span class="line"> </span><br><span class="line">            Parser(string jsonString) &#123;</span><br><span class="line">                json = <span class="keyword">new</span> StringReader(jsonString);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> object <span class="title">Parse</span><span class="params">(string jsonString)</span> </span>&#123;</span><br><span class="line">                using (<span class="keyword">var</span> instance = <span class="keyword">new</span> Parser(jsonString)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> instance.ParseValue();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                json.Dispose();</span><br><span class="line">                json = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function">Dictionary&lt;string, object&gt; <span class="title">ParseObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Dictionary&lt;string, object&gt; table = <span class="keyword">new</span> Dictionary&lt;string, object&gt;();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// ditch opening brace</span></span><br><span class="line">                json.Read();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// &#123;</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (NextToken) &#123;</span><br><span class="line">                    <span class="keyword">case</span> TOKEN.NONE:</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">case</span> TOKEN.COMMA:</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">case</span> TOKEN.CURLY_CLOSE:</span><br><span class="line">                        <span class="keyword">return</span> table;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="comment">// name</span></span><br><span class="line">                        string name = ParseString();</span><br><span class="line">                        <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"> </span><br><span class="line">                        <span class="comment">// :</span></span><br><span class="line">                        <span class="keyword">if</span> (NextToken != TOKEN.COLON) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// ditch the colon</span></span><br><span class="line">                        json.Read();</span><br><span class="line"> </span><br><span class="line">                        <span class="comment">// value</span></span><br><span class="line">                        table[name] = ParseValue();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function">List&lt;object&gt; <span class="title">ParseArray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                List&lt;object&gt; array = <span class="keyword">new</span> List&lt;object&gt;();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// ditch opening bracket</span></span><br><span class="line">                json.Read();</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// [</span></span><br><span class="line">                <span class="keyword">var</span> parsing = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">while</span> (parsing) &#123;</span><br><span class="line">                    TOKEN nextToken = NextToken;</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">switch</span> (nextToken) &#123;</span><br><span class="line">                    <span class="keyword">case</span> TOKEN.NONE:</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">case</span> TOKEN.COMMA:</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">case</span> TOKEN.SQUARED_CLOSE:</span><br><span class="line">                        parsing = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        object value = ParseByToken(nextToken);</span><br><span class="line"> </span><br><span class="line">                        array.Add(value);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">return</span> array;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function">object <span class="title">ParseValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                TOKEN nextToken = NextToken;</span><br><span class="line">                <span class="keyword">return</span> ParseByToken(nextToken);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function">object <span class="title">ParseByToken</span><span class="params">(TOKEN token)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (token) &#123;</span><br><span class="line">                <span class="keyword">case</span> TOKEN.STRING:</span><br><span class="line">                    <span class="keyword">return</span> ParseString();</span><br><span class="line">                <span class="keyword">case</span> TOKEN.NUMBER:</span><br><span class="line">                    <span class="keyword">return</span> ParseNumber();</span><br><span class="line">                <span class="keyword">case</span> TOKEN.CURLY_OPEN:</span><br><span class="line">                    <span class="keyword">return</span> ParseObject();</span><br><span class="line">                <span class="keyword">case</span> TOKEN.SQUARED_OPEN:</span><br><span class="line">                    <span class="keyword">return</span> ParseArray();</span><br><span class="line">                <span class="keyword">case</span> TOKEN.TRUE:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">case</span> TOKEN.FALSE:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">case</span> TOKEN.NULL:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function">string <span class="title">ParseString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">char</span> c;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">// ditch opening quote</span></span><br><span class="line">                json.Read();</span><br><span class="line"> </span><br><span class="line">                bool parsing = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">while</span> (parsing) &#123;</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">if</span> (json.Peek() == -<span class="number">1</span>) &#123;</span><br><span class="line">                        parsing = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    c = NextChar;</span><br><span class="line">                    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">                        parsing = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\\'</span>:</span><br><span class="line">                        <span class="keyword">if</span> (json.Peek() == -<span class="number">1</span>) &#123;</span><br><span class="line">                            parsing = <span class="keyword">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"> </span><br><span class="line">                        c = NextChar;</span><br><span class="line">                        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'\\'</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">                            s.Append(c);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">                            s.Append(<span class="string">'\b'</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'f'</span>:</span><br><span class="line">                            s.Append(<span class="string">'\f'</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'n'</span>:</span><br><span class="line">                            s.Append(<span class="string">'\n'</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'r'</span>:</span><br><span class="line">                            s.Append(<span class="string">'\r'</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'t'</span>:</span><br><span class="line">                            s.Append(<span class="string">'\t'</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">'u'</span>:</span><br><span class="line">                            <span class="keyword">var</span> hex = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line"> </span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                                hex[i] = NextChar;</span><br><span class="line">                            &#125;</span><br><span class="line"> </span><br><span class="line">                            s.Append((<span class="keyword">char</span>) Convert.ToInt32(<span class="keyword">new</span> string(hex), <span class="number">16</span>));</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        s.Append(c);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">return</span> s.ToString();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function">object <span class="title">ParseNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                string number = NextWord;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (number.IndexOf(<span class="string">'.'</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">long</span> parsedInt;</span><br><span class="line">                    Int64.TryParse(number, out parsedInt);</span><br><span class="line">                    <span class="keyword">return</span> parsedInt;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">double</span> parsedDouble;</span><br><span class="line">                Double.TryParse(number, out parsedDouble);</span><br><span class="line">                <span class="keyword">return</span> parsedDouble;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">EatWhitespace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (Char.IsWhiteSpace(PeekChar)) &#123;</span><br><span class="line">                    json.Read();</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">if</span> (json.Peek() == -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">char</span> PeekChar &#123;</span><br><span class="line">                get &#123;</span><br><span class="line">                    <span class="keyword">return</span> Convert.ToChar(json.Peek());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">char</span> NextChar &#123;</span><br><span class="line">                get &#123;</span><br><span class="line">                    <span class="keyword">return</span> Convert.ToChar(json.Read());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            string NextWord &#123;</span><br><span class="line">                get &#123;</span><br><span class="line">                    StringBuilder word = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">while</span> (!IsWordBreak(PeekChar)) &#123;</span><br><span class="line">                        word.Append(NextChar);</span><br><span class="line"> </span><br><span class="line">                        <span class="keyword">if</span> (json.Peek() == -<span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">return</span> word.ToString();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            TOKEN NextToken &#123;</span><br><span class="line">                get &#123;</span><br><span class="line">                    EatWhitespace();</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">if</span> (json.Peek() == -<span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> TOKEN.NONE;</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">switch</span> (PeekChar) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'&#123;'</span>:</span><br><span class="line">                        <span class="keyword">return</span> TOKEN.CURLY_OPEN;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'&#125;'</span>:</span><br><span class="line">                        json.Read();</span><br><span class="line">                        <span class="keyword">return</span> TOKEN.CURLY_CLOSE;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'['</span>:</span><br><span class="line">                        <span class="keyword">return</span> TOKEN.SQUARED_OPEN;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">']'</span>:</span><br><span class="line">                        json.Read();</span><br><span class="line">                        <span class="keyword">return</span> TOKEN.SQUARED_CLOSE;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">','</span>:</span><br><span class="line">                        json.Read();</span><br><span class="line">                        <span class="keyword">return</span> TOKEN.COMMA;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">                        <span class="keyword">return</span> TOKEN.STRING;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">':'</span>:</span><br><span class="line">                        <span class="keyword">return</span> TOKEN.COLON;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'6'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'7'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'8'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'9'</span>:</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">                        <span class="keyword">return</span> TOKEN.NUMBER;</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">switch</span> (NextWord) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"false"</span>:</span><br><span class="line">                        <span class="keyword">return</span> TOKEN.FALSE;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"true"</span>:</span><br><span class="line">                        <span class="keyword">return</span> TOKEN.TRUE;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"null"</span>:</span><br><span class="line">                        <span class="keyword">return</span> TOKEN.NULL;</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    <span class="keyword">return</span> TOKEN.NONE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">/// Converts a IDictionary / IList object or a simple type (string, int, etc.) into a JSON string</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="json"&gt;A Dictionary&amp;lt;string, object&amp;gt; / List&amp;lt;object&amp;gt;&lt;/param&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;returns&gt;A JSON encoded string, or null if object 'json' is not serializable&lt;/returns&gt;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> string <span class="title">Serialize</span><span class="params">(object obj)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Serializer.Serialize(obj);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        sealed <span class="class"><span class="keyword">class</span> <span class="title">Serializer</span> </span>&#123;</span><br><span class="line">            StringBuilder builder;</span><br><span class="line"> </span><br><span class="line">            Serializer() &#123;</span><br><span class="line">                builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> string <span class="title">Serialize</span><span class="params">(object obj)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> instance = <span class="keyword">new</span> Serializer();</span><br><span class="line"> </span><br><span class="line">                instance.SerializeValue(obj);</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">return</span> instance.builder.ToString();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SerializeValue</span><span class="params">(object value)</span> </span>&#123;</span><br><span class="line">                IList asList;</span><br><span class="line">                IDictionary asDict;</span><br><span class="line">                string asStr;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    builder.Append(<span class="string">"null"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((asStr = value as string) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    SerializeString(asStr);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value is bool) &#123;</span><br><span class="line">                    builder.Append((bool) value ? <span class="string">"true"</span> : <span class="string">"false"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((asList = value as IList) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    SerializeArray(asList);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((asDict = value as IDictionary) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    SerializeObject(asDict);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value is <span class="keyword">char</span>) &#123;</span><br><span class="line">                    SerializeString(<span class="keyword">new</span> string((<span class="keyword">char</span>) value, <span class="number">1</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    SerializeOther(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SerializeObject</span><span class="params">(IDictionary obj)</span> </span>&#123;</span><br><span class="line">                bool first = <span class="keyword">true</span>;</span><br><span class="line"> </span><br><span class="line">                builder.Append(<span class="string">'&#123;'</span>);</span><br><span class="line"> </span><br><span class="line">                foreach (object e in obj.Keys) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">                        builder.Append(<span class="string">','</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    SerializeString(e.ToString());</span><br><span class="line">                    builder.Append(<span class="string">':'</span>);</span><br><span class="line"> </span><br><span class="line">                    SerializeValue(obj[e]);</span><br><span class="line"> </span><br><span class="line">                    first = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                builder.Append(<span class="string">'&#125;'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SerializeArray</span><span class="params">(IList anArray)</span> </span>&#123;</span><br><span class="line">                builder.Append(<span class="string">'['</span>);</span><br><span class="line"> </span><br><span class="line">                bool first = <span class="keyword">true</span>;</span><br><span class="line"> </span><br><span class="line">                foreach (object obj in anArray) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!first) &#123;</span><br><span class="line">                        builder.Append(<span class="string">','</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"> </span><br><span class="line">                    SerializeValue(obj);</span><br><span class="line"> </span><br><span class="line">                    first = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                builder.Append(<span class="string">']'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SerializeString</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">                builder.Append(<span class="string">'\"'</span>);</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">char</span>[] charArray = str.ToCharArray();</span><br><span class="line">                foreach (<span class="keyword">var</span> c in charArray) &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">                        builder.Append(<span class="string">"\\\""</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\\'</span>:</span><br><span class="line">                        builder.Append(<span class="string">"\\\\"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\b'</span>:</span><br><span class="line">                        builder.Append(<span class="string">"\\b"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\f'</span>:</span><br><span class="line">                        builder.Append(<span class="string">"\\f"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\n'</span>:</span><br><span class="line">                        builder.Append(<span class="string">"\\n"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\r'</span>:</span><br><span class="line">                        builder.Append(<span class="string">"\\r"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\t'</span>:</span><br><span class="line">                        builder.Append(<span class="string">"\\t"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">int</span> codepoint = Convert.ToInt32(c);</span><br><span class="line">                        <span class="keyword">if</span> ((codepoint &gt;= <span class="number">32</span>) &amp;&amp; (codepoint &lt;= <span class="number">126</span>)) &#123;</span><br><span class="line">                            builder.Append(c);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            builder.Append(<span class="string">"\\u"</span>);</span><br><span class="line">                            builder.Append(codepoint.ToString(<span class="string">"x4"</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">                builder.Append(<span class="string">'\"'</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">SerializeOther</span><span class="params">(object value)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">NOTE:</span> decimals lose precision during serialization.</span></span><br><span class="line">                <span class="comment">// They always have, I'm just letting you know.</span></span><br><span class="line">                <span class="comment">// Previously floats and doubles lost precision too.</span></span><br><span class="line">                <span class="keyword">if</span> (value is <span class="keyword">float</span>) &#123;</span><br><span class="line">                    builder.Append(((<span class="keyword">float</span>) value).ToString(<span class="string">"R"</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value is <span class="keyword">int</span></span><br><span class="line">                    || value is uint</span><br><span class="line">                    || value is <span class="keyword">long</span></span><br><span class="line">                    || value is sbyte</span><br><span class="line">                    || value is <span class="keyword">byte</span></span><br><span class="line">                    || value is <span class="keyword">short</span></span><br><span class="line">                    || value is ushort</span><br><span class="line">                    || value is ulong) &#123;</span><br><span class="line">                    builder.Append(value);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value is <span class="keyword">double</span></span><br><span class="line">                    || value is decimal) &#123;</span><br><span class="line">                    builder.Append(Convert.ToDouble(value).ToString(<span class="string">"R"</span>));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    SerializeString(value.ToString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-SimpleJson"><a href="#二-SimpleJson" class="headerlink" title="二.SimpleJson"></a>二.SimpleJson</h2><p>　　github地址：<a href="https://github.com/facebook-csharp-sdk/simple-json" target="_blank" rel="noopener">SimpleJson</a> </p><p>　　你可以下载下来然后用vs打开选Net2.0编译出来一个dll（这里可能会报错，将文件EscapeToJavascriptStringTests去掉就正常了）。但是你也可以像前面那样，新建一个class，然后复制SimpleJson.cs的代码，点击SimpleJson.cs后会进到下面的详情网页，选择图中的Raw，就能进到代码页面，然后Ctrl+A进行全选复制。</p><p><img src="/contentimg/3/5.png" alt="Result pic 5" title="Get Raw Codes"></p><h2 id="三-LitJSON"><a href="#三-LitJSON" class="headerlink" title="三.LitJSON"></a>三.LitJSON</h2><p>　　github地址：<a href="https://github.com/LitJSON/litjson" target="_blank" rel="noopener">LitJSON</a> </p><p>　　这个生成超级烦，要搭.net core的环境。由于没接触core开发，后面我还是修改vs工程文件，去掉core后才能生成。</p><p>　　（后面发现，其实这里是因为VS的版本问题，要新版本。这里有篇文章就是问这个的：<a href="https://stackoverflow.com/questions/45979627/msbuild-of-vs2017-cannot-compile-net-standard-2-0-project" target="_blank" rel="noopener">msbuild-of-vs2017-cannot-compile-net-standard-2-0-project</a>  查官网，只提到装2017，但是明明我的是2017（但是是16年底下载的，Core2.0是17年底出的），.NET Core 2.0.0 SDK这个也安装了，就是无法编译，其实是msbuild 版本。这个问题，和VS2010的msbuild编译不了2015版本的项目是一样的。所以如果装了新版本的，这里不用修改，是可以直接编译的。）</p><p>　　这里也贴一下主页：<a href="https://litjson.net/" target="_blank" rel="noopener">LitJSON</a> </p><p>　　以及一个老版本的直接dll下载地址：<a href="https://sourceforge.net/projects/litjson/" target="_blank" rel="noopener">DownloadDll</a> </p><p>　　推荐直接下载github的然后自己编译，因为后面有更新，而网上那些，好多都是好几年前的版本。</p><p>下面记录一下我怎么编译的：</p><p>　　实际是修改vs工程文件，然后直接用vs打开就可以编译的，不过这里我也记录一下他自带的那些工具是怎么配置到可以用的。</p><p>　　先记录怎么修改vs工程文件，目录中，实际只要用到\litjson-develop\src\LitJson里的东西：</p><p><img src="/contentimg/3/6.png" alt="Result pic 6" title="修改vs工程文件 LitJSON.csproj"></p><p>　　用记事本打开，ctrl+f查找包含“netstandard”的字段，就是下面截图红色部分，删掉：</p><p><img src="/contentimg/3/7.png" alt="Result pic 7" title="修改LitJSON.csproj，删除部分编译条件"></p><p>　　这里简单说明一下为什么要删掉：</p><p>　　“netstandard”部分是core环境的，目前我没搭这个环境，所以直接编译是会报错的。</p><p>　　而中间的那个，是检查git的，如果你是部署了git，登陆了帐号，就没影响，可以更新并编译，不然就会报错。</p><p>　　删掉上面红色部分后，用vs打开，直接编译就成功了。</p><p>接下来介绍怎么修改自带的那些工具来生成，过程繁琐，不过不用修改vs工程文件：</p><p>　　首先运行build.ps1，记住不是sh（这个是linux的），右键–&gt;使用PowerShell运行：</p><p><img src="/contentimg/3/8.png" alt="Result pic 8" title="find build.ps1"></p><p><img src="/contentimg/3/9.png" alt="Result pic 9" title="run build.ps1"></p><p>　　出现下面这样的窗口，实际是里面代码，分析出你要安装这个环境的这个包，正常情况是一直下载不下来的，vpn也救不了，后面挂<a href="https://pan.baidu.com/s/1qJMXKCqwyuIbe73ub3uueA%C2%A0" target="_blank" rel="noopener">百度云离线</a>  （ 提取码：0osd）总算下载下来了。</p><p><img src="/contentimg/3/10.png" alt="Result pic 10" title="get download link"></p><p>　　现在目录中多了一个文件夹，里面是安装core的环境的，可以安装，目前我系统是win10版：</p><p><img src="/contentimg/3/11.png" alt="Result pic 11" title="Window Version"></p><p>　　这里也简单记一下怎么修改代码让dotnet-install.ps1文件能运行：</p><p>　　首先右键–&gt;编辑；里面好多脚本代码，和C#超级像，有兴趣可以去了解：</p><p><img src="/contentimg/3/12.png" alt="Result pic 12" title="Open dotnet-install.ps1"></p><p>　　这里意思是传一个下载链接给它，然后下载解压（上面一堆脚本都是下载函数）。而现在这个url，是下不下来的，不过我们可以通过IIS，进行localhost下载：</p><p>　　windows启用IIS，在程序与功能–&gt;启用或关闭windows功能，然后你看到有iis的就打勾就行了。</p><p><img src="/contentimg/3/13.png" alt="Result pic 13" title="Run IIS"></p><p>　　然后找到上面图中这个，点击“浏览”，把刚才通过百度云下载的dotnet-sdk-2.1.4-win-x64.zip复制过去，当然还有复制dotnet-install.ps1这个文件，不过.ps1这个后缀，在iis里面不能访问，所以我修改成txt，反正脚本中只是找文件下载，下载后保存的命名是自己定的。</p><p><img src="/contentimg/3/14.png" alt="Result pic 14" title="Files"></p><p>　　然后就是修改脚本：</p><p><img src="/contentimg/3/15.png" alt="Result pic 15" title="Edit Scripts"></p><p>　　修改build.ps1，告诉它去localhost目录下载这个txt；同时修改这个txt去localhost下载这个zip。</p><p>　　这样就能正常运行了，但是这里由于网络原因，还会报错，就安装cake部分，不过可以重新启动就行，cake的下载和安装过程较顺利，安装好后多了3个文件夹：</p><p><img src="/contentimg/3/16.png" alt="Result pic 16" title="Cake Files"></p><p>　　一个是检查git的，一个是编译工具cake。</p><p>　　所以如果想用这个工具编译，最好是登陆git的，这样就能用自带工具编译了，core也能编译：</p><p><img src="/contentimg/3/17.png" alt="Result pic 17" title="Run build.ps1"></p><p>　　这里我删了core的环境安装部分，然后直接运行build.ps1就可以了。</p><p>　　这种方式就不用修改vs工程文件。</p><p>　　从ps1文件里面了解到，是调用cake来编译的，所以，其实我们可以直接cmd来操作：</p><p><img src="/contentimg/3/18.png" alt="Result pic 18" title="build by cake"></p><p>　　cmd到build.cake所在目录，然后调用cake.exe。</p><h2 id="四-Newtonsoft-Json"><a href="#四-Newtonsoft-Json" class="headerlink" title="四.Newtonsoft.Json"></a>四.Newtonsoft.Json</h2><p>　　主页：<a href="https://www.newtonsoft.com/json" target="_blank" rel="noopener">www.newtonsoft.com</a> </p><p>　　github地址：<a href="https://github.com/JamesNK/Newtonsoft.Json" target="_blank" rel="noopener">Newtonsoft.Json</a> </p><p>　　这个就编译比较简单，但是会报错readonly struct（去掉readonly就行），用vs编辑工程文件，像前面那个一样删掉core和phone等等那些选项，然后再编译就能编译通过。自带的脚本也是，下载部分很顺利就能下载，155m左右；但是还有附加的编译环境，也是core的。</p><p>　　这里这个错，其实是C# 7的特性，老版本的vs都不支持。然后core的问题，其实也是更新新版本vs就能解决，后面我更新了新版本后，msbuild版本上来了，就能正常编译了。为什么在第三个那里没注意到时msbuild，因为那里用的是cake，所以当时是能用脚本编译，但是不能vs编译，后面找多点资料后才想起是这个可能。所以这里我就直接更新vs，然后就能直接编译了。什么都不用改。</p><p>　　这里放一下vs2017最新版的安装索引包吧：</p><p>两个官网下载地址：</p><p>　　地址1：<a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes#15.1.26430.06" target="_blank" rel="noopener">vs2017-relnotes#15.1.26430.06</a> </p><p>　　地址2：<a href="https://visualstudio.microsoft.com/zh-hans/downloads/" target="_blank" rel="noopener">visualstudio.microsoft.com</a> </p><p>　　以及.NET downloads：<a href="https://www.microsoft.com/net/download" target="_blank" rel="noopener">.NET</a> </p><p>　　附加一下百度云，就是本篇文章用到的配置环境所要下载的东西（要vpn的那几个）：</p><p>　　<a href="https://pan.baidu.com/s/1X0HYx4geqPqSh-WD5xBbXg" target="_blank" rel="noopener">链接</a>  提取码：1t2x</p><p>　　这里有个文章提到这个新特性：<a href="https://blogs.msdn.microsoft.com/mazhou/2017/11/21/c-7-series-part-6-read-only-structs/" target="_blank" rel="noopener">C# 7 Series, Part 6: Read-only structs</a> </p><p><img src="/contentimg/3/19.png" alt="Result pic 19" title="Git edit History"></p><p>　　以及两篇介绍的：</p><p>　　<a href="https://www.cnblogs.com/zjoch/p/6696986.html" target="_blank" rel="noopener">.NET Core 2.0及.NET Standard 2.0</a> </p><p>　　<a href="https://blog.csdn.net/starfd/article/details/78839704" target="_blank" rel="noopener">NET Standard/Core中配置使用TargetFrameworks输出多版本类库及测试：</a> </p><p>　　平时用这个库比较多的原因，就是可定制化高，可以设置<a href="https://www.cnblogs.com/sczmzx/p/7813715.html" target="_blank" rel="noopener">null值要不要序列化</a>  ，等等之类的定制。</p><p>结尾附几个博主写的库分享：</p><p>　　<a href="https://www.cnblogs.com/landeanfen/p/4627383.html" target="_blank" rel="noopener">序列化效率比拼——谁是最后的赢家Newtonsoft.Json</a> </p><p>　　<a href="https://www.cnblogs.com/blqw/p/3274229.html" target="_blank" rel="noopener">几个常用Json组件的性能测试</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　目前通讯中http是使用最多的，而其中Json基本是首选。大家平时解析时都是直接调用dll，但是有没有考虑过dll里面怎么处理？这个dll又从哪里来？本文将分享我接触到的4个解析Json的C#开源库。&lt;br&gt;
    
    </summary>
    
      <category term="开源库分享" scheme="http://yaojx.net/categories/%E5%BC%80%E6%BA%90%E5%BA%93%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="C#" scheme="http://yaojx.net/tags/C/"/>
    
      <category term="Json" scheme="http://yaojx.net/tags/Json/"/>
    
  </entry>
  
  <entry>
    <title>闭包Closure</title>
    <link href="http://yaojx.net/2018/10/15/5Closure/"/>
    <id>http://yaojx.net/2018/10/15/5Closure/</id>
    <published>2018-10-15T14:55:58.000Z</published>
    <updated>2018-10-18T01:58:18.521Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录在编程中遇到的一个疑难杂症，for循环中的异步赋值结果和理想情况对不上：全部赋值成同一个值。</p><a id="more"></a><p>　　先贴代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    System.Threading.ThreadPool.QueueUserWorkItem((o) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(i);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　上面这段代码，照理是进行异步处理，开了线程池来打印。理想输出是0~10这样。</p><p>　　但结果：</p><p><img src="/contentimg/5/1.png" alt="Result pic 1" title="实际输出1"></p><p><img src="/contentimg/5/2.png" alt="Result pic 2" title="理想输出1"></p><p>　　这里就是闭包现象。</p><p><a href="https://www.cnblogs.com/jiejie_peng/p/3701070.html" target="_blank" rel="noopener">闭包：</a></p><blockquote><p>　　<strong><em>内层的函数可以引用包含在它外层的函数的变量，即使外层函数的执行已经终止。但该变量提供的值并非变量创建时的值，而是在父函数范围内的最终值。</em></strong></p></blockquote><p>　　这里有篇博文也介绍这个，上面的<a href="https://www.cnblogs.com/jiejie_peng/p/3701070.html" target="_blank" rel="noopener">概念</a> 是复制该博文过来的。</p><p>　　这里简单理解，就是变量i，在lamdb表达式的时候，传的是地址，而实际上，这个地址上的值已经执行完for变成10了（理想情况下，传的应该是值0~9）。</p><p>　　照这样理解，可以搞一个中间缓冲值（即每次传的都不是同一个地址）来处理：（输出没按照顺序，是因为多核处理问题，这里不进行讨论）</p><p><img src="/contentimg/5/3.png" alt="Result pic 3" title="使用中间缓冲值"></p><p>　　明显已经没有重复值了，但是记住，地址！就是说tmp的声明必须在for内，如果放到外面（或者放在线程池里面）：</p><p><img src="/contentimg/5/4.png" alt="Result pic 4" title="错误使用中间缓冲值"></p><p>　　神秘现象，直接是9，不是10了？？？好吧，不小心给自己挖了个坑，接下来开始填坑吧。分析为什么是9，不是10：</p><p><img src="/contentimg/5/5.png" alt="Result pic 5" title="分析：错误使用中间缓冲值"></p><p>　　循环中确实是0~9，但是最后i++变成10，进行i&lt;10的判断后false，不进入循环了，所以i最后结果为10，tmp=9.  坑解决。</p><p>　　但这里又有新坑，按前面的理解，不是全部应该“in :9___10”，怎么还出现”in :6___6”的？</p><p><img src="/contentimg/5/6.png" alt="Result pic 6" title="console占用较多的进程时间"></p><p>　　其实是因为console占用了时间，导致线程池的在for还未执行完的时候就开始了（线程池创建后还得等待分配资源才能启动，所以有延迟），所以就可以看到，前面数字很乱（for还在执行，所以数字还在变），到后面才变成全部9（for执行完毕）。</p><p>　　这里有多线程的知识，这里暂时不讨论，简单讲，如string类型的，因为是每个线程会复制一份到自己环境中操作，修改完毕后才通知回主地址，如果这时出现A、B线程同时拷贝了数据去操作，又同时通知回来，就导致脏数据产生（互相覆盖），所以就得用多线程锁（实质是内存片段锁的处理，锁住主地址的访问，不允许拷贝处理，只能排队，变成类似单线程操作）来处理。</p><p>下面贴一下内存地址部分测试的demo，证明用的是同一个地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//地址不变</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="comment">//string的内容变时，实际是重新占用内存，然后存入新值，所以只要内容发生变化，内存肯定变</span></span><br><span class="line">    <span class="keyword">public</span> string str;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodA</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">             System.Threading.ThreadPool.QueueUserWorkItem((o) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                num = i;</span><br><span class="line">                str = i.ToString();</span><br><span class="line">                GetAddr();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MethodB</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//System.Threading.ThreadPool.QueueUserWorkItem((o) =&gt;</span></span><br><span class="line">            <span class="comment">//&#123;</span></span><br><span class="line">                num = i;</span><br><span class="line">                str = i.ToString();</span><br><span class="line">                GetAddr();</span><br><span class="line">            <span class="comment">//&#125;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function">unsafe <span class="keyword">void</span> <span class="title">GetAddr</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//这个是类对象，放在堆里面</span></span><br><span class="line">        fixed (<span class="keyword">int</span>* p = &amp;num)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"&#123;0&#125;__:Address of numbe:0x&#123;1:x&#125;"</span>, num, (<span class="keyword">int</span>)p);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//fixed(char* p= str)</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    Console.WriteLine("&#123;0&#125;__:Address of char:0x&#123;1:x&#125;", str, (int)p);</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">//GetAddrZ(num);</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">////弄成函数传值的话，地址是变化的，因为是一份拷贝</span></span><br><span class="line">    <span class="comment">//unsafe void GetAddrZ(int n)</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    //获取栈上变量的地址</span></span><br><span class="line">    <span class="comment">//    int* p = &amp;n;</span></span><br><span class="line">    <span class="comment">//    Console.WriteLine("&#123;0&#125;__:Address of n:0x&#123;1:x&#125;\n", num, (int)p);</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　先使用int：</p><p><img src="/contentimg/5/7.png" alt="Result pic 7" title="整数型地址情况"></p><p>　　接下来是string：</p><p><img src="/contentimg/5/8.png" alt="Result pic 8" title="字符串地址情况"></p><p>　　这里的main函数是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    test t = <span class="keyword">new</span> test();</span><br><span class="line">    t.MethodA();</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    Console.WriteLine();</span><br><span class="line">    t.MethodB();</span><br><span class="line"> </span><br><span class="line">    Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　当然这里也会出现这种情况：</p><p><img src="/contentimg/5/9.png" alt="Result pic 9" title="代码执行顺序有变化"></p><p>　　发现这里上面本应该一致的地址，也会出现不同。</p><p>　　重复多次执行经常出现这种情况。</p><p><img src="/contentimg/5/10.png" alt="Result pic 10" title="地址发生变化"></p><p>　　这里就是引用类型在多线程情况下的问题。</p><p>　　这里简单提及“原子操作volatile”：</p><p><img src="/contentimg/5/11.png" alt="Result pic 11" title="原子操作volatile"></p><p>　　原子操作 volatile。通知编译器，不允许拷贝，全部访问都是去主地址拿。算是最简单的多线程处理操作，实质这里没使用到加锁，还是会出现问题的：</p><p><img src="/contentimg/5/12.png" alt="Result pic 12" title="原子操作volatile出问题"></p><p>这里放一下简单的加锁操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> object lockstr = <span class="keyword">new</span> object();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> string _str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">public</span> string Str</span><br><span class="line">&#123;</span><br><span class="line">    get &#123; <span class="keyword">return</span> _str; &#125;</span><br><span class="line">    set</span><br><span class="line">    &#123;</span><br><span class="line">        lock (lockstr)</span><br><span class="line">        &#123;</span><br><span class="line">            _str = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/contentimg/5/13.png" alt="Result pic 13" title="加锁操作情况"></p><p>　　多线程内容超级多，等我整理好后再发专门的主题。这里只提初级的加锁方式lock(obj)。</p><p> 本文测试程序工程可以从git直接获取：</p><p> git代码库: <a href="https://github.com/YaojiaxinPC/hexoblog/tree/master/TestClosure" target="_blank" rel="noopener">Codes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录在编程中遇到的一个疑难杂症，for循环中的异步赋值结果和理想情况对不上：全部赋值成同一个值。&lt;/p&gt;
    
    </summary>
    
      <category term="编程疑难杂症" scheme="http://yaojx.net/categories/%E7%BC%96%E7%A8%8B%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
      <category term="C#" scheme="http://yaojx.net/tags/C/"/>
    
      <category term="闭包" scheme="http://yaojx.net/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>入门级的8种算法记录</title>
    <link href="http://yaojx.net/2018/10/14/2SortMethon/"/>
    <id>http://yaojx.net/2018/10/14/2SortMethon/</id>
    <published>2018-10-14T14:55:58.000Z</published>
    <updated>2018-10-18T02:47:46.207Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录算法中入门级别的8种简单排序算法。</p><ol><li>冒泡排序　　2.  选择排序　　3.  插入排序　　4.  堆排序<br>　　5.  归并排序　　6.  快速排序　　7.  希尔排序　　8.  基数排序<a id="more"></a><h2 id="基础代码实现："><a href="#基础代码实现：" class="headerlink" title="基础代码实现："></a>基础代码实现：</h2></li></ol><h3 id="1-抽象公共接口部分"><a href="#1-抽象公共接口部分" class="headerlink" title="1.抽象公共接口部分"></a>1.抽象公共接口部分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ISortMethod</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function">IList&lt;<span class="keyword">int</span>&gt; <span class="title">GetResult</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist,out <span class="keyword">int</span> countnum)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-建立公共基类进行数据有效性校验和控制台输出的颜色标记"><a href="#2-建立公共基类进行数据有效性校验和控制台输出的颜色标记" class="headerlink" title="2.建立公共基类进行数据有效性校验和控制台输出的颜色标记"></a>2.建立公共基类进行数据有效性校验和控制台输出的颜色标记</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">public class SortBaseClass : ISortMethod</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IList&lt;<span class="keyword">int</span>&gt; <span class="title">GetResult</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, out <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CheckEffect(sourcelist,out countnum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 进行数据的有效性判断</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="sourcelist"&gt;&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IList&lt;<span class="keyword">int</span>&gt; <span class="title">CheckEffect</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, out <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        IList&lt;<span class="keyword">int</span>&gt; resultlist = <span class="keyword">null</span>;</span><br><span class="line">        countnum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (sourcelist != <span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sourcelist.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                resultlist = Sort(sourcelist,out countnum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                resultlist = sourcelist;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultlist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 由具体的算法部分进行重写</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="sourcelist"&gt;&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> virtual IList&lt;<span class="keyword">int</span>&gt; <span class="title">Sort</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, out <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        countnum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> sourcelist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 控制台过程输出</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="sourcelist"&gt;&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="n"&gt;交换的前面一个数的序号&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="m"&gt;交换的后面一个数的序号&lt;/param&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">ConsoleOutProcess</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sourcelist.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; sourcelist.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == n || i == m)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.ForegroundColor = ConsoleColor.Green;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    Console.ForegroundColor = ConsoleColor.White;</span><br><span class="line"></span><br><span class="line">                Console.Write(sourcelist[i]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (i != n)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.ForegroundColor = ConsoleColor.White;</span><br><span class="line">                    Console.Write(<span class="string">"--&gt;"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.Write(<span class="string">"&lt;--"</span>);</span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.ForegroundColor = ConsoleColor.White;</span><br><span class="line">        <span class="keyword">if</span> (sourcelist.Count - <span class="number">1</span> == n || sourcelist.Count - <span class="number">1</span> == m)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.ForegroundColor = ConsoleColor.Green;</span><br><span class="line">        &#125;</span><br><span class="line">        Console.Write(sourcelist[sourcelist.Count - <span class="number">1</span>]);</span><br><span class="line">        Console.ForegroundColor = ConsoleColor.White;</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-main函数具体打印代码"><a href="#3-main函数具体打印代码" class="headerlink" title="3.main函数具体打印代码"></a>3.main函数具体打印代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; numlst = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;() &#123; <span class="number">23</span>, <span class="number">44</span>, <span class="number">66</span>, <span class="number">66</span>, <span class="number">76</span>, <span class="number">98</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">7</span> &#125;;</span><br><span class="line">    ISortMethod sort = <span class="keyword">new</span> BubbleSortMethod();</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">"原数列为："</span>);</span><br><span class="line">    StringBuilder str = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numlst.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str.Append(numlst[i] + <span class="string">"   "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(str.Remove(str.Length - <span class="number">3</span>, <span class="number">3</span>).ToString());</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(System.Environment.NewLine);</span><br><span class="line">    <span class="keyword">int</span> countnum = <span class="number">0</span>;</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; result = sort.GetResult(numlst,out countnum) as List&lt;<span class="keyword">int</span>&gt;;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(System.Environment.NewLine);</span><br><span class="line">    Console.WriteLine(<span class="string">"经过了&#123;0&#125;次数据对比 "</span>, countnum);</span><br><span class="line">    Console.WriteLine(<span class="string">"排序后为："</span>);</span><br><span class="line">    str.Clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str.Append(result[i] + <span class="string">"--&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(str.Remove(str.Length - <span class="number">3</span>, <span class="number">3</span>).ToString());</span><br><span class="line">        </span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-具体算法实现部分"><a href="#4-具体算法实现部分" class="headerlink" title="4.具体算法实现部分"></a>4.具体算法实现部分</h4><p>具体实现算法，同时添加过程打印以便分析。</p><h2 id="一-冒泡排序"><a href="#一-冒泡排序" class="headerlink" title="一. 冒泡排序"></a>一. 冒泡排序</h2><h3 id="1-1原理"><a href="#1-1原理" class="headerlink" title="1.1原理"></a>1.1原理</h3><p> <a href="https://baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/4602306?fr=aladdin" target="_blank" rel="noopener">冒泡排序</a> （Bubble Sort）算法的原理如下:</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h3 id="1-2具体代码实现"><a href="#1-2具体代码实现" class="headerlink" title="1.2具体代码实现"></a>1.2具体代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class BubbleSortMethod : SortBaseClass</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> override IList&lt;<span class="keyword">int</span>&gt; <span class="title">Sort</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, out <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        IList&lt;<span class="keyword">int</span>&gt; resultlist = sourcelist;</span><br><span class="line">        countnum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="keyword">int</span>.MinValue;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sourcelist.Count - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">   <span class="comment">//最后一个数最大，所以后面的数不必再次比较 -i</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sourcelist.Count - <span class="number">1</span> - i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (resultlist[j] &gt; resultlist[j + <span class="number">1</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    temp = resultlist[j + <span class="number">1</span>];</span><br><span class="line">                    resultlist[j + <span class="number">1</span>] = resultlist[j];</span><br><span class="line">                    resultlist[j] = temp;</span><br><span class="line"></span><br><span class="line">                    ConsoleOutProcess(resultlist, j, j + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                countnum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultlist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　同时修改main函数的算法为具体的： ISortMethod sort = new BubbleSortMethod();</p><p>　　执行结果为：</p><p><img src="/contentimg/2/1.png" alt="Result pic 1" title="冒泡排序"></p><h2 id="二-选择排序"><a href="#二-选择排序" class="headerlink" title="二.选择排序"></a>二.选择排序</h2><h3 id="2-1原理"><a href="#2-1原理" class="headerlink" title="2.1原理"></a>2.1原理</h3><p> <a href="https://baike.baidu.com/item/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/9762418?fr=aladdin" target="_blank" rel="noopener">选择排序</a> （Selection sort）算法的原理如下：</p><p>　每一次从待排序的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0" target="_blank" rel="noopener">数据元素</a> 中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。</p><h3 id="2-2具体代码实现"><a href="#2-2具体代码实现" class="headerlink" title="2.2具体代码实现"></a>2.2具体代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public class SelectionSortMethod : SortBaseClass</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> override IList&lt;<span class="keyword">int</span>&gt; <span class="title">Sort</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, out <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        IList&lt;<span class="keyword">int</span>&gt; resultlist = sourcelist;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp, pos = <span class="number">0</span>;</span><br><span class="line">        countnum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sourcelist.Count - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            pos = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; sourcelist.Count; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (resultlist[j] &lt; resultlist[pos])</span><br><span class="line">                &#123;</span><br><span class="line">                    pos = j;</span><br><span class="line">                &#125;</span><br><span class="line">                countnum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pos == i) <span class="keyword">continue</span>;</span><br><span class="line">            temp = resultlist[i];</span><br><span class="line">            resultlist[i] = resultlist[pos];</span><br><span class="line">            resultlist[pos] = temp;</span><br><span class="line">            ConsoleOutProcess(resultlist, i, pos);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultlist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　同时修改main函数的算法为具体的： ISortMethod sort = new SelectionSortMethod();</p><p>　　执行结果为：</p><p><img src="/contentimg/2/2.png" alt="Result pic 2" title="选择排序"></p><h2 id="三-插入排序"><a href="#三-插入排序" class="headerlink" title="三. 插入排序"></a>三. 插入排序</h2><h3 id="3-1原理"><a href="#3-1原理" class="headerlink" title="3.1原理"></a>3.1原理</h3><p> <a href="https://www.douban.com/note/396407547/" target="_blank" rel="noopener">插入排序</a> （Insert Sort）算法的原理如下:</p><p>　插入即表示将一个新的数据插入到一个有序数组中，并继续保持有序。例如有一个长度为N的无序数组，进行N-1次的插入即能完成排序。<br>　第一次，数组第1个数认为是有序的数组，将数组第二个元素插入仅有1个有序的数组中；<br>　第二次，数组前两个元素组成有序的数组，将数组第三个元素插入由两个元素构成的有序数组中…..<br>　第N-1次，数组前N-1个元素组成有序的数组，将数组的第N个元素插入由N-1个元素构成的有序数组中，则完成了整个插入排序。<br>　….<br>　按序比较直到集合排序完毕。</p><h3 id="3-2具体代码实现"><a href="#3-2具体代码实现" class="headerlink" title="3.2具体代码实现"></a>3.2具体代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class NormalInsertSortMethod : SortBaseClass</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> override IList&lt;<span class="keyword">int</span>&gt; <span class="title">Sort</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, out <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        IList&lt;<span class="keyword">int</span>&gt; resultlist = sourcelist;</span><br><span class="line">        countnum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> key = <span class="keyword">int</span>.MinValue;</span><br><span class="line">        <span class="keyword">int</span> i, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; sourcelist.Count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            key = resultlist[j];</span><br><span class="line">            i = j - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组往后面退1位</span></span><br><span class="line">            <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; resultlist[i] &gt; key)</span><br><span class="line">            &#123;</span><br><span class="line">                countnum++;</span><br><span class="line">                resultlist[i + <span class="number">1</span>] = resultlist[i];</span><br><span class="line">                i -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//过滤两个相同大小的数的左右交换</span></span><br><span class="line">            <span class="keyword">if</span> (resultlist[i + <span class="number">1</span>] == key) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入有序的位置（后面的都比这个数大）</span></span><br><span class="line">            resultlist[i + <span class="number">1</span>] = key;</span><br><span class="line">            ConsoleOutProcess(resultlist, -<span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultlist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　同时修改main函数的算法为具体的： ISortMethod sort = new NormalInsertSortMethod();</p><p>　　执行结果为：</p><p><img src="/contentimg/2/3.png" alt="Result pic 3" title="插入排序"></p><h2 id="四-堆排序"><a href="#四-堆排序" class="headerlink" title="四. 堆排序"></a>四. 堆排序</h2><h3 id="4-1原理"><a href="#4-1原理" class="headerlink" title="4.1原理"></a>4.1原理</h3><p> <a href="https://www.cnblogs.com/0zcl/p/6737944.html" target="_blank" rel="noopener">堆排序</a> （Heap Sort）算法的原理如下:</p><p>　利用二叉树的特性，将剩余数组中的最大值（或最小值）排到开头处。然后去掉该值（提取到新数组开头数值）再次排序得到最值排去新数组那边开头，依次重复操作就能得到结果。<br>　这里用到的 <a href="https://www.jianshu.com/p/106fdd9976a8" target="_blank" rel="noopener">二叉树的特性</a> 是节点i的左子节点为2i，右子节点为2i+1.<br>　结合集合的话-1。集合(n = i-1)（i&gt;0,集合第一个序号为0，故需要-1）,序号(n)的左子节点为序号(2n+1)，右子节点为序号(2n+2)。<br>　int child = 2 * parentid + 1;就是这里的特性使用。<br>　引用 <a href="https://www.cnblogs.com/0zcl/p/6737944.html" target="_blank" rel="noopener">链接</a> 中这个图比较直观。</p><p> <img src="/contentimg/2/4.1.png" alt="Result pic 4" title="堆排序图解"></p><p> 在下面的代码中是这样的：</p><p> <img src="/contentimg/2/4.2.png" alt="Result pic 5" title="堆排序实例"></p><h3 id="4-2具体代码实现"><a href="#4-2具体代码实现" class="headerlink" title="4.2具体代码实现"></a>4.2具体代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">public class HeapSortMethod : SortBaseClass</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//从parentid往下面排到length位</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">HeapAdjust</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, <span class="keyword">int</span> parentid, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> countnum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = sourcelist[parentid];</span><br><span class="line">        <span class="comment">//左子节点</span></span><br><span class="line">        <span class="keyword">int</span> child = <span class="number">2</span> * parentid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (child &lt; length)</span><br><span class="line">        &#123;</span><br><span class="line">            countnum++;</span><br><span class="line">            <span class="comment">//取 左右 子节点中的较大值</span></span><br><span class="line">            <span class="keyword">if</span> (child + <span class="number">1</span> &lt; length &amp;&amp; sourcelist[child] &lt; sourcelist[child + <span class="number">1</span>])</span><br><span class="line">                child++;</span><br><span class="line">            <span class="comment">//与父节点比较，大于父节点就得交换，否则继续下个循环</span></span><br><span class="line">            <span class="keyword">if</span> (temp &gt;= sourcelist[child])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            sourcelist[parentid] = sourcelist[child];</span><br><span class="line">            ConsoleOutProcess(sourcelist, parentid, child);</span><br><span class="line">            parentid = child;</span><br><span class="line">            child = <span class="number">2</span> * parentid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查是否进行过交换，并将缓存中的值赋回去</span></span><br><span class="line">        <span class="keyword">if</span> (sourcelist[parentid] != temp)</span><br><span class="line">        &#123;</span><br><span class="line">            countnum++;</span><br><span class="line">            sourcelist[parentid] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        ConsoleOutProcess(sourcelist, -<span class="number">1</span>, parentid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> countnum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> IList&lt;<span class="keyword">int</span>&gt; <span class="title">HeapSort</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, <span class="keyword">int</span> top, out <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        IList&lt;<span class="keyword">int</span>&gt; topNode = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        countnum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//第一遍，取出最大值，排到第一个(从倒数第二层左子节点开始排)</span></span><br><span class="line">        <span class="comment">//i--循环到顶0，排出最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = sourcelist.Count / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            countnum += HeapAdjust(sourcelist, i, sourcelist.Count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//主要排序过程(从最上面到最下面)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = sourcelist.Count - <span class="number">1</span>; i &gt; sourcelist.Count - top; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将第一个与最后一个交换位置（最大值装入末尾）</span></span><br><span class="line">            <span class="keyword">int</span> temp = sourcelist[<span class="number">0</span>];</span><br><span class="line">            sourcelist[<span class="number">0</span>] = sourcelist[i];</span><br><span class="line">            sourcelist[i] = temp;</span><br><span class="line">            ConsoleOutProcess(sourcelist, <span class="number">0</span>, i);</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            countnum++;</span><br><span class="line">            <span class="comment">//i，最后一个，是当前最大值</span></span><br><span class="line">            <span class="comment">//topNode 大根堆</span></span><br><span class="line">            topNode.Add(temp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将去掉最后一个值的集合重新排</span></span><br><span class="line">            countnum += HeapAdjust(sourcelist, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//topNode 大根堆</span></span><br><span class="line">        <span class="comment">//sourcelist 小根堆</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sourcelist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> override IList&lt;<span class="keyword">int</span>&gt; <span class="title">Sort</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, out <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        IList&lt;<span class="keyword">int</span>&gt; resultlist = sourcelist;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> HeapSort(sourcelist, sourcelist.Count, out countnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　同时修改main函数的算法为具体的： ISortMethod sort = new HeapSortMethod();</p><p>　　执行结果为：</p><p><img src="/contentimg/2/4.3.png" alt="Result pic 6" title="堆排序"></p><h2 id="五-归并排序"><a href="#五-归并排序" class="headerlink" title="五. 归并排序"></a>五. 归并排序</h2><h3 id="5-1原理"><a href="#5-1原理" class="headerlink" title="5.1原理"></a>5.1原理</h3><p> <a href="https://baike.baidu.com/item/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/1639015?fr=aladdin" target="_blank" rel="noopener">归并排序</a> （Merge Sort）算法的原理如下:</p><p>　假设序列共有n个元素，将序列每相邻两个数字进行归并操作（merge)，形成floor(n/2)个序列，排序后每个序列包含两个元素。将上述序列再次归并，形成floor(n/4)个序列，每个序列包含四个元素…重复归并，直到所有元素排序完毕。<br>　引用 <a href="https://www.cnblogs.com/chengxiao/p/6194356.html" target="_blank" rel="noopener">链接</a> 中这个图比较直观。</p><p> <img src="/contentimg/2/5.1.png" alt="Result pic 7" title="归并排序图解"></p><h3 id="5-2具体代码实现"><a href="#5-2具体代码实现" class="headerlink" title="5.2具体代码实现"></a>5.2具体代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public class MergeSortMethod : SortBaseClass</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> override IList&lt;<span class="keyword">int</span>&gt; <span class="title">Sort</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, out <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        IList&lt;<span class="keyword">int</span>&gt; resultlist = sourcelist;</span><br><span class="line">        countnum = <span class="number">0</span>;</span><br><span class="line">        DivSort(resultlist, <span class="number">0</span>, resultlist.Count - <span class="number">1</span>, ref countnum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultlist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对折拆分左右两组</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DivSort</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, <span class="keyword">int</span> leftid, <span class="keyword">int</span> rightid, ref <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (leftid &lt; rightid)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> midid = (leftid + rightid) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//前1/2</span></span><br><span class="line">            DivSort(sourcelist, leftid, midid, ref countnum);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//后1/2</span></span><br><span class="line">            DivSort(sourcelist, midid + <span class="number">1</span>, rightid, ref countnum);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//比较排序(拆分到最后要进行的比较和合并)</span></span><br><span class="line">            Merge(sourcelist, leftid, midid, rightid, ref countnum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左右坐标相等，或者左边大于右边(midid + 1)，相当于拆到最后一个，进入下一步Merge</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主要排序操作</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Merge</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, <span class="keyword">int</span> leftid, <span class="keyword">int</span> midid, <span class="keyword">int</span> rightid, ref <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        IList&lt;<span class="keyword">int</span>&gt; temp = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = leftid;</span><br><span class="line">        <span class="keyword">int</span> j = midid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= midid &amp;&amp; j &lt;= rightid)</span><br><span class="line">        &#123;</span><br><span class="line">            countnum++;</span><br><span class="line">            <span class="comment">//取最小值存入缓存</span></span><br><span class="line">            <span class="keyword">if</span> (sourcelist[i] &lt;= sourcelist[j])</span><br><span class="line">                temp.Add(sourcelist[i++]);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                temp.Add(sourcelist[j++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//两种情况只会存在一种：左(/右)边还有值</span></span><br><span class="line">        <span class="comment">//左边</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt;= rightid)</span><br><span class="line">        &#123;</span><br><span class="line">            countnum++;</span><br><span class="line">            temp.Add(sourcelist[j++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右边</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= midid)</span><br><span class="line">        &#123;</span><br><span class="line">            countnum++;</span><br><span class="line">            temp.Add(sourcelist[i++]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        foreach (<span class="keyword">var</span> item in temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//leftid~midid~rightid区间为已排序，其他部分未排序</span></span><br><span class="line">            <span class="keyword">if</span> (leftid &gt; rightid) <span class="keyword">break</span>;</span><br><span class="line">            sourcelist[leftid++] = item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ConsoleOutProcess(temp, -<span class="number">1</span>, temp.Count);</span><br><span class="line">        Console.WriteLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　同时修改main函数的算法为具体的： ISortMethod sort = new MergeSortMethod();</p><p>　　执行结果为：</p><p><img src="/contentimg/2/5.2.png" alt="Result pic 8" title="归并排序"></p><h2 id="六-快速排序"><a href="#六-快速排序" class="headerlink" title="六. 快速排序"></a>六. 快速排序</h2><h3 id="6-1原理"><a href="#6-1原理" class="headerlink" title="6.1原理"></a>6.1原理</h3><p> <a href="https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/369842?fromtitle=%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F&amp;fromid=2084344&amp;fr=aladdin" target="_blank" rel="noopener">快速排序</a> （Quick Sort）算法的原理如下:</p><p>　假设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面：</p><ol><li>设置两个变量i、j，排序开始的时候：i=0，j=N-1；</li><li>以第一个数组元素作为关键数据，赋值给<strong>key</strong>，即<strong>key</strong>=A[0]；</li><li>从j开始向前搜索，即由后开始向前搜索(j–)，找到第一个小于<strong>key</strong>的值A[j]，将A[j]和A[i]互换；</li><li>从i开始向后搜索，即由前开始向后搜索(i++)，找到第一个大于<strong>key</strong>的A[i]，将A[i]和A[j]互换；</li><li>重复第3、4步，直到i=j； (3,4步中，没找到符合条件的值，即3中A[j]不小于<strong>key</strong>,4中A[i]不大于<strong>key</strong>的时候改变j、i的值，使得j=j-1，i=i+1，直至找到为止。找到符合条件的值，进行交换的时候i， j指针位置不变。另外，i==j这一过程一定正好是i+或j-完成的时候，此时令循环结束）。</li></ol><p>　引用 <a href="http://blog.51cto.com/ahalei/1365285" target="_blank" rel="noopener">链接</a> 中这个图比较直观。</p><p> <img src="/contentimg/2/6.1.png" alt="Result pic 9" title="快速排序图解"></p><h3 id="6-2具体代码实现"><a href="#6-2具体代码实现" class="headerlink" title="6.2具体代码实现"></a>6.2具体代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class QuickSortMethod : SortBaseClass</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> override IList&lt;<span class="keyword">int</span>&gt; <span class="title">Sort</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, out <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        IList&lt;<span class="keyword">int</span>&gt; resultlist = sourcelist;</span><br><span class="line">        countnum = <span class="number">0</span>;</span><br><span class="line">        QuickSort(resultlist, <span class="number">0</span>, resultlist.Count - <span class="number">1</span>,ref countnum);</span><br><span class="line">        <span class="keyword">return</span> resultlist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">SortUnit</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, <span class="keyword">int</span> leftid, <span class="keyword">int</span> rightid, ref <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key = sourcelist[leftid];</span><br><span class="line">        <span class="keyword">int</span> tempid = leftid;</span><br><span class="line">        <span class="keyword">while</span> (leftid &lt; rightid)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (sourcelist[rightid] &gt;= key &amp;&amp; rightid &gt; leftid)</span><br><span class="line">            &#123;</span><br><span class="line">                countnum++;</span><br><span class="line">                --rightid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sourcelist[leftid] = sourcelist[rightid];</span><br><span class="line">            ConsoleOutProcess(sourcelist, leftid, rightid);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (sourcelist[leftid] &lt;= key &amp;&amp; rightid &gt; leftid)</span><br><span class="line">            &#123;</span><br><span class="line">                countnum++;</span><br><span class="line">                ++leftid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sourcelist[rightid] = sourcelist[leftid];</span><br><span class="line">            ConsoleOutProcess(sourcelist, rightid,leftid);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sourcelist[leftid] = key;</span><br><span class="line">        ConsoleOutProcess(sourcelist, tempid, leftid);</span><br><span class="line">        <span class="keyword">return</span> rightid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, <span class="keyword">int</span> leftid, <span class="keyword">int</span> rightid, ref <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (leftid &gt;= rightid) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> indexid = SortUnit(sourcelist, leftid, rightid, ref countnum);</span><br><span class="line">        QuickSort(sourcelist, leftid, indexid - <span class="number">1</span>,ref countnum);</span><br><span class="line">        QuickSort(sourcelist, indexid + <span class="number">1</span>, rightid, ref countnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　同时修改main函数的算法为具体的： ISortMethod sort = new QuickSortMethod();</p><p>　　执行结果为：</p><p><img src="/contentimg/2/6.2.png" alt="Result pic 10" title="快速排序"></p><h2 id="七-希尔排序"><a href="#七-希尔排序" class="headerlink" title="七. 希尔排序"></a>七. 希尔排序</h2><h3 id="7-1原理"><a href="#7-1原理" class="headerlink" title="7.1原理"></a>7.1原理</h3><p> <a href="https://baike.baidu.com/item/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/3229428?fr=aladdin" target="_blank" rel="noopener">希尔排序</a> （Shell’s Sort）算法是直接插入排序算法的一种更高效的改进版本：</p><p>　假设要排序的数组是A[0]……A[N-1]，首先任意选取一个数据（通常选用数组的第一个数）作为关键数据，然后将所有比它小的数都放到它前面，所有比它大的数都放到它后面：</p><p>　先取一个小于n的整数增量（一般取n/2）d1，把数组中下标间隔d1的作为一组进行组内排序；然后取第二个增量d2（d1/2）重复操作，直到增量 = 1。</p><p>　引用 <a href="https://www.cnblogs.com/chengxiao/p/6104371.html" target="_blank" rel="noopener">链接</a> 中这个图比较直观。</p><p> <img src="/contentimg/2/7.1.png" alt="Result pic 11" title="希尔排序图解"></p><h3 id="7-2具体代码实现"><a href="#7-2具体代码实现" class="headerlink" title="7.2具体代码实现"></a>7.2具体代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class ShellsSortMethod : SortBaseClass</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> override IList&lt;<span class="keyword">int</span>&gt; <span class="title">Sort</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, out <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        IList&lt;<span class="keyword">int</span>&gt; resultlist = sourcelist;</span><br><span class="line">        countnum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i, j, flag, tmp, gap = sourcelist.Count;</span><br><span class="line">        <span class="keyword">while</span> (gap &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            gap = gap / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sourcelist.Count - gap; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    countnum++;</span><br><span class="line">                    j = i + gap;</span><br><span class="line">                    <span class="keyword">if</span> (sourcelist[i] &gt; sourcelist[j])</span><br><span class="line">                    &#123;</span><br><span class="line">                        tmp = sourcelist[i];</span><br><span class="line">                        sourcelist[i] = sourcelist[j];</span><br><span class="line">                        sourcelist[j] = tmp;</span><br><span class="line">                        flag = <span class="number">1</span>;</span><br><span class="line">                        ConsoleOutProcess(resultlist, j, i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最后间隔为1时需要多次微调排序</span></span><br><span class="line">            <span class="keyword">while</span> (gap == <span class="number">1</span> &amp;&amp; flag != <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultlist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　同时修改main函数的算法为具体的： ISortMethod sort = new ShellsSortMethod();</p><p>　　执行结果为：</p><p><img src="/contentimg/2/7.2.png" alt="Result pic 12" title="希尔排序"></p><h2 id="八-基数排序"><a href="#八-基数排序" class="headerlink" title="八. 基数排序"></a>八. 基数排序</h2><h3 id="8-1原理"><a href="#8-1原理" class="headerlink" title="8.1原理"></a>8.1原理</h3><p> <a href="https://www.cnblogs.com/dwj411024/p/5978821.html" target="_blank" rel="noopener">基数排序</a> （Radix Sort）算法的原理如下：</p><p>　基数排序是一种借助多关键字排序的思想对单逻辑关键字进行排序的方法。它是一种稳定的排序算法。多关键字排序中有两种方法：最高位优先法(MSD)和最低位优先法（LSD）。通常用于对数的排序选择的是最低位优先法，即先对最次位关键字进行排序，再对高一位的关键字进行排序，以此类推。</p><p>　引用 <a href="https://www.cnblogs.com/dwj411024/p/5978821.html" target="_blank" rel="noopener">链接</a> 中这个图比较直观。</p><p> <img src="/contentimg/2/8.1.png" alt="Result pic 11" title="基数排序图解"></p><h3 id="8-2具体代码实现"><a href="#8-2具体代码实现" class="headerlink" title="8.2具体代码实现"></a>8.2具体代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class RadixSortMethod : SortBaseClass</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> override IList&lt;<span class="keyword">int</span>&gt; <span class="title">Sort</span><span class="params">(IList&lt;<span class="keyword">int</span>&gt; sourcelist, out <span class="keyword">int</span> countnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        countnum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = sourcelist[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//找到最大的数字</span></span><br><span class="line">        foreach (<span class="keyword">var</span> item in sourcelist)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (item &gt; max) max = item;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分析出有多少位数</span></span><br><span class="line">        <span class="keyword">int</span> digit = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (max / <span class="number">10</span> != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            digit++;</span><br><span class="line">            max /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digit; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span>[] indexCounter = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">            IList&lt;<span class="keyword">int</span>&gt; tempList = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            foreach (<span class="keyword">var</span> item in sourcelist)</span><br><span class="line">            &#123;</span><br><span class="line">                tempList.Add(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//排桶</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j&lt; sourcelist.Count; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> number = (sourcelist[j] % Convert.ToInt32(Math.Pow(<span class="number">10</span>, i + <span class="number">1</span>))) / Convert.ToInt32(Math.Pow(<span class="number">10</span>, i));  <span class="comment">//得出i+1位上的数</span></span><br><span class="line">                indexCounter[number]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span>[] indexBegin = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="comment">//统计数量分布,例如3，前面有多少个数，就+1放在第几位</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; <span class="number">10</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                indexBegin[k] = indexBegin[k - <span class="number">1</span>] + indexCounter[k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; sourcelist.Count; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> number = (sourcelist[k] % Convert.ToInt32(Math.Pow(<span class="number">10</span>, i + <span class="number">1</span>))) / Convert.ToInt32(Math.Pow(<span class="number">10</span>, i));</span><br><span class="line">                <span class="comment">//indexBegin[number]++ 指出该数字该排的序号</span></span><br><span class="line">                tempList[indexBegin[number]++] = sourcelist[k];</span><br><span class="line">            &#125;</span><br><span class="line">            sourcelist = tempList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sourcelist;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　同时修改main函数的算法为具体的： ISortMethod sort = new RadixSortMethod();</p><p>　　执行结果为：</p><p><img src="/contentimg/2/8.2.png" alt="Result pic 12" title="基数排序"></p><p>　　该算法以空间换时间，不用进行数学上的比较就能进行排序。与前面几种算法有一定的区别。</p><p> 本文测试程序工程可以从git直接获取：</p><p> git代码库: <a href="https://github.com/YaojiaxinPC/hexoblog/tree/master/SortDemo" target="_blank" rel="noopener">Codes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录算法中入门级别的8种简单排序算法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;冒泡排序　　2.  选择排序　　3.  插入排序　　4.  堆排序&lt;br&gt;　　5.  归并排序　　6.  快速排序　　7.  希尔排序　　8.  基数排序
    
    </summary>
    
      <category term="算法" scheme="http://yaojx.net/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C#" scheme="http://yaojx.net/tags/C/"/>
    
      <category term="数据结构" scheme="http://yaojx.net/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yaojx.net/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>单例模式_静态构造函数实现和IoDH实现</title>
    <link href="http://yaojx.net/2018/10/12/1IoDHSingleton/"/>
    <id>http://yaojx.net/2018/10/12/1IoDHSingleton/</id>
    <published>2018-10-12T14:55:58.000Z</published>
    <updated>2018-10-18T01:57:41.712Z</updated>
    
    <content type="html"><![CDATA[<p>　　单例模式，简单字面意思就是整个程序中只进行一次初始化的操作。相对于静态类，单例模式能做到延迟加载，以及类继承。本文记录“静态构造函数下的单例模式”，以及介绍“Initialization Demand Holder(IoDH)”模式实现。该示例使用VS2017以及C#进行编程。<br><a id="more"></a></p><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h2><p>　　单例模式，是编程中使用频率相当高的一种最简单的设计模式。可以简单理解为静态类的设计模式化。为什么会区别于静态类？</p><p>　　静态类，一般用于“工具类”。在数据库连接等等场景下需要多线程的就不能使用静态类，其他应用于单线程下的操作，如文件读取，一般使用静态类。在软件优化中，第一个问题是初始化：静态类，会在程序启动的时候就会初始化，然后全局生存到进程结束。真有这个必要吗？我们打开程序时，一般先是登陆窗口，如果这个时候，一堆静态工具类也要加载初始化，那不就要等好久，还特占内存。</p><p>　　所以在这个情况下产生了能做到延迟加载的单例模式，当然，它还能进行类继承等等其他解耦操作（不过该部分涉及到其他涉及模式，本文不深入讨论）。</p><h2 id="二-代码记录"><a href="#二-代码记录" class="headerlink" title="二.代码记录"></a>二.代码记录</h2><h3 id="2-1-静态构造函数实现单例模式"><a href="#2-1-静态构造函数实现单例模式" class="headerlink" title="2.1 静态构造函数实现单例模式"></a>2.1 静态构造函数实现单例模式</h3><h4 id="2-1-1-静态类何时初始化"><a href="#2-1-1-静态类何时初始化" class="headerlink" title="2.1.1 静态类何时初始化"></a>2.1.1 静态类何时初始化</h4><p>　　这里我们直接上代码，根据结果进行记录：</p><p>　　字段x初始化会在构造函数前面先执行。（重点。后面单例模式里面执行代码和想象中不同，考虑是这个原因。）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#if step1</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> string x = EchoAndReturn(<span class="string">"A_In type initializer"</span>);</span><br><span class="line"></span><br><span class="line">#if step1needstatic</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">/// 当没有写静态构造函数时，框架会自动生成</span></span><br><span class="line">        <span class="comment">/// 导致静态字段的初始化跑到了静态方法调用之前</span></span><br><span class="line">        <span class="comment">/// 造成对象的提前初始化</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">SingletonTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            x = <span class="string">"A_static init"</span>;</span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SingletonTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            x = <span class="string">"A_nonstatic init"</span>;</span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> string <span class="title">EchoAndReturn</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>　　对应main函数如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#if step1</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">(string[] args)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Starting Main"</span>);</span><br><span class="line">            <span class="comment">//使用静态类</span></span><br><span class="line">            SingletonTest.EchoAndReturn(<span class="string">"Echo!"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"After echo"</span>);</span><br><span class="line">            <span class="comment">//取出静态类中的静态成员x</span></span><br><span class="line">            string y = SingletonTest.x;</span><br><span class="line">            <span class="keyword">if</span> (!string.IsNullOrEmpty(y))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(y);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p><img src="/contentimg/1/1.png" alt="Result pic 1" title="2.1.1.1执行情况"></p><p>　　根据main函数代码，直觉上，应该先输出“Starting Main”，然后输出“Echo!”，最后输出”After echo”和SingletonTest.x。总共4个输出。</p><p>　　但是实际：</p><p>　　1.程序运行–》2.执行main函数–》3.使用到静态SingletonTest–》4.静态字段x的初始化–》5.静态构造函数的初始化–》6.静态函数EchoAndReturn的使用<br>　　–》字段x的值由于执行顺序，不是默认赋值的”A_In type initializer”，而是静态构造函数中赋值的“A_static”;</p><p>　　如果这里不加静态构造函数？</p><p><img src="/contentimg/1/2.png" alt="Result pic 2" title="2.1.1.2执行情况"></p><p>　　1.程序运行–》2.静态类型的初始化，静态SingletonTest、字段x提前初始化–》3.执行main函数。</p><p>　　这里在文末的博文中提到是：</p><blockquote><p>　　在类中实现静态构造函数，那beforefieldinit属性就会被precise属性替换，确保静态成员会在类第一次使用之前的那一刻进行初始化。如果不显式实现，静态成员会在类第一次使用之前的任何时间初始化（由CLR智能决定）。</p></blockquote><p>　　比较得出：</p><blockquote><p>　　<strong><em>显式静态构造函数使对象在被调用的时候才初始化，避免了static类型在程序启动的时候就提前初始化的问题。有利于程序的快速启动与内存的控制。</em></strong></p></blockquote><h4 id="2-1-2-简单静态类单例模式实现"><a href="#2-1-2-简单静态类单例模式实现" class="headerlink" title="2.1.2 简单静态类单例模式实现"></a>2.1.2 简单静态类单例模式实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> readonly SingletonTest _instance = <span class="keyword">new</span> SingletonTest();</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">SingletonTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonTest Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>将构造函数private；</li><li>显式实现static构造函数；</li><li>创建私有静态实例_instance并初始化；</li><li>public开放实例对外访问接口 Instance 属性。</li></ol><p>这样避免了静态类型的提前初始化，同时直接在初始化时候赋值的方式也避免了需要加锁的问题。</p><h4 id="2-1-3-单例模式执行顺序"><a href="#2-1-3-单例模式执行顺序" class="headerlink" title="2.1.3 单例模式执行顺序"></a>2.1.3 单例模式执行顺序</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    #if step21</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> readonly SingletonTest _instance = <span class="keyword">new</span> SingletonTest();</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">SingletonTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            x = <span class="string">"static init console"</span>;</span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            x = <span class="string">"nonstatic init console"</span>;</span><br><span class="line">            Console.WriteLine(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> SingletonTest Instance</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"Instance"</span>);</span><br><span class="line">                <span class="keyword">return</span> _instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//测试静态字段，对执行顺序无影响，实际使用应该为非static，同时操作应该通过XX，不能直接操作本字段</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> string x = <span class="string">"xxxx"</span>;</span><br><span class="line">        <span class="keyword">public</span> string XX</span><br><span class="line">        &#123;</span><br><span class="line">            get &#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">            <span class="keyword">private</span> set &#123; x = value; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>　　main函数中输出 Console.WriteLine( SingletonTest.Instance.XX);<br>　　执行结果：</p><p><img src="/contentimg/1/3.png" alt="Result pic 3" title="2.1.3执行情况"></p><p>　　1.程序启动–》2.遇到类SingletonTest–》3.优先初始化static属性_instance–》4._instance=new SingletonTest()进行实例化–》5.完成static属性的初始化后进行static构造函数的初始化–》6.调用SingletonTest.Instance–》7.获取结果XX得”static init”<br>　　–》注意这里不是先static init，然后才nonstatic init。因为属性的初始化优先于static构造函数。所以最后的结果是静态构造函数得执行顺序在nonstatic的后面。</p><h4 id="2-1-4-继承问题"><a href="#2-1-4-继承问题" class="headerlink" title="2.1.4 继承问题"></a>2.1.4 继承问题</h4><p>　　这里题外话记录一下继承时的表现，进一步展示函数执行顺序：</p><p>　　增加子类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class SingletonTest_inherit : SingletonTest</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">SingletonTest_inherit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = <span class="string">"B_static"</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">"B_static init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingletonTest_inherit</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = <span class="string">"B_nonstatic"</span>;</span><br><span class="line">        Console.WriteLine(<span class="string">"B_nonstatic init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　执行结果：</p><p><img src="/contentimg/1/4.png" alt="Result pic 4" title="2.1.4.1执行情况"></p><p>　　子对象的静态构造函数没有执行。</p><p>　　如果这里增加实例化？</p><p><img src="/contentimg/1/5.png" alt="Result pic 5" title="2.1.4.2执行情况"></p><p>　　1.父类型字段x初始化–》2.父类型static构造函数执行–》3.子类型static构造函数执行–》4.父类型构造函数执行–》5.子类型构造函数执行<br>　　–》这里父类型和子类型共用同一个字段x，导致字段x的赋值被子类型重写。</p><p><img src="/contentimg/1/6.png" alt="Result pic 6" title="2.1.4.3执行情况"></p><h3 id="2-2-IoDH实现"><a href="#2-2-IoDH实现" class="headerlink" title="2.2 IoDH实现"></a>2.2 IoDH实现</h3><h4 id="2-2-1-单例模式实现"><a href="#2-2-1-单例模式实现" class="headerlink" title="2.2.1 单例模式实现"></a>2.2.1 单例模式实现</h4><p>　　推荐单例模式使用该方式。在类内部定义内部类来实现单例模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerCLass</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">InnerCLass</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">        internal <span class="keyword">static</span> SingletonTest instance = <span class="keyword">new</span> SingletonTest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonTest Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123; <span class="keyword">return</span> InnerCLass.instance; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-单例模式执行顺序"><a href="#2-2-2-单例模式执行顺序" class="headerlink" title="2.2.2 单例模式执行顺序"></a>2.2.2 单例模式执行顺序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerCLass</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="title">InnerCLass</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"InnerCLass static"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        internal <span class="keyword">static</span> SingletonTest instance = <span class="keyword">new</span> SingletonTest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"SingletonTest nonstatic"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonTest Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Instance"</span>);</span><br><span class="line">            <span class="keyword">return</span> InnerCLass.instance; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> string XX = <span class="string">"aaa"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/contentimg/1/7.png" alt="Result pic 7" title="2.2.2执行情况"></p><h2 id="三-相关参考链接"><a href="#三-相关参考链接" class="headerlink" title="三.相关参考链接"></a>三.相关参考链接</h2><p> 主要参考博文: <a href="https://www.cnblogs.com/rush/archive/2011/10/30/2229565.html" target="_blank" rel="noopener">https://www.cnblogs.com/rush/archive/2011/10/30/2229565.html</a></p><p> 提供继承方面的探讨: <a href="https://www.cnblogs.com/jiagoushi/p/3775046.html" target="_blank" rel="noopener">https://www.cnblogs.com/jiagoushi/p/3775046.html</a></p><p> 对第一个博文进行扩展和实践: <a href="https://blog.csdn.net/abc524061/article/details/57086267?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">https://blog.csdn.net/abc524061/article/details/57086267?utm_source=itdadao&amp;utm_medium=referral</a></p><p> 本文测试程序工程可以从git直接获取：</p><p> git代码库: <a href="https://github.com/YaojiaxinPC/hexoblog/tree/master/SingletonTestDemo" target="_blank" rel="noopener">Codes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　单例模式，简单字面意思就是整个程序中只进行一次初始化的操作。相对于静态类，单例模式能做到延迟加载，以及类继承。本文记录“静态构造函数下的单例模式”，以及介绍“Initialization Demand Holder(IoDH)”模式实现。该示例使用VS2017以及C#进行编程。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yaojx.net/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="C#" scheme="http://yaojx.net/tags/C/"/>
    
      <category term="IoDH" scheme="http://yaojx.net/tags/IoDH/"/>
    
  </entry>
  
</feed>
