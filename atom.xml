<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yao&#39;s Blog</title>
  
  <subtitle>Welcome to yao&#39;s blog.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://YaojiaxinPC.github.io/"/>
  <updated>2018-10-25T07:01:26.931Z</updated>
  <id>https://YaojiaxinPC.github.io/</id>
  
  <author>
    <name>姚佳鑫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity异常处理---灯光渲染抛异常</title>
    <link href="https://YaojiaxinPC.github.io/29Unity_error_1/"/>
    <id>https://YaojiaxinPC.github.io/29Unity_error_1/</id>
    <published>2018-10-25T02:07:59.000Z</published>
    <updated>2018-10-25T07:01:26.931Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录怎么处理“Unkown Mixed bake mode in LightModeUtil.MapSettings() UnityEditor.DockArea”异常。</p><p><img src="/contentimg/29/2.png" alt="Result pic 1" title="报错情况"></p><a id="more"></a><p>　　当时是修改灯光渲染的时候抛的异常。没头绪，后来找到一篇<a href="https://blog.csdn.net/yuhan61659/article/details/80337839" rel="external nofollow noopener noreferrer" target="_blank">文章</a> 介绍这个。</p><p><img src="/contentimg/29/1.png" alt="Result pic 1" title="取消勾选"></p><p>　　老版本Unity上没这个问题，我是在2017上遇到的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录怎么处理“Unkown Mixed bake mode in LightModeUtil.MapSettings() UnityEditor.DockArea”异常。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/contentimg/29/2.png&quot; alt=&quot;Result pic 1&quot; title=&quot;报错情况&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="异常处理" scheme="https://YaojiaxinPC.github.io/categories/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    
      <category term="unity" scheme="https://YaojiaxinPC.github.io/tags/unity/"/>
    
      <category term="异常处理" scheme="https://YaojiaxinPC.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>简单算法---求素数</title>
    <link href="https://YaojiaxinPC.github.io/28algorithm_2/"/>
    <id>https://YaojiaxinPC.github.io/28algorithm_2/</id>
    <published>2018-10-24T02:07:59.000Z</published>
    <updated>2018-10-24T17:43:27.034Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文以“判断101-200之间有多少个素数”介绍求素数的7种解法：</p><ol><li>遍历每个值进行相除。</li><li>取开方根，只遍历2~开方根。</li><li>间隔6个数只取2个值计算，结合开方根。</li><li>从头开始，保存每个素数，遍历时只需要判断是否能让集合中的素数整除。</li><li>保存素数，结合开方根优化。</li><li>简单线性筛法。</li><li>优化版线性筛法。</li></ol><a id="more"></a><p>　　该题较简单，但是没想到仔细想的时候发现解法这么多。</p><p>　　首先需要了解什么是素数：只能被1和本身整除的整数，就是素数。</p><h2 id="最基础解法：遍历每个值相除"><a href="#最基础解法：遍历每个值相除" class="headerlink" title="最基础解法：遍历每个值相除"></a>最基础解法：遍历每个值相除</h2><p>　　这是刚接触到题目时，每个人第一个想到的解法：用2~(该数-1)来除，如果都不能整除，这个数就是素数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 简单处理，一个一个数字去除</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">SimpleGetNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = beginnum; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断是否能整除</span></span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断前面的循环是否会提前break，提前break时，j &lt; k ；有break说明能获得整除</span></span><br><span class="line">        <span class="keyword">if</span> (j &gt;= i &amp;&amp; i != <span class="number">0</span> &amp;&amp; i != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            counts++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　但是，这里存在大量多余的判断。</p><h2 id="遍历2-开方根"><a href="#遍历2-开方根" class="headerlink" title="遍历2~开方根"></a>遍历2~开方根</h2><p>　　思想：一个数=前面某个数 X n ，推断出来，肯定存在“某个数” &lt; n，或者 n&lt; “某个数”。这样最极端的情况，就是n=这个“某个数”，得到数 = n<sup>2</sup>；所以我们只需要除前面这n个数，后面的操作都是重复的，就可以不除了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 结合算法思想处理，最多人使用的方式</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">NormalGetNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = beginnum; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k = (<span class="keyword">int</span>)Math.Sqrt(i);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= k; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断是否能整除</span></span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断前面的循环是否会提前break，提前break时，j &lt; k ；有break说明能获得整除</span></span><br><span class="line">        <span class="keyword">if</span> (j &gt;= k &amp;&amp; i != <span class="number">0</span> &amp;&amp; i != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            counts++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="间隔6个数只取2个值计算"><a href="#间隔6个数只取2个值计算" class="headerlink" title="间隔6个数只取2个值计算"></a>间隔6个数只取2个值计算</h2><p>　　该解法是看到这个博客<a href="https://blog.csdn.net/songyunli1111/article/details/78690447" rel="external nofollow noopener noreferrer" target="_blank">判断质数/素数——我知道的最快的方法</a>  才想到的。通过观察，2、3包揽了几乎绝大部分的合数。</p><p>　　所有数可以大致以如下方式表示：</p><table><thead><tr><th>…</th><th>6x,</th><th>6x+1,</th><th>6x+2,</th><th>6x+3,</th><th>6x+4,</th><th>6x+5,</th><th>6x+6</th><th>==&gt;</th></tr></thead><tbody><tr><td>==&gt;</td><td>6(x+1),</td><td>6(x+1)+1,</td><td>6(x+1)+2,</td><td>6(x+1)+3,</td><td>6(x+1)+4,</td><td>6(x+1)+5,</td><td>6(x+1)+6</td><td>…</td></tr></tbody></table><p>　　其中6x, 6x+2, 6x+3, 6x+4都是合数，剩下 6x+1, 6x+5才存在素数的可能性。故实际，每6个数，只需要检查两个数！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 令x≥1，将大于等于5的自然数表示如下：</span></span><br><span class="line"><span class="comment">/// ··· 6x，6x+1，6x+2，6x+3，6x+4，6x+5，6(x+1），6(x+1)+1 ···</span></span><br><span class="line"><span class="comment">/// 故只需要判断6x+1和6x+5两个数，再间隔6个数再次判断</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">SuperNormalGetNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">    bool isnofrime = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = beginnum; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">6</span> != <span class="number">1</span> &amp;&amp; i % <span class="number">6</span> != <span class="number">5</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        isnofrime = <span class="keyword">false</span>;</span><br><span class="line">        k = (<span class="keyword">int</span>)Math.Sqrt(i);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">5</span>; j &lt;= k; j += <span class="number">6</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//判断是否能整除</span></span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span> || i % (j + <span class="number">2</span>) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                isnofrime = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isnofrime)</span><br><span class="line">        &#123;</span><br><span class="line">            counts++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用前面存在的素数来遍历判断"><a href="#用前面存在的素数来遍历判断" class="headerlink" title="用前面存在的素数来遍历判断"></a>用前面存在的素数来遍历判断</h2><p>　　合数能被素数整除，但是素数不能被其他素数整除。所以只需要保存前面获取的素数，后面的数直接除前面这些素数，不能整除，就也是素数！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 从2开始，获取素数，保存起来，给后面的数判断素数，一直判断到最大值。</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">ListGetNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, counts;</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; primelts = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="comment">//加入第一个素数2</span></span><br><span class="line">    primelts.Add(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">3</span>; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; primelts.Count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//能整除，不是素数</span></span><br><span class="line">            <span class="keyword">if</span> (i % primelts[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j == primelts.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                primelts.Add(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; primelts.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (primelts[i] &gt;= beginnum)</span><br><span class="line">        &#123;</span><br><span class="line">            counts++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结合开方根用前面存在的素数来遍历判断"><a href="#结合开方根用前面存在的素数来遍历判断" class="headerlink" title="结合开方根用前面存在的素数来遍历判断"></a>结合开方根用前面存在的素数来遍历判断</h2><p>　　上面的方法同样存在重复判断，实际上当除以的素数大于开方根的时候，后面的素数就更加不可能了，该数直接可以断定是素数了。he = su1 x su2，当su1&lt; sqrt(he)时，su2 &gt; sqrt(he);当su1&gt;sqrt(he)时，su&lt; sqrt(he)，这里就重复了。所以当前面一段找不到结果，后面的肯定也找不到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 从2开始，获取素数，保存起来，给后面的数判断素数，一直判断到最大值。</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">ListGetNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, counts, k;</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; primelts = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="comment">//加入第一个素数2</span></span><br><span class="line">    primelts.Add(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">3</span>; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k = (<span class="keyword">int</span>)Math.Sqrt(i) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; primelts.Count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (primelts[j] &gt; k)</span><br><span class="line">            &#123;</span><br><span class="line">                primelts.Add(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//能整除，不是素数</span></span><br><span class="line">            <span class="keyword">if</span> (i % primelts[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j == primelts.Count - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                primelts.Add(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; primelts.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (primelts[i] &gt;= beginnum)</span><br><span class="line">        &#123;</span><br><span class="line">            counts++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单线性筛法"><a href="#简单线性筛法" class="headerlink" title="简单线性筛法"></a>简单线性筛法</h2><p>　　从头开始，剩下的最小的数肯定是素数，然后根据这个数，翻倍剔除掉剩下集合中的合数；最后转移该素数，继续轮回执行。执行到整个集合为空为止，全部素数已经转移出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 简单线性筛法</span></span><br><span class="line"><span class="comment">/// 从头开始，取到一个素数后，将后面对应该素数的合数全部删掉。</span></span><br><span class="line"><span class="comment">/// 这样每一轮，剩下最小的那个数肯定是素数。</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">FilterNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dictionary&lt;<span class="keyword">int</span>, bool&gt; allnums = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>, bool&gt;();</span><br><span class="line">    <span class="keyword">int</span> mininum = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//按照顺序排放</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = mininum; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        allnums.Add(i, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; primelst = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="keyword">while</span> (allnums.Count &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mininum = allnums.ElementAt(<span class="number">0</span>).Key;</span><br><span class="line">        <span class="comment">//第一个数是最小的，肯定是素数</span></span><br><span class="line">        allnums.Remove(mininum);</span><br><span class="line">        primelst.Add(mininum);</span><br><span class="line">        <span class="comment">//int会溢出，需要设置为double才能防止溢出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mininum; (<span class="keyword">double</span>)i * mininum &lt;= endnum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将该素数对应的合数全部删除</span></span><br><span class="line">            allnums.Remove((<span class="keyword">int</span>)(<span class="keyword">double</span>)i * mininum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; <span class="keyword">true</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (primelst[<span class="number">0</span>] &lt; beginnum) primelst.RemoveAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> primelst.Count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这里可以用递归，但是数字大的时候会内存溢出。所以我取消了递归的方式。同时还得注意int溢出的问题，会出现46957*91467==48623为true的现象。因为int有最大值，超过就会循环取值了，正转负，负转正。</p><h2 id="优化版线性筛法"><a href="#优化版线性筛法" class="headerlink" title="优化版线性筛法"></a>优化版线性筛法</h2><p>　　上面的解法同样存在重复操作。理想情况，一个数只用剔除一次。</p><p>　　该解法是看到这个文章<a href="https://wenku.baidu.com/view/4881881daaea998fcc220e99.html" rel="external nofollow noopener noreferrer" target="_blank">线性筛法求素数的原理与实现</a>  才想到的。</p><p>这里讲解一下：</p><p>　　 合数 = A x B，当A/B又是合数时，重复下去，合数 = …x…x素数 ==&gt; 最大素数 x 第二大素数 x … x 最小素数 </p><p>　　 所以只要我们找到最小素数，把它当做B，而A又唯一（递增的i），该合数就唯一确定了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 改进FilterNum存在重复操作的缺点</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="beginnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="endnum"&gt;&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">SuperFilterNum</span><span class="params">(<span class="keyword">int</span> beginnum, <span class="keyword">int</span> endnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dictionary&lt;<span class="keyword">int</span>, bool&gt; allnums = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>, bool&gt;();</span><br><span class="line">    List&lt;<span class="keyword">int</span>&gt; primelst = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">    <span class="comment">//先将所有数设为素数 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        allnums[i] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= endnum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!allnums[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//false为素数</span></span><br><span class="line">            primelst.Add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// j =0  ==&gt; primelst[0] ==&gt; 2 * i &lt;= endnum 过滤掉后面一半的数, 因为 合数 = A x B ，必定存在 A(或者B) &lt;= 二分之一 ，</span></span><br><span class="line">        <span class="comment">// 所以实际排查前面二分之一的值时 , 后面二分之一的也已经把合数去掉了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; primelst.Count &amp;&amp; primelst[j] * i &lt;= endnum; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 用已获得的素数 x index , 排查出对应唯一确定的合数 </span></span><br><span class="line">            allnums[primelst[j] * i] = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// 重点！通过查找最小素数，防止了重复操作</span></span><br><span class="line">            <span class="comment">// 合数 = A x B，当A/B又是合数时，重复下去，合数 = ...x...x素数 ==&gt; 最大素数 x 第二大素数 x ... x 最小素数 </span></span><br><span class="line">            <span class="comment">// i % primelst[j] 就break，说明已经找到最小素数（j从0开始++）</span></span><br><span class="line">            <span class="comment">// 此时break，合数 = i x 最小素数primelst[j] ，能唯一定位到该合数。不会存在重复定位该合数</span></span><br><span class="line">            <span class="comment">// 举例：合数12 (有两种定位方式)== 4 x 3 ==&gt; 2 x 2 x3</span></span><br><span class="line">            <span class="comment">//                              == 6 x 2 =&gt; 3 x 2 x 2 </span></span><br><span class="line">            <span class="comment">// 实际i=4的时候，定位的是8=4x2就break；不会去定位12=4x3</span></span><br><span class="line">            <span class="comment">// i=6的时候，才定位12；</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">//同理，合数18 == 6x3 ==&gt; 2x3x3</span></span><br><span class="line">            <span class="comment">//             == 9x2 ==&gt; 3x3x2</span></span><br><span class="line">            <span class="comment">//i=6，定位12就break；等到i=9才来定位18</span></span><br><span class="line">            <span class="keyword">if</span> (i % primelst[j] == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (primelst[<span class="number">0</span>] &lt; beginnum)</span><br><span class="line">    &#123;</span><br><span class="line">        primelst.RemoveAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> primelst.Count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　结尾得提一下，上面的算法，三个优化版本，在数据量不大的情况下（十万左右），线性筛选法优势不大，间隔6的那种最快；但是当达到百万以上，线性是最快的！</p><p><img src="/contentimg/28/4.png" alt="Result pic 1" title="3千万"></p><p><img src="/contentimg/28/1.png" alt="Result pic 1" title="3百万"></p><p><img src="/contentimg/28/2.png" alt="Result pic 1" title="3十万"></p><p><img src="/contentimg/28/3.png" alt="Result pic 1" title="3万"></p><p>　　每次运行的时间都会有一点点的区别。注意是毫秒，千分之一秒。所以上面的数据出来是超级快的。</p><p> git代码库: <a href="https://github.com/YaojiaxinPC/hexoblog/tree/master/AlgorithmDemo" rel="external nofollow noopener noreferrer" target="_blank">Codes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文以“判断101-200之间有多少个素数”介绍求素数的7种解法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;遍历每个值进行相除。&lt;/li&gt;
&lt;li&gt;取开方根，只遍历2~开方根。&lt;/li&gt;
&lt;li&gt;间隔6个数只取2个值计算，结合开方根。&lt;/li&gt;
&lt;li&gt;从头开始，保存每个素数，遍历时只需要判断是否能让集合中的素数整除。&lt;/li&gt;
&lt;li&gt;保存素数，结合开方根优化。&lt;/li&gt;
&lt;li&gt;简单线性筛法。&lt;/li&gt;
&lt;li&gt;优化版线性筛法。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="算法" scheme="https://YaojiaxinPC.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C#" scheme="https://YaojiaxinPC.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>http接口调试---天气API获取</title>
    <link href="https://YaojiaxinPC.github.io/27getweatherapi/"/>
    <id>https://YaojiaxinPC.github.io/27getweatherapi/</id>
    <published>2018-10-24T01:20:59.000Z</published>
    <updated>2018-10-24T02:11:54.948Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文通过天气API的获取，记录分享http接口该怎么看文档，怎么调试使用。</p><a id="more"></a><h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><h3 id="国内接口"><a href="#国内接口" class="headerlink" title="国内接口"></a>国内接口</h3><p><a href="http://www.weather.com.cn/" rel="external nofollow noopener noreferrer" target="_blank">中国天气网</a></p><p>　　当然还有其他超级多的接口。具体这里有篇文章也在介绍总结：<a href="https://www.jianshu.com/p/e3e04cf3fc0f" rel="external nofollow noopener noreferrer" target="_blank">免费、稳定的天气预报API</a></p><p>　　这里还得记录一下接口中的地区编号怎么查询。幸好git上有人整理分享了这个：<a href="https://github.com/seeways/PythonDemo/blob/master/other_tools/weather_city.json" rel="external nofollow noopener noreferrer" target="_blank">地区编码整理</a></p><h3 id="国外接口"><a href="#国外接口" class="headerlink" title="国外接口"></a>国外接口</h3><p><a href="https://openweathermap.org/api" rel="external nofollow noopener noreferrer" target="_blank">openweathermap</a></p><p>　　同样得有一个查询地区编号的地方，这个在示例里面有：<a href="http://bulk.openweathermap.org/sample/" rel="external nofollow noopener noreferrer" target="_blank">地区编码查询</a> 。下载下来后，解压用文本格式打开，Ctrl F就能找到想要的地区的编号：</p><p><img src="/contentimg/27/1.png" alt="Result pic 1" title="查找地区编号"></p><h2 id="http接口调试工具—Fiddler"><a href="#http接口调试工具—Fiddler" class="headerlink" title="http接口调试工具—Fiddler"></a>http接口调试工具—Fiddler</h2><p>　　有了接口规范和调试地址，现在就可以开始调试了。下面以Fiddler的调试为例，简单记录怎么看文档，怎么使用该工具获取到数据。</p><h3 id="获取key"><a href="#获取key" class="headerlink" title="获取key"></a>获取key</h3><p>　　api接口使用，大部分是需要先注册账号，购买（有免费的，但是得点击“购买”，以获取key）。绝大部分都会要求key，有的key是附带在get模式下，附带在http连接最后面；有的是post模式下，作为一个key附加。</p><p>　　这个key的作用，就是标记跟踪使用。服务端保存一个key，用户端必须也有对应的key，才给权限操作。</p><p>　　类似使用场景有：用户登录后的定时权限检验（每次登录会刷新key，在这段时间内操作，必须有这个key才有权限操作，通常30s服务端该key会变化，防止用户穿过登录来直接操作），这里为什么不用用户名+密码？因为密码必须要加密，这样每个接口都要进行密码的解密验证，性能消耗大；而用加密后的字符串直接比对的话，存在一种情况，当用户登录后，该连接信息被窃取（网络截获），这样就可以直接跳过登录，使用该字符串当key直接超权限操作了；同时下线长时间离线无操作客户端的功能，也是用到该key，长时间离线下，应该无权限操作，因为key和服务端上的不匹配，必须登录获取最新key才能操作。</p><p>　　下面直接使用国外那个接口的来记录：</p><p>　　注册登录后（这里可能需要VPN），可以去申请自己的key。这里使用默认分配的key来演示。</p><p><img src="/contentimg/27/2.png" alt="Result pic 1" title="找到key"></p><p>　　记录保存该key。然后点击API导航。</p><p><img src="/contentimg/27/3.png" alt="Result pic 1" title="回到API界面"></p><h3 id="看文档"><a href="#看文档" class="headerlink" title="看文档"></a>看文档</h3><p>　　这里我选中Current weather data来记录：</p><p><img src="/contentimg/27/4.png" alt="Result pic 1" title="Current weather data"></p><p>　　文档已经提示了接口格式，但是发现直接这样使用是报错的，提示的401。401错误就是提示未登录，想想前面提到了key，但是这里怎么就没使用？</p><p><img src="/contentimg/27/5.png" alt="Result pic 1" title="接口报错401"></p><p>　　打开一下示例的链接（Example）：</p><p><img src="/contentimg/27/6.png" alt="Result pic 1" title="示例"></p><p>　　发现是需要附带&amp;appid= XXXXX。</p><p>　　这种就是get模式下key的附带方式，放在最后，前提是需要找到这个key对应的“appid”这个字符串是叫什么，不同接口使用的字符串不同。</p><h3 id="使用工具预调试"><a href="#使用工具预调试" class="headerlink" title="使用工具预调试"></a>使用工具预调试</h3><p>　　下面就使用Fiddler来记录，做网页的朋友应该用的较多是postman。</p><p><img src="/contentimg/27/7.png" alt="Result pic 1" title="Fiddler"></p><p>　　该工具作用很大，能捕捉电脑上的全部http通讯。也能作为http调试工具使用。</p><p>　　这里简单介绍作为调试工具使用的记录：</p><p>　　上面分析得到的http链接，其实在空网页上打开已经能获取到data了，但是一般情况会乱码；而且，如果是post模式，就不会直接显示在网页上，找起来很麻烦，所以一般都是直接用调试工具。使用工具，主要原因也是因为这些接口不单单是一个http字符串来的，还是附带好多其他设置项：</p><p>　　这里使用广东省，查上面文档，中间是有空格的，需要转码。</p><p><img src="/contentimg/27/8.png" alt="Result pic 1" title="填入地址"></p><p>　　首先需要知道是get还是post，然后就是HTTP规范1.1。get模式直接复制http串进去就行了，直接回车或者Execute。就可以看到左边的“Result为200”的串，双击就能看到结果了。而post模式下，就需要把附加key全部复制进去下面那个框。</p><p><img src="/contentimg/27/9.png" alt="Result pic 1" title="收到结果"></p><p>　　调试工具已经识别出来返回的是json，自动帮我们解析了，当然也可以看原文本，选择“TextView”。旁边那些Headers等等也有蛮多有用信息可以看的，如果出错的话，就需要关注这些信息了。</p><p>　　http接口，一般要注意编码，还有http串里面一些特殊字符串，http在开发中使用超级多。这里只是简单提及。Fiddler的功能实际也是超级多的，有兴趣的可以多多摸索，该工具免费，同时该工具的同家族中也有个免费的反编译工具，也有收费的界面工具（实际某度可以搜到老版本的破解），做界面的朋友可以关注一下。做客户端的朋友们，可能有人会发现Win10更新到某版本后，IE内核那个dll变化比较大，导致自定义浏览器的一些网页会出问题，Fiddler解决了该问题，目前还没找到Fiddler怎么处理的，只知道打开Fiddler捕捉时，那些网页就正常，关掉后就恢复原来的异常状态了。老外在做浏览器这方面还是很牛逼的，不得不佩服。</p><p>　　结尾附加一下中国天气网的api查询接口示例，不用key：</p><p><img src="/contentimg/27/10.png" alt="Result pic 1" title="中国天气网api查询结果"></p><p>　　后面我再另外设文章分享怎么用C#写http接口服务端，Restful的普通json模式，以及table提交模式。当然还有使用xml格式的soap。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文通过天气API的获取，记录分享http接口该怎么看文档，怎么调试使用。&lt;/p&gt;
    
    </summary>
    
      <category term="联调" scheme="https://YaojiaxinPC.github.io/categories/%E8%81%94%E8%B0%83/"/>
    
    
      <category term="接口调试" scheme="https://YaojiaxinPC.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%B0%83%E8%AF%95/"/>
    
      <category term="API使用" scheme="https://YaojiaxinPC.github.io/tags/API%E4%BD%BF%E7%94%A8/"/>
    
      <category term="http调试" scheme="https://YaojiaxinPC.github.io/tags/http%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Unity优化_WebGL发布优化</title>
    <link href="https://YaojiaxinPC.github.io/26UnitySuper_1/"/>
    <id>https://YaojiaxinPC.github.io/26UnitySuper_1/</id>
    <published>2018-10-23T06:59:59.000Z</published>
    <updated>2018-10-23T16:27:14.685Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文是记录Unity的优化第一篇：WebGL发布优化。</p><p>　　后续将记录其他平台的优化，以及编程中遇到的优化。</p><a id="more"></a><p>　　开头分享几个博客链接：</p><p>来自印度的：<a href="http://www.theappguruz.com/blog/unity-optimization-initiative" rel="external nofollow noopener noreferrer" target="_blank">App Guruz</a> </p><p>Unity社区的两篇文章：</p><p><a href="https://blogs.unity3d.com/cn/2016/09/20/understanding-memory-in-unity-webgl/" rel="external nofollow noopener noreferrer" target="_blank">了解Unity WebGL中的内存</a> </p><p><a href="https://blogs.unity3d.com/cn/2016/12/05/unity-webgl-memory-the-unity-heap/" rel="external nofollow noopener noreferrer" target="_blank">Unity WebGL内存：Unity Heap</a> </p><p>　　本文就不重复博文中的细节了。</p><p>　　Unity发布WebGL版本，限制是很大的，必须事先定义所需内存，一旦决定，就不能减少或者增加！而且包不能太大，下载速度严重影响启动时间。特别是还有部分API限制。总体上，限制因素很多。当然，如果用2018新特性的，就能动态内存及高压缩。不过，目前还是先从普通版本做起。</p><p>　　小游戏是可以发布成WebGL版本的，但是大游戏难度系数很高，特别是画面越精美的。因为要考虑web可以运行在任何低配置的场景，特别是跑在手机32位浏览器。</p><p>　　针对Unity发布WebGL，细节有好多，目前我就按照遇到的问题，从初级开始，一个一个分享记录吧。</p><p>　　本博客会不定时分享部分官方商店里面的小游戏，同时发布成WebGL版本让大家可以体验。</p><p>　　先记录简单发布2D拾荒者遇到的问题吧。</p><h2 id="疑难解答"><a href="#疑难解答" class="headerlink" title="疑难解答"></a>疑难解答</h2><h3 id="360打不开"><a href="#360打不开" class="headerlink" title="360打不开"></a>360打不开</h3><p>　　该问题在前面的博客有提到，是新版本的Unity编译的包，部分浏览器暂时不支持WebGL2.0的特性，所以识别不了，就不能打开了。</p><p>　　只要用老版本的Unity编译发布，就可以使用了。目前我用的是5.4.6f3。发布出来是Release包；再往上的版本发布的是Build包，就得用Chrome和手机浏览器打开了。</p><h3 id="抛异常–内存不足"><a href="#抛异常–内存不足" class="headerlink" title="抛异常–内存不足"></a>抛异常–内存不足</h3><p>　　这个需要细谈。是本篇的重点。</p><p>　　Unity发布的这个webgl，运行在浏览器上，是需要事先定义内存的，后面不能减小或者增大。所以得了解你这个程序最少需要多少内存，然后根据2的幂来取值。</p><p><img src="/contentimg/26/1.png" alt="Result pic 1" title="定义内存大小的地方"></p><p>　　那怎么看程序需要多少内存？</p><h4 id="Profiler"><a href="#Profiler" class="headerlink" title="Profiler"></a>Profiler</h4><p><img src="/contentimg/26/2.png" alt="Result pic 1" title="Profiler"></p><p>　　在memory部分，可以查看当前场景使用了多少内存。一般看Texture和Audio就行，这两个是最大的，加起来的值就是至少需要的内存，往上取2的幂就能大概出一个值了。像图中，大致23m，所以往上取32m就行。</p><h4 id="gzip解压方式"><a href="#gzip解压方式" class="headerlink" title="gzip解压方式"></a>gzip解压方式</h4><p>　　这里还有个办法，就是先编译一次包。然后把Release里的3个包全换成后缀gzip，解压出来，凑起来的大小就是到时在浏览器里的大小。</p><p><img src="/contentimg/26/3.png" alt="Result pic 1" title="gzip解压后大小 27.6m"></p><h2 id="优化（重点）"><a href="#优化（重点）" class="headerlink" title="优化（重点）"></a>优化（重点）</h2><h3 id="删除多余文件"><a href="#删除多余文件" class="headerlink" title="删除多余文件"></a>删除多余文件</h3><p>　　第一个，首要的，删除多余文件。</p><p>　　可以通过%homepath%\AppData\Local\Unity\Editor\Editor.log，或者是在Console窗口最右边打开。</p><p><img src="/contentimg/26/4.png" alt="Result pic 1" title="Console窗口最右边"></p><p><img src="/contentimg/26/5.png" alt="Result pic 1" title="Editor.log"></p><p>　　查看该日志，可以看到里面记录了整个编译过程，包里有什么文件，大小等等信息。</p><h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><p>　　图片压缩在5.x版本的优化选项较少，在2018的就多了，可以选择压缩类型、压缩质量等等参数。</p><p>　　5.x的<a href="http://blog.sina.com.cn/s/blog_5b6cb9500102vi6i.html" rel="external nofollow noopener noreferrer" target="_blank">取消Generate Mip Maps</a>  ， 因为只是普通的2D图片，不需要3D效果。</p><p><img src="/contentimg/26/6.png" alt="Result pic 1" title="取消Generate Mip Maps"></p><p>然后就是根据自己喜好来调压缩比例了。压缩质量越低，看起来越模糊。</p><p><img src="/contentimg/26/7.png" alt="Result pic 1" title="最高压缩"></p><p><img src="/contentimg/26/8.png" alt="Result pic 1" title="保持原质量"></p><h3 id="audio压缩"><a href="#audio压缩" class="headerlink" title="audio压缩"></a>audio压缩</h3><p>　　其实也不算压缩，只是修改了音频文件的读取方式而已。</p><p>　　首先要找出大文件，一般是背景音乐：</p><p><img src="/contentimg/26/9.png" alt="Result pic 1" title="找出大文件"></p><p>　　这里可以修改的只有一个Load Type选项，一般情况下忽略第一个。第二第三差不多，一般都是建议大文件选第二个（Compressed in memory）；零碎的小文件选第三个（streaming）。区别就是加载时会不会存在延迟，这个在大文件上才会体现出来。</p><p><img src="/contentimg/26/10.png" alt="Result pic 1" title="audio优化"></p><p>　　记住这里选第一个的话，这12个文件，会导致运行时的audio内存高达13m。选stream的话才250kb。差别很大的。</p><h3 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h3><p>　　在这个2D小游戏中，剩下其他的优化效果很小，就设置static选项（让系统自动优化）、取消天空盒等等细节。所以暂时不提，等后面3D部分的再说这个优化。</p><h3 id="编译优化"><a href="#编译优化" class="headerlink" title="编译优化"></a>编译优化</h3><p>　　由于这个2D小游戏很简单，没涉及其他的，所以可以直接上编译选项优化了。</p><p>　　直接到Player Settings设置：</p><p><img src="/contentimg/26/11.png" alt="Result pic 1" title="Publishing Settings"></p><p>　　Enable Exceptions设为None，启用Data caching。根据前面观察的内存大小，设置一个值（该值后面能在文本文件直接修改，故此处影响小，随便填）。</p><p><img src="/contentimg/26/12.png" alt="Result pic 1" title="Other Settings"></p><p>　　这里只有两个是必须的：</p><ol><li><p>启用“Strip Engine Code”，该项表示剔除不用的dll。</p></li><li><p>不打印log。</p></li></ol><p>　　其他的看喜好选吧。不是必要设置。然后就可以编译出包了！</p><p><img src="/contentimg/26/13.png" alt="Result pic 1" title="记录申请内存大小的属性"></p><h2 id="html优化"><a href="#html优化" class="headerlink" title="html优化"></a>html优化</h2><p>　　现在可以运行看到效果了，初始是不提供file模式看效果的，这里有篇文件介绍怎么设置Chrome支持file模式运行：</p><p><a href="http://www.cnblogs.com/huwenya/p/9547224.html" rel="external nofollow noopener noreferrer" target="_blank">Unity发布WebGl注意事项</a> </p><p>　　细节我就不再提了。下面要说的是怎么让内容居中显示：</p><p>　　初始启动，是在左上角的。体验不是很好。但是可以用F12看到，是绘制在canvas上的内容，是可以通过修改html代码来实现居中显示的。</p><p>　　html居中显示的方式是：</p><ol><li>增加div。</li><li>设置style=”position: absolute;left:50%;top:50%;margin-left:0px;margin-top:0px;”</li></ol><p>　　注意这里有个margin偏移值，因为目前的居中设置，是以该内容的左上角来居中的，所以出来效果是在第四象限的位置。就得让它根据自己的大小来偏1/2过去，就居中了。</p><p>　　由于html代码不支持动态计算，所以只能写css脚本了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"contdivc"</span> <span class="attr">style</span>=<span class="string">"position: absolute;left:50%;top:50%;margin-left:0px;margin-top:0px;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    window.onload=function() &#123;</span></span><br><span class="line"><span class="undefined">            document.getElementById( "contdivc" ).style.marginLeft = "-"+960/2 + "px";</span></span><br><span class="line"><span class="undefined">document.getElementById( "contdivc" ).style.marginTop = "-"+600/2 + "px";</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"emscripten"</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">oncontextmenu</span>=<span class="string">"event.preventDefault()"</span> <span class="attr">height</span>=<span class="string">"600px"</span> <span class="attr">width</span>=<span class="string">"960px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　现在刷新运行，居中了！</p><p>　　但是不能每次编译都来这里修改html的呀。怎么处理？</p><p>　　回到开头，Unity日志里面其实有提到，是用插件来编译的，这样，是肯定存在一个模版文件的！</p><p>　　该模版就在安装目录下：5.4.6f3\Editor\Data\PlaybackEngines\WebGLSupport\BuildTools\WebGLTemplates</p><p><img src="/contentimg/26/14.png" alt="Result pic 1" title="母板html"></p><p>　　那就好办了，直接改该文件就行了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"contdivc"</span> <span class="attr">style</span>=<span class="string">"position: absolute;left:50%;top:50%;margin-left:0px;margin-top:0px;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    window.onload=function() &#123;</span></span><br><span class="line"><span class="undefined">            document.getElementById( "contdivc" ).style.marginLeft = "-"+%UNITY_WIDTH%/2 + "px";</span></span><br><span class="line"><span class="undefined">document.getElementById( "contdivc" ).style.marginTop = "-"+%UNITY_HEIGHT%/2 + "px";</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"emscripten"</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">oncontextmenu</span>=<span class="string">"event.preventDefault()"</span> <span class="attr">height</span>=<span class="string">"%UNITY_HEIGHT%px"</span> <span class="attr">width</span>=<span class="string">"%UNITY_WIDTH%px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文末贴几个我觉得还不错的文章：</p><p><a href="http://www.cnblogs.com/huwenya/p/9547224.html" rel="external nofollow noopener noreferrer" target="_blank">Unity发布WebGl注意事项</a></p><p><a href="https://www.cnblogs.com/Jason-c/p/8137193.html" rel="external nofollow noopener noreferrer" target="_blank">Unity 性能优化（力荐）</a></p><p><a href="https://blog.csdn.net/ElyXiao/article/details/51980863" rel="external nofollow noopener noreferrer" target="_blank">unity几种优化建议</a></p><p><a href="https://blog.csdn.net/mayzhengxi/article/details/76616864" rel="external nofollow noopener noreferrer" target="_blank">Unity5.3.3 webgl 注意</a></p><p><a href="https://blog.csdn.net/lyh916/article/details/44115095" rel="external nofollow noopener noreferrer" target="_blank">[Unity优化]减少内存占用：贴图优化</a></p><p><a href="https://blog.csdn.net/yuyingwin/article/details/78851312" rel="external nofollow noopener noreferrer" target="_blank">Unity3d Mesh、Texture、UI 压缩降低内存</a></p><p><a href="https://blog.csdn.net/qq_33747722/article/details/70544822" rel="external nofollow noopener noreferrer" target="_blank">Unity游戏开发性能优化（Sprite优化）</a></p><p><a href="https://blog.csdn.net/a673544319/article/details/82142283" rel="external nofollow noopener noreferrer" target="_blank">Unity游戏开发图片纹理压缩方案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文是记录Unity的优化第一篇：WebGL发布优化。&lt;/p&gt;
&lt;p&gt;　　后续将记录其他平台的优化，以及编程中遇到的优化。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity优化" scheme="https://YaojiaxinPC.github.io/categories/Unity%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="发布优化" scheme="https://YaojiaxinPC.github.io/tags/%E5%8F%91%E5%B8%83%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Unity平台预编译指令</title>
    <link href="https://YaojiaxinPC.github.io/25UnityPlatform_define/"/>
    <id>https://YaojiaxinPC.github.io/25UnityPlatform_define/</id>
    <published>2018-10-23T05:07:59.000Z</published>
    <updated>2018-10-23T05:30:01.855Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录Unity的平台预编译指令。</p><a id="more"></a><p><a href="https://docs.unity3d.com/Manual/PlatformDependentCompilation.html" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a> </p><p>　　在脚本中，经常看到define指令，具体到底有多少指令？下面简单转载一下官方文档。</p><style>table th:first-of-type {    width: 200px;}</style><table><thead><tr><th style="text-align:right">定义</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:right">UNITY_EDITOR</td><td style="text-align:left">#define指令，用于从游戏代码中调用Unity Editor脚本。</td></tr><tr><td style="text-align:right">UNITY_EDITOR_WIN</td><td style="text-align:left">Windows上编辑器代码的#define指令。</td></tr><tr><td style="text-align:right">UNITY_EDITOR_OSX</td><td style="text-align:left">Mac OS X上编辑器代码的#define指令。</td></tr><tr><td style="text-align:right">UNITY_STANDALONE_OSX</td><td style="text-align:left">#define指令，用于编译/执行专门用于Mac OS X的代码（包括Universal，PPC和Intel架构）。</td></tr><tr><td style="text-align:right">UNITY_STANDALONE_WIN</td><td style="text-align:left">#define指令，用于专门为Windows独立应用程序编译/执行代码。</td></tr><tr><td style="text-align:right">UNITY_STANDALONE_LINUX</td><td style="text-align:left">#define指令，用于专门为Linux独立应用程序编译/执行代码。</td></tr><tr><td style="text-align:right">UNITY_STANDALONE</td><td style="text-align:left">#define指令，用于编译/执行任何独立平台（Mac OS X，Windows或Linux）的代码。</td></tr><tr><td style="text-align:right">UNITY_WII</td><td style="text-align:left">#define指令，用于编译/执行Wii控制台的代码。</td></tr><tr><td style="text-align:right">UNITY_IOS</td><td style="text-align:left">#define指令，用于编译/执行iOS平台的代码。</td></tr><tr><td style="text-align:right">UNITY_IPHONE</td><td style="text-align:left">已过时。请改用UNITY_IOS。</td></tr><tr><td style="text-align:right">UNITY_ANDROID</td><td style="text-align:left">适用于Android平台的#define指令。</td></tr><tr><td style="text-align:right">UNITY_PS4</td><td style="text-align:left">用于运行PlayStation 4代码的#define指令。</td></tr><tr><td style="text-align:right">UNITY_XBOXONE</td><td style="text-align:left">执行Xbox One #define指令代码。</td></tr><tr><td style="text-align:right">UNITY_TIZEN</td><td style="text-align:left">Tizen平台的#define指令。</td></tr><tr><td style="text-align:right">UNITY_TVOS</td><td style="text-align:left">Apple TV平台的#define指令。</td></tr><tr><td style="text-align:right">UNITY_WSA</td><td style="text-align:left">通用Windows平台 #define指令。此外，NETFX_CORE是在针对.NET Core编译C＃文件和使用.NET 脚本后端时定义的。</td></tr><tr><td style="text-align:right">UNITY_WSA_10_0</td><td style="text-align:left">通用Windows平台的#define指令。另外，在针对.NET Core编译C＃文件时定义了WINDOWS_UWP。</td></tr><tr><td style="text-align:right">UNITY_WINRT</td><td style="text-align:left">与UNITY_WSA相同。</td></tr><tr><td style="text-align:right">UNITY_WINRT_10_0</td><td style="text-align:left">相当于UNITY_WSA_10_0</td></tr><tr><td style="text-align:right">UNITY_WEBGL</td><td style="text-align:left">WebGL #define指令。</td></tr><tr><td style="text-align:right">UNITY_FACEBOOK</td><td style="text-align:left">Facebook平台的#define指令（WebGL或Windows独立版）。</td></tr><tr><td style="text-align:right">UNITY_ADS</td><td style="text-align:left">#define指令，用于从您的游戏代码中调用Unity Ads方法。5.2及更高版本。</td></tr><tr><td style="text-align:right">UNITY_ANALYTICS</td><td style="text-align:left">用于调用Unity Analytics的 #define指令为游戏代码方法。5.2及更高版本。</td></tr><tr><td style="text-align:right">UNITY_ASSERTIONS</td><td style="text-align:left">断言控制进程的#define指令。</td></tr></tbody></table><p>　　这里插入一下MarkDown插入表格的技巧：<a href="https://blog.csdn.net/maxsky/article/details/54666998" rel="external nofollow noopener noreferrer" target="_blank">Markdown 表格之调整宽度技巧</a></p><p><img src="/contentimg/25/1.png" alt="Result pic 1" title="源文件"></p><p>还有给定版本号XYZ</p><blockquote><p> Unity以下列格式公开三个全局#define指令：UNITY_X，UNITY_X_Y和UNITY_X_Y_Z</p></blockquote><p>例如：Unity 5.0.1指令的示例：</p><table><thead><tr><th style="text-align:right">定义</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:right">UNITY_5</td><td style="text-align:left">每个5.XY版本都公开了Unity 5发行版的#define指令。</td></tr><tr><td style="text-align:right">UNITY_5_0</td><td style="text-align:left">主要版本Unity 5.0的#define指令，在每个5.0.Z版本中公开。</td></tr><tr><td style="text-align:right">UNITY_5_0_1</td><td style="text-align:left">Unity 5.0.1次要版本的#define指令。</td></tr></tbody></table><p>还能以UNITY_X_Y_OR_NEWER格式来有选择地编译代码。</p><table><thead><tr><th style="text-align:right">定义</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:right">ENABLE_MONO</td><td style="text-align:left">为Mono编写后端#define脚本。</td></tr><tr><td style="text-align:right">ENABLE_IL2CPP</td><td style="text-align:left">用于IL2CPP的脚本后端#define 。</td></tr><tr><td style="text-align:right">ENABLE_DOTNET</td><td style="text-align:left">脚本编写后端#define for .NET。</td></tr><tr><td style="text-align:right">NETFX_CORE</td><td style="text-align:left">在.NET上针对.NET Core类库构建脚本时定义。</td></tr><tr><td style="text-align:right">NET_2_0</td><td style="text-align:left">在Mono和IL2CPP上针对.NET 2.0 API兼容级别构建脚本时定义。</td></tr><tr><td style="text-align:right">NET_2_0_SUBSET</td><td style="text-align:left">在Mono和IL2CPP上针对.NET 2.0 Subset API兼容级别构建脚本时定义。</td></tr><tr><td style="text-align:right">NET_4_6</td><td style="text-align:left">在Mono和IL2CPP上针对.NET 4.x API兼容级别构建脚本时定义。</td></tr><tr><td style="text-align:right">NET_STANDARD_2_0</td><td style="text-align:left">在Mono和IL2CPP上针对.NET Standard 2.0 API兼容级别构建脚本时定义。</td></tr><tr><td style="text-align:right">ENABLE_WINMD_SUPPORT</td><td style="text-align:left">在IL2CPP和.NET上启用Windows运行时支持时定义。有关详细信息，请参阅<a href="https://docs.unity3d.com/Manual/IL2CPP-WindowsRuntimeSupport.html" rel="external nofollow noopener noreferrer" target="_blank">Windows运行时支持</a>  。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录Unity的平台预编译指令。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity" scheme="https://YaojiaxinPC.github.io/categories/Unity/"/>
    
    
      <category term="指令" scheme="https://YaojiaxinPC.github.io/tags/%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>5个简单算法</title>
    <link href="https://YaojiaxinPC.github.io/24algorithm_1/"/>
    <id>https://YaojiaxinPC.github.io/24algorithm_1/</id>
    <published>2018-10-23T00:07:59.000Z</published>
    <updated>2018-10-23T04:04:53.674Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文介绍五个算法小题目：</p><ol><li>四个不同数字组成互不相等且不重复的三位数。</li><li>斐波那契数列。</li><li>字符串转整型。</li><li>简单逻辑思考题。</li><li>数组移动</li></ol><a id="more"></a><p>　　分享一下博客上看到的一些算法题：</p><h2 id="四个数字组成三位数"><a href="#四个数字组成三位数" class="headerlink" title="四个数字组成三位数"></a>四个数字组成三位数</h2><p>　　有数字：1、2、3、4，请问能组成多少个互不相同且无重复数字的三位数？请输出这些数字。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>　　三位数，百位数有4种选择，则十位数有3种选择，从而个位数只有2种选择。共4x3x2=24种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">4</span>; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == k || k == i) <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">            count++;</span><br><span class="line">            Console.WriteLine(<span class="string">"第&#123;1&#125;种情况：&#123;0&#125;"</span>, i * <span class="number">100</span> + j * <span class="number">10</span> + k, count.ToString(<span class="string">"00"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　如果要写能处理不同输入数字数量的，就得用递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 题目：有数字：1、2、3、4，请问能组成多少个互不相同且无重复数字的三位数？请输出这些数字。</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">public class NumToInt : IGetResult</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConsoleOut</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>&gt; inputlst = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;() &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] inputnums = inputlst.ToArray();</span><br><span class="line">        List&lt;<span class="keyword">int</span>&gt; result = NumToIntMethod(inputnums);</span><br><span class="line">        StringBuilder txt = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (result.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            txt.Append(<span class="string">"结果共 "</span> + result.Count + <span class="string">" 个；分别是： "</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; result.Count - <span class="number">1</span>) txt.Append(result[i] + <span class="string">"、 "</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    txt.Append(result[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            txt.Append(<span class="string">"存在重复数字，请重新输入！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(txt.ToString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// 输入有多少数字，组合排序后输出结果</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="inputnum"&gt;&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;<span class="keyword">int</span>&gt; <span class="title">NumToIntMethod</span><span class="params">(<span class="keyword">int</span>[] inputnum)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        List&lt;<span class="keyword">int</span>&gt; results = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//去除重复值</span></span><br><span class="line">        <span class="keyword">int</span>[] hassamenum = inputnum.GroupBy(i =&gt; i).Select(i =&gt; i.Key).ToArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不存在重复值</span></span><br><span class="line">        <span class="keyword">if</span> (hassamenum.Count() == inputnum.Count())</span><br><span class="line">        &#123;</span><br><span class="line">            GetNum(<span class="number">0</span>, inputnum.ToList(),ref results);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">///  递归调用</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="beforenum"&gt;前面组合的数字&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="leftlst"&gt;剔除掉已选数字后的集合&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name="alllst"&gt;全部结果总集合&lt;/param&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GetNum</span><span class="params">(<span class="keyword">int</span> beforenum, List&lt;<span class="keyword">int</span>&gt; leftlst, ref List&lt;<span class="keyword">int</span>&gt; alllst)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//只剩最后一个数字，表示可以输出结果</span></span><br><span class="line">        <span class="keyword">if</span> (leftlst.Count == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!alllst.Contains(beforenum))<span class="comment">//检查是否重复，99.9%概率不会重复</span></span><br><span class="line">            &#123;</span><br><span class="line">                alllst.Add(beforenum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"重复！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; leftlst.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//将前面的数字组合</span></span><br><span class="line">            <span class="keyword">int</span> tmpnum = beforenum * <span class="number">10</span> + leftlst[i];</span><br><span class="line">            List&lt;<span class="keyword">int</span>&gt; tmplst = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            tmplst.AddRange(leftlst);</span><br><span class="line">            <span class="comment">//剔除已组合的数字</span></span><br><span class="line">            tmplst.RemoveAt(i);</span><br><span class="line"></span><br><span class="line">            GetNum(tmpnum, tmplst, ref alllst);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a><a href="https://baike.baidu.com/item/斐波那契数列/99145?fr=aladdin" rel="external nofollow noopener noreferrer" target="_blank">斐波那契数列</a></h2><p>　　有一列数：1、1、2、3、5……求第30个数。</p><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><p>　　第i个数等于第(i-1)个数+第(i-2)个数。使用递归。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetNum</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (index &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (GetNum(index - <span class="number">1</span>) + GetNum(index - <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　这里提一下我们在朋友圈经常看到的一个斐波那契数列应用：<a href="https://zhidao.baidu.com/question/287761267.html" rel="external nofollow noopener noreferrer" target="_blank">切割巧克力</a></p><p>　　某人把一个8x8的巧克力切成4块，却能拼成一个5x13的长方形==》64 = 65?!</p><p>　　其实这里就是利用了斐波那契数列的这个性质：5、8、13正是数列中相邻的三个项！每个奇数项的平方都比前后两项之积多1，每个偶数项的平方都比前后两项之积少1。加上另一个特性：前一项与后一项之比越来越接近黄金分割。</p><h2 id="字符串转整型"><a href="#字符串转整型" class="headerlink" title="字符串转整型"></a>字符串转整型</h2><p>　　将用户输入的字符串，不用系统api转化为整型。</p><h3 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h3><p>　　依靠ASCII，或者每个char与0的差值，判断是否为数字，是否10之内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetNum</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> gap = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        gap = str[i] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span> (gap &lt; <span class="number">0</span> || gap &gt;= <span class="number">10</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        num = num * <span class="number">10</span> + gap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="逻辑思考题"><a href="#逻辑思考题" class="headerlink" title="逻辑思考题"></a>逻辑思考题</h2><p>　　A、B、C、D、E五个学生计划报名参加活动，请根据以下条件判断谁真正参加活动：</p><ol><li><p>A参加，B也参加；</p></li><li><p>B和C只有一个人参加；</p></li><li><p>C和D或者都参加，或者都不参加；</p></li><li><p>D和E中至少有一个人参加；</p></li><li><p>如果E参加，那么A和D也参加。</p></li></ol><h3 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h3><p>　　1，0为参加或者不参加；设置5个循环进行判断，将条件转化成对应的值判断进行循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] name = &#123; <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>[] value = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (value[<span class="number">0</span>] = <span class="number">0</span>; value[<span class="number">0</span>] &lt; <span class="number">2</span>; value[<span class="number">0</span>]++) <span class="comment">// &lt; 2 取0、1两个值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (value[<span class="number">1</span>] = <span class="number">0</span>; value[<span class="number">1</span>] &lt; <span class="number">2</span>; value[<span class="number">1</span>]++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (value[<span class="number">2</span>] = <span class="number">0</span>; value[<span class="number">2</span>] &lt; <span class="number">2</span>; value[<span class="number">2</span>]++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (value[<span class="number">3</span>] = <span class="number">0</span>; value[<span class="number">3</span>] &lt; <span class="number">2</span>; value[<span class="number">3</span>]++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (value[<span class="number">4</span>] = <span class="number">0</span>; value[<span class="number">4</span>] &lt; <span class="number">2</span>; value[<span class="number">4</span>]++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>((value[<span class="number">1</span>]&gt;=value[<span class="number">0</span>]) <span class="comment">//B不参加时，A肯定不参加；B参加时，A不一定参加</span></span><br><span class="line">                        &amp;&amp;(value[<span class="number">1</span>]+value[<span class="number">2</span>]==<span class="number">1</span>)</span><br><span class="line">                        &amp;&amp;(value[<span class="number">2</span>]==value[<span class="number">3</span>])</span><br><span class="line">                        &amp;&amp;(value[<span class="number">3</span>]+value[<span class="number">4</span>] ==<span class="number">1</span>)</span><br><span class="line">                        &amp;&amp;(value[<span class="number">4</span>]==<span class="number">0</span> </span><br><span class="line">                        ||(value[<span class="number">4</span>] == <span class="number">1</span>&amp;&amp;value[<span class="number">0</span>] ==<span class="number">1</span> &amp;&amp; value[<span class="number">3</span>] ==<span class="number">1</span>)))</span><br><span class="line">                        &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.Length; i++)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">if</span> (value[i] == <span class="number">1</span>)</span><br><span class="line">                                    Console.WriteLine(<span class="string">"&#123;0&#125;参加"</span>,name[i]);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    Console.WriteLine(<span class="string">"&#123;0&#125;不参加"</span>, name[i]);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　该逻辑思考题比较有趣，第一次看到这样和代码结合起来的逻辑题。    </p><h2 id="数组移动"><a href="#数组移动" class="headerlink" title="数组移动"></a><a href="https://www.cnblogs.com/I-am-Betty/p/3611518.html" rel="external nofollow noopener noreferrer" target="_blank">数组移动</a></h2><p>　　这个得推荐去链接中的<a href="https://www.cnblogs.com/I-am-Betty/p/3611518.html" rel="external nofollow noopener noreferrer" target="_blank">博客</a> 仔细看，想法很新奇的。</p><p>这里简单拿一个来讲：</p><p>　　把数组元素前后部分交换 MoveFirstPartOfArrayToTheEnd(int[] array, int index) 比如 {1,2,3,4,5,6,7} 3  =&gt; {4,5,6,7,1,2,3}</p><h3 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h3><p>　　简单处理：把1-2-3排后面；然后从头开始把剩下的排进去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GetNum</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span>[] aa = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span>[] bb = <span class="keyword">new</span> <span class="keyword">int</span>[aa.Count()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; aa.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; index)</span><br><span class="line">        &#123;</span><br><span class="line">            bb[i + (aa.Count() - index)] = aa[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            bb[i - index] = aa[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    foreach (<span class="keyword">var</span> item in bb)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　上面的处理思想一般般，该题主要是了解链接中反转的用法：</p><ol><li><p>分段1，2，3—4，5，6，7</p></li><li><p>分段反转3，2，1 — 7，6，5，4</p></li><li><p>整体反转4，5，6，7，1，2，3</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReverseNums</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] aa = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span>] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span>[] a1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a1.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a1[i] = aa[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] a2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">7</span> - <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a2.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a2[i] = aa[i + a1.Count()];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b1 = a1.Reverse().ToArray();</span><br><span class="line">    <span class="keyword">var</span> b2 = a2.Reverse().ToArray();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a1.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        aa[i] = b1[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a2.Count(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        aa[i + a1.Count()] = b2[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> bb = aa.Reverse().ToArray();</span><br><span class="line"></span><br><span class="line">    foreach (<span class="keyword">var</span> item in bb)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> git代码库: <a href="https://github.com/YaojiaxinPC/hexoblog/tree/master/AlgorithmDemo" rel="external nofollow noopener noreferrer" target="_blank">Codes</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文介绍五个算法小题目：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;四个不同数字组成互不相等且不重复的三位数。&lt;/li&gt;
&lt;li&gt;斐波那契数列。&lt;/li&gt;
&lt;li&gt;字符串转整型。&lt;/li&gt;
&lt;li&gt;简单逻辑思考题。&lt;/li&gt;
&lt;li&gt;数组移动&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="算法" scheme="https://YaojiaxinPC.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="C#" scheme="https://YaojiaxinPC.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Unity发布WebGL---360等部分浏览器不支持</title>
    <link href="https://YaojiaxinPC.github.io/23unitywebgl360error/"/>
    <id>https://YaojiaxinPC.github.io/23unitywebgl360error/</id>
    <published>2018-10-22T13:07:59.000Z</published>
    <updated>2018-10-22T16:00:27.728Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文介绍三种版本Unity发布WebGL对浏览器的影响问题：</p><ol><li>2018.2全新支持WebAssembly，支持内存动态调配，极大压缩包大小。</li><li>5.5.0能发布Release版本，但是在360等浏览器上会抛异常；再往上的版本只能发布Build版本。</li><li>5.4.6以下版本，发布Release版本，支持360等浏览器运行。</li></ol><a id="more"></a><p>　　准备在博客上发一个小游戏demo，结果在360抛异常了，在chrome上是可以的，手机上也行。所以webgl是没问题的，推测是unity编译器的问题。但是搜索上找不到关键字。可能没什么人关注这个问题吧，毕竟都是用在手游上的。</p><p>　　通过浏览器调试工具，排查到是缺少“decompress.js”，比较了一下，编译出来”.unityweb”后缀的，都是没有“UnityConfig”文件夹。由于不同版本生成的UnityLoader.js不同，调用工具的步骤已经不同了，才导致360等低版本的浏览器打不开新Unity特性的WebGL程序。</p><p><img src="/contentimg/23/12.png" alt="Result pic 1" title="WebGLSupport目录比较"></p><p>　　由于C++方面和编译器有关，好多用2008可以编译，但是2010开始的会抛异常。所以就尝试用5.x的来编译。结果很神奇，出来的包不一样，是Release文件夹！之前用2017是Build文件夹。没想到360竟然这次跑成功了！</p><p>　　由此推断是webgl版本问题。接着是一个一个版本的更新看，5.5的更新还有提到gz，后面的没提到，下载了5.6的，编译出来是build；所以再找5.5的，终于是Release，但是360上抛异常了。那往前一个版本，5.4.6，正常运行！</p><p>　　下面是3个版本的运行情况：</p><h3 id="2018-2-13f1-WebAssembly模式"><a href="#2018-2-13f1-WebAssembly模式" class="headerlink" title="2018.2.13f1-WebAssembly模式"></a>2018.2.13f1-WebAssembly模式</h3><p>　　由于WebAssembly的比较亮点：包小很多，而且能动态申请内存，可以一开始就申请32m（其他版本的都得申请64m）。这里就选该模式。</p><p><img src="/contentimg/23/1.png" alt="Result pic 1" title="Chrome控制台输出"></p><p><img src="/contentimg/23/2.png" alt="Result pic 1" title="文件包大小"></p><p><img src="/contentimg/23/3.png" alt="Result pic 1" title="浏览器请求情况"></p><h3 id="2017-4-3f1"><a href="#2017-4-3f1" class="headerlink" title="2017.4.3f1"></a>2017.4.3f1</h3><p>　　WebAssembly模式在该版本是测试版，编译出来的包太大，而且运行还抛异常，这里就不提这个。</p><p><img src="/contentimg/23/4.png" alt="Result pic 1" title="Chrome控制台输出"></p><p><img src="/contentimg/23/5.png" alt="Result pic 1" title="文件包大小"></p><p><img src="/contentimg/23/6.png" alt="Result pic 1" title="浏览器请求情况"></p><h3 id="5-4-6f3"><a href="#5-4-6f3" class="headerlink" title="5.4.6f3"></a>5.4.6f3</h3><p>　　能编译出来360正常运行的版本中最新的一个。</p><p><img src="/contentimg/23/7.png" alt="Result pic 1" title="Chrome控制台输出"></p><p><img src="/contentimg/23/8.png" alt="Result pic 1" title="文件包大小"></p><p><img src="/contentimg/23/9.png" alt="Result pic 1" title="浏览器请求情况"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>　　通过前面三个版本的比较。推荐：</p><ol><li>简单的小游戏用5.4.6发布，请求量少，支持的浏览器多；</li><li>复杂的游戏用2018.2发布，包压缩率高，动态内存，但是手机上打开会提示请求摄像头权限？（可能存在扫描设备的代码）</li><li>中间的版本优势不大。通过Profiler工具的比较，2018的优势&gt;&gt;5.4.6</li></ol><p><img src="/contentimg/23/10.png" alt="Result pic 1" title="2018内存分配"></p><p><img src="/contentimg/23/11.png" alt="Result pic 1" title="5.4.6内存分配"></p><p>　　两个的代码和设置是一样的，但是Textures相差一倍，Textures是优化中最重要的一个，2018的竟然能帮我们直接优化了一倍。还有Assets的数量，也是一倍的差距。</p><p>　　再加上OpenGL ES3.0的优势，所以，复杂点的游戏，还是推荐用2018.2！</p><p>　　文末贴一下介绍2018.2的WebAssembly的一个中文链接：</p><p> <a href="http://forum.china.unity3d.com/thread-32663-1-1.html" rel="external nofollow noopener noreferrer" target="_blank">Unity 2018.2正式支持WebAssembly</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文介绍三种版本Unity发布WebGL对浏览器的影响问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2018.2全新支持WebAssembly，支持内存动态调配，极大压缩包大小。&lt;/li&gt;
&lt;li&gt;5.5.0能发布Release版本，但是在360等浏览器上会抛异常；再往上的版本只能发布Build版本。&lt;/li&gt;
&lt;li&gt;5.4.6以下版本，发布Release版本，支持360等浏览器运行。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Unity3D" scheme="https://YaojiaxinPC.github.io/categories/Unity3D/"/>
    
    
      <category term="webgl" scheme="https://YaojiaxinPC.github.io/tags/webgl/"/>
    
      <category term="环境" scheme="https://YaojiaxinPC.github.io/tags/%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Unity入门官方案例---2D Roguelike</title>
    <link href="https://YaojiaxinPC.github.io/22Roguelike/"/>
    <id>https://YaojiaxinPC.github.io/22Roguelike/</id>
    <published>2018-10-20T16:07:59.000Z</published>
    <updated>2018-10-25T07:52:16.275Z</updated>
    
    <content type="html"><![CDATA[<p>　　介绍一下接触到的好的Unity官方作品：<a href="https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-roguelike-29825" rel="external nofollow noopener noreferrer" target="_blank">2D Roguelike</a>   。</p><a id="more"></a><p><img src="/contentimg/22/1.jpg" alt="Result pic 1" title="2D Roguelike"></p><h2 id="游戏简介"><a href="#游戏简介" class="headerlink" title="游戏简介"></a>游戏简介</h2><p>　　该小游戏是2D类型，操作只有上下左右4个方向的移动，每动一下消耗1点能量，能量通过吃到食物补充；场景中有墙阻挡，需要撞4下墙才能销毁该障碍，同时还有怪物追击，被攻击到会大量消耗能量；但是怪物移动速度缓慢。</p><p>　　由于场景中的食物是固定的，吃了就没了，所以就设置了一个刷新点：“exit出口”，每到达一次，就能刷新一下全图场景，同时作为天数记录+1天；相应的，存活天数越多，怪物也会越多！</p><p>　　目前游戏以天数为关卡记录。</p><h2 id="游戏体验"><a href="#游戏体验" class="headerlink" title="游戏体验"></a>游戏体验</h2>  <p><div style="width:100%; height:500px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="500" height="500" src="/unitydemo/2/index.html"></iframe></div></p><h2 id="游戏制作"><a href="#游戏制作" class="headerlink" title="游戏制作"></a>游戏制作</h2><p>　　原材料真的很少，才一张图集。里面打包集合了全部墙和地板、人物的贴图。然后就是一些背景音乐了。</p><h3 id="1-游戏规则细化"><a href="#1-游戏规则细化" class="headerlink" title="1.游戏规则细化"></a>1.游戏规则细化</h3><p>　　写代码前，需要先了解要做什么功能。</p><p>　　这是一个逃亡游戏，为了限制逃亡，需要加上“移动能量消耗”这个限制；竟然是逃亡，那就有怪物，先用最简单的，降低怪物移动速度（玩家移动两次，怪物才移动一次），怪物接触玩家，玩家损失能量；接下来，场景中需要有障碍物，但是这些障碍物是可以通过消耗能量来击穿，防止堵死。</p><p>　　剩下就是全游戏最重要的能量了，设置两种食物，拾取到就增加能量。能量归零，游戏结束。</p><p>　　为了简化游戏，把全部对象设置了统一单位移动。全部材料统一单位。全场景10x10单位，减掉外围的一层墙，内部是8x8单位的地板，随机布置障碍物、食物和怪物。</p><p>　　增加存活天数为关卡难度设置，天数越多，难度越大；难度以怪物数量来体现。</p><h3 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h3><p>　　这个代码架构很不错。使用抽象层，由于怪物和玩家都是一样的移动，一样的碰撞，该部分能通过泛型T抽象出来处理。而碰撞，玩家的碰撞和怪物的碰撞又是一样的逻辑，又可以抽象处理。</p><p><img src="/contentimg/22/1.png" alt="Result pic 1" title="两个抽象层函数"></p><p>　　细节的代码逻辑这里就不提了。这里简单讲讲里面一些知识点吧。</p><h4 id="RuntimeInitializeOnLoadMethod"><a href="#RuntimeInitializeOnLoadMethod" class="headerlink" title="RuntimeInitializeOnLoadMethod"></a>RuntimeInitializeOnLoadMethod</h4><p>　　该特性，实际是让函数在物体在OnLoad的时候自己执行该函数。这里有篇文章<a href="https://www.cnblogs.com/meteoric_cry/p/7602122.html" rel="external nofollow noopener noreferrer" target="_blank">Unity的RuntimeInitializeOnLoadMethod属性初探</a>  简单讲。</p><h4 id="Input-GetAxisRaw"><a href="#Input-GetAxisRaw" class="headerlink" title="Input.GetAxisRaw"></a>Input.GetAxisRaw</h4><p>　　Raw不经过处理的，会直接返回-1，0，1。</p><p>　　Input.GetAxis则是-1~+1的范围缓慢变化。两者有区别。由于我们限制了单位移动，所以用raw的才适合。</p><h4 id="float-Epsilon"><a href="#float-Epsilon" class="headerlink" title="float.Epsilon"></a>float.Epsilon</h4><p><img src="/contentimg/22/2.png" alt="Result pic 1" title="移动动画"></p><p>　　这里使用StartCoroutine来处理，防止while卡死线程。注意StartCoroutine和多线程不是同样的概念。但是可以简单理解成另外开一个线程去处理这个一帧一帧移动的动画。判断是否移动到目的的时候，不是用==，而是用float.Epsilon，避免了一些数据溢出的bug。注意,实际上会出现 double 1.0!= 1.0，所以只能会一个很小的范围来判断是否 double 1.0 ≈ 1.0。</p><h4 id="Physics2D-Linecast"><a href="#Physics2D-Linecast" class="headerlink" title="Physics2D.Linecast"></a>Physics2D.Linecast</h4><p><img src="/contentimg/22/3.png" alt="Result pic 1" title="射线检测碰撞"></p><p>　　游戏中使用的是碰撞器，所以移动前可以事先检查目的单位是否存在碰撞器。但是需要注意，物体自身的碰撞器会先被射线检测到，所以需要提前屏蔽自身的碰撞器，检测后才启用。</p><h4 id="输入检测"><a href="#输入检测" class="headerlink" title="输入检测"></a>输入检测</h4><p><img src="/contentimg/22/4.png" alt="Result pic 1" title="输入检测判断"></p><p>　　这里我修改了原来的代码。原来是通过平台处理，移动端使用滑动手势。我觉得不好用，还是统一成单点判断处理。通过判断点击的部位在人物的相对位置来处理。</p><h4 id="鼠标点击转化为相对坐标"><a href="#鼠标点击转化为相对坐标" class="headerlink" title="鼠标点击转化为相对坐标"></a>鼠标点击转化为相对坐标</h4><blockquote><p> touchEnd = Camera.main.ScreenToWorldPoint(Input.mousePosition);</p></blockquote><p>　　这里，其实整个游戏的坐标，是通过相机上的单位来换算统一成单位坐标的。所以可以直接使用相机的相对坐标来处理。</p><h4 id="代码小缺陷处理"><a href="#代码小缺陷处理" class="headerlink" title="代码小缺陷处理"></a>代码小缺陷处理</h4><p>　　我发现，当你剩下最后1能量，刚好移动到Exit就为0时，是能加载到下一关，然后就全部不动了。因为这里缺少了判断。</p><p>　　由于我使用了游戏结束后重新开始，我改的是下面这里。</p><p><img src="/contentimg/22/5.png" alt="Result pic 1" title="场景重载时检查playerFoodPoints"></p><h3 id="3-开始制作游戏"><a href="#3-开始制作游戏" class="headerlink" title="3.开始制作游戏"></a>3.开始制作游戏</h3><p>　　这里比较简单，把图集拆开，制作预制体。两个步骤而已。</p><h4 id="拆图集"><a href="#拆图集" class="headerlink" title="拆图集"></a>拆图集</h4><p>　　拆图集，这里需要了解一个概念：Pixels Per Unit</p><p><img src="/contentimg/22/6.png" alt="Result pic 1" title="Pixels Per Unit"></p><p>　　这里我为什么设置成32？</p><p>　　首先，我们看原文件大小：</p><p><img src="/contentimg/22/7.png" alt="Result pic 1" title="256 x 224"></p><p>　　是指位深度？不是这样算。我们数一下图集里面的单元，共7 x 8 。</p><p>　　对应：256==》8 &amp; 224 ==》 7</p><p>　　刚好整除，得到32像素就是一个图片的单位，也刚好图片都是正方形大小。所以这里的Pixels Per Unit，就是指多少像素一个Unit。</p><p>　　这里也有个文章介绍这个 <a href="http://gad.qq.com/article/detail/21059" rel="external nofollow noopener noreferrer" target="_blank">Unity UGUI 原理篇(二)：Canvas Scaler 縮放核心</a> </p><p>　　其他优化部分就不记录。因为有另外分开文章记录发布优化。</p><h4 id="制作预制体"><a href="#制作预制体" class="headerlink" title="制作预制体"></a>制作预制体</h4><p>　　该部分简单，就是拖拖图片而已。注意里面碰撞器是和图片岔开的，偏移一半。</p><p><img src="/contentimg/22/8.png" alt="Result pic 1" title="碰撞器岔开原单位"></p><p>　　为什么要岔开，因为初始状态下，射线检测的出发点，是在左上角。这样一开始就碰到左边的物体了。所以需要岔开。增加一半单位的距离。</p><h4 id="整合Scene"><a href="#整合Scene" class="headerlink" title="整合Scene"></a>整合Scene</h4><p><img src="/contentimg/22/9.png" alt="Result pic 1" title="摄像头的Size"></p><p>　　这里有疑问的，就是这个Size的值，应该设多少？</p><p>　　这个Size的意义，是显示界面高度的一半，共多少个单位。这里5，得到显示界面的高度是10个单位，正好对应游戏中10x10的比例。</p><p>　　为什么不是宽度？这个就得去问官方了。本问不纠结这个问题。</p><p>　　为什么开头演示那里是正方形的大小，但是默认工程是长方形的？</p><p>　　这个是发布时的设置。</p><p><img src="/contentimg/22/10.png" alt="Result pic 1" title="发布显示大小"></p><p>　　当然，该游戏实际上不用碰撞器也行，因为单位长度都是1，实际可以用数组集合来记录处理。有点像扫雷游戏那样。具体后面分享到扫雷游戏再提这种写法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　介绍一下接触到的好的Unity官方作品：&lt;a href=&quot;https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-roguelike-29825&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;2D Roguelike&lt;/a&gt;   。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity3D" scheme="https://YaojiaxinPC.github.io/categories/Unity3D/"/>
    
    
      <category term="游戏开发" scheme="https://YaojiaxinPC.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
      <category term="2D" scheme="https://YaojiaxinPC.github.io/tags/2D/"/>
    
      <category term="入门级" scheme="https://YaojiaxinPC.github.io/tags/%E5%85%A5%E9%97%A8%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>百度sitemap和谷歌sitemap同时使用不同的url</title>
    <link href="https://YaojiaxinPC.github.io/20sitemap2url/"/>
    <id>https://YaojiaxinPC.github.io/20sitemap2url/</id>
    <published>2018-10-19T16:07:59.000Z</published>
    <updated>2018-10-20T13:35:30.441Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享如果在同一次hexo g中，百度sitemap和谷歌sitemap使用不同的url。</p><a id="more"></a><p>　　目前我挂谷歌是挂github的链接，而挂百度使用域名。但是默认配置文件中的url只有一个。这样每次生成，他们都会使用那个默认url。这样得生成两次，分开提交才能做好。</p><p>　　真有必要这么麻烦吗？</p><p>　　于是我开始找“node_modules”文件夹里面的源码。</p><p>　　谷歌的sitemap生成源码里：</p><p><img src="/contentimg/20/1.png" alt="Result pic 1" title="hexo-generator-sitemap源码"></p><p>　　是直接拿到hexo.config.sitemap，然后就是generator.js，这样绕进去找。得绕有点久。那先看看百度那边。</p><p><img src="/contentimg/20/2.png" alt="Result pic 1" title="hexo-generator-baidu-sitemap源码"></p><p><img src="/contentimg/20/3.png" alt="Result pic 1" title="baidusitemap.ejs源码"></p><p>　　有戏，使用的不是同一个sitemap，然后在baidusitemap.ejs里面又读了一次url！</p><p>　　那就好办了，在百度sitemap那里多写一个url就搞定了：</p><p><img src="/contentimg/20/4.png" alt="Result pic 1" title="baidusitemap下多加一个url"></p><p>　　搞定，一次hexo g。两个sitemap的域名是不同的了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享如果在同一次hexo g中，百度sitemap和谷歌sitemap使用不同的url。&lt;/p&gt;
    
    </summary>
    
      <category term="源码分析" scheme="https://YaojiaxinPC.github.io/categories/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    
      <category term="hexo源码" scheme="https://YaojiaxinPC.github.io/tags/hexo%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>abowman&#39;s demo</title>
    <link href="https://YaojiaxinPC.github.io/21swfobjectdemo/"/>
    <id>https://YaojiaxinPC.github.io/21swfobjectdemo/</id>
    <published>2018-10-19T16:07:59.000Z</published>
    <updated>2018-10-23T16:48:55.385Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享<a href="https://github.com/swfobject/swfobject" rel="external nofollow noopener noreferrer" target="_blank">swfobject</a>   插件的简单使用，展示abowman上面的3个小挂饰。</p><a id="more"></a><p>　　swfobject的git代码里面已经包了一个自动生成html的功能，所以实际是去找swf动画，加进去就可以看到效果了。</p><p>　　小鱼挂饰：<a id="download" href="/unitydemo/1/fish.swf" download="fish.swf"><i class="fa fa-download"></i><span> Download fish.swf </span><br></a></p><p><div style="width:100%; height:450px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="400" height="400" src="/unitydemo/1/fish.html"></iframe></div></p><p>　　宠物鼠挂饰：<a id="download" href="/unitydemo/1/hamster.swf" download="hamster.swf"><i class="fa fa-download"></i><span> Download hamster.swf </span><br></a></p><p><div style="width:100%; height:450px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="400" height="400" src="/unitydemo/1/hamster.html"></iframe></div></p><p>　　企鹅群挂饰：<a id="download" href="/unitydemo/1/penguins.swf" download="penguins.swf"><i class="fa fa-download"></i><span> Download penguins.swf </span><br></a></p><p><div style="width:100%; height:450px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="400" height="400" src="/unitydemo/1/penguins.html"></iframe></div></p><p><img src="/contentimg/21/1.png" alt="Result pic 1" title="html代码自动生成"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享&lt;a href=&quot;https://github.com/swfobject/swfobject&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;swfobject&lt;/a&gt;   插件的简单使用，展示abowman上面的3个小挂饰。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://YaojiaxinPC.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="abowman" scheme="https://YaojiaxinPC.github.io/tags/abowman/"/>
    
      <category term="swf" scheme="https://YaojiaxinPC.github.io/tags/swf/"/>
    
      <category term="flash" scheme="https://YaojiaxinPC.github.io/tags/flash/"/>
    
      <category term="swfobject" scheme="https://YaojiaxinPC.github.io/tags/swfobject/"/>
    
  </entry>
  
  <entry>
    <title>markdown扩展</title>
    <link href="https://YaojiaxinPC.github.io/19markdownextend/"/>
    <id>https://YaojiaxinPC.github.io/19markdownextend/</id>
    <published>2018-10-18T16:07:59.000Z</published>
    <updated>2018-10-20T05:29:49.263Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享markdown的妙用：插入本地文件。</p><a id="more"></a><p>　　前一篇博客，我插入了一个pdf文件。</p><p>实际上是这样写的：</p><p><img src="/contentimg/19/1.png" alt="Result pic 1" title="源文件"></p><p>　　还能这样写（使用html，并加入图标）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a id=&quot;download&quot; href=&quot;/contentimg/18/Office-2019.pdf&quot;&gt;&lt;i class=&quot;fa fa-download&quot;&gt;&lt;/i&gt;&lt;span&gt; Download PDF &lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>　　这里也放一下pdf转html的一个网站吧，速度蛮快的：</p><p><a href="http://app.xunjiepdf.com/pdf2html" rel="external nofollow noopener noreferrer" target="_blank">迅捷PDF在线转换器</a></p><p>　　转化完下载下来是一个压缩包，解压放到工程中，然后到主配置文件修改：</p><p><img src="/contentimg/19/2.png" alt="Result pic 2" title="_config.yml"></p><p>　　提醒hexo忽略编译该文件夹。然后清理整个工程：hexo clean。再生成和发布，就可以使用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享markdown的妙用：插入本地文件。&lt;/p&gt;
    
    </summary>
    
      <category term="markdown扩展" scheme="https://YaojiaxinPC.github.io/categories/markdown%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="markdown" scheme="https://YaojiaxinPC.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>office2019破解安装版</title>
    <link href="https://YaojiaxinPC.github.io/18office2019/"/>
    <id>https://YaojiaxinPC.github.io/18office2019/</id>
    <published>2018-10-18T16:06:59.000Z</published>
    <updated>2018-10-20T17:02:16.156Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享破解吧看到的office2019的破解安装。</p><a id="more"></a><p>　　在这里得感谢破解吧。上面好多破解版软件。在此提醒大家，请用于个人学习，勿用于商业用途。</p><p>　　下面引用破解吧的教程：</p><p><div style="width:100%; height:950px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="850" height="800" src="/contentimg/18/Office-2019.pdf.html"></iframe></div></p><p>　　<a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=781052&amp;tdsourcetag=s_pcqq_aiomsg" rel="external nofollow noopener noreferrer" target="_blank">原文地址</a> </p><p>　　<a href="https://otp.landian.la/zh-cn/" rel="external nofollow noopener noreferrer" target="_blank">OTP地址</a> </p><p>　　<a id="download" href="/contentimg/18/Office-2019.pdf" download="Office-2019.pdf"><i class="fa fa-download"></i><span> Download PDF </span><br></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享破解吧看到的office2019的破解安装。&lt;/p&gt;
    
    </summary>
    
      <category term="软件破解包" scheme="https://YaojiaxinPC.github.io/categories/%E8%BD%AF%E4%BB%B6%E7%A0%B4%E8%A7%A3%E5%8C%85/"/>
    
    
      <category term="office" scheme="https://YaojiaxinPC.github.io/tags/office/"/>
    
      <category term="破解吧" scheme="https://YaojiaxinPC.github.io/tags/%E7%A0%B4%E8%A7%A3%E5%90%A7/"/>
    
  </entry>
  
  <entry>
    <title>github security alert 解决之路</title>
    <link href="https://YaojiaxinPC.github.io/17git-securityalert/"/>
    <id>https://YaojiaxinPC.github.io/17git-securityalert/</id>
    <published>2018-10-18T16:05:59.000Z</published>
    <updated>2018-10-19T06:12:54.316Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/contentimg/17/1.png" alt="Result pic 1" title="github security alert "></p><p>　　本文记录我遇到github的“security alert”时，怎么处理解决。</p><a id="more"></a><p>　　邮箱收到这个警告的时候蛮懵的，因为代码什么的没改过。最近做的操作，就是手动修改了“package.json”，以及删除“package-lock.json”文件和“node_modules”整个文件夹。后面重新安装，npm正常跑起来，博客也能正常更新，怎么就突然发警告了？</p><p>　　登陆git查看具体警告内容：</p><p><img src="/contentimg/17/2.png" alt="Result pic 2" title="具体警告内容"></p><p>　　原来是提示需要更新插件版本而已。</p><p>那就手动更新吧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update XXX</span><br></pre></td></tr></table></figure><p>　　不对，说好的添加文件的提示怎么没出来，直接就回车返回了？</p><p>　　那强制更新到某版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update XXX@1.2.3</span><br></pre></td></tr></table></figure><p>　　还是一样？那就只能用install了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install XXX@1.2.3</span><br></pre></td></tr></table></figure><p><img src="/contentimg/17/4.png" alt="Result pic 4" title="成功更新"></p><p>　　再次提交博客环境工程，这次git不报警告了。</p><p><img src="/contentimg/17/3.png" alt="Result pic 3" title="问题解决"></p><p>最后贴一下“package.json”和“package-lock.json”关系的几个链接吧：</p><p><a href="https://blog.csdn.net/m18633778874/article/details/81625421" rel="external nofollow noopener noreferrer" target="_blank">【前端】简单了解package.json与package-lock.json</a> </p><p><a href="https://www.cnblogs.com/cangqinglang/p/8336754.html" rel="external nofollow noopener noreferrer" target="_blank">package-lock.json的作用</a> </p><p>　　简单讲就是package.json负责安装我们需要的工具，package-lock.json着负责把那些工具需要的包记录安装起来。由于lock文件很大，东西很多，一般我们不会去看，所以这时候就会遇到一些依赖包版本过低的问题。</p><p><img src="/contentimg/17/5.png" alt="Result pic 5" title="依赖关系"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/contentimg/17/1.png&quot; alt=&quot;Result pic 1&quot; title=&quot;github security alert &quot;&gt;&lt;/p&gt;
&lt;p&gt;　　本文记录我遇到github的“security alert”时，怎么处理解决。&lt;/p&gt;
    
    </summary>
    
      <category term="github疑难杂症" scheme="https://YaojiaxinPC.github.io/categories/github%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
      <category term="github" scheme="https://YaojiaxinPC.github.io/tags/github/"/>
    
      <category term="security alert" scheme="https://YaojiaxinPC.github.io/tags/security-alert/"/>
    
  </entry>
  
  <entry>
    <title>VMWare安装Linux系统和mac系统</title>
    <link href="https://YaojiaxinPC.github.io/16VM_macandlinux/"/>
    <id>https://YaojiaxinPC.github.io/16VM_macandlinux/</id>
    <published>2018-10-18T16:04:59.000Z</published>
    <updated>2018-10-19T08:42:20.403Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录如何在VM虚拟机中装Linux系统和Mac系统。全文截图解说，打开会比较慢。</p><a id="more"></a><p>　　开头贴一下下载链接吧，版本有点老了：</p><p><a href="https://pan.baidu.com/s/1a6BF-GQ2Uwd25h8dw1WWKw" rel="external nofollow noopener noreferrer" target="_blank">百度云盘</a>  提取码：y9y9</p><p>　　系统就不提供了，可以去msdn等等地方下载。</p><p>　　下面开始贴图说明安装过程：</p><h2 id="Mac安装"><a href="#Mac安装" class="headerlink" title="Mac安装"></a>Mac安装</h2><p><img src="/contentimg/16/1/1.png" alt="Result pic 1" title="使用unlock打补丁"></p><p><img src="/contentimg/16/1/2.png" alt="Result pic 1" title="VMWare出现mac的选项"></p><p><img src="/contentimg/16/1/3.png" alt="Result pic 1" title="开始安装"></p><p><img src="/contentimg/16/1/4.png" alt="Result pic 1" title="选择语言"></p><p><img src="/contentimg/16/1/5.png" alt="Result pic 1" title="安装初始化界面"></p><p>　　第一次装的时候，由于系统磁盘格式问题，会出问题：</p><p><img src="/contentimg/16/1/6.png" alt="Result pic 1" title="直接选择“重新安装os x”"></p><p><img src="/contentimg/16/1/7.png" alt="Result pic 1" title="没显示磁盘？？？"></p><p>　　所以得返回：（当然一开始就得先搞磁盘，再来安装才对）</p><p><img src="/contentimg/16/1/8.png" alt="Result pic 1" title="左上角退出安装"></p><p><img src="/contentimg/16/1/9.png" alt="Result pic 1" title="选择磁盘工具"><br>　　<br><img src="/contentimg/16/1/10.png" alt="Result pic 1" title="格式化磁盘"></p><p><img src="/contentimg/16/1/11.png" alt="Result pic 1" title="格式化后出现可识别磁盘"></p><p><img src="/contentimg/16/1/12.png" alt="Result pic 1" title="回到安装系统界面"></p><p><img src="/contentimg/16/1/13.png" alt="Result pic 1" title="选择刚才的磁盘开始安装"></p><p><img src="/contentimg/16/1/14.png" alt="Result pic 1" title="安装开始"></p><p><img src="/contentimg/16/1/15.png" alt="Result pic 1" title="完成"></p><p><img src="/contentimg/16/1/16.png" alt="Result pic 1" title="重启，选择语言"></p><p><img src="/contentimg/16/1/17.png" alt="Result pic 1" title="选择时区"></p><p>　　注意中国在右边。</p><p><img src="/contentimg/16/1/18.png" alt="Result pic 1" title="进入系统界面"></p><p><img src="/contentimg/16/1/19.png" alt="Result pic 1" title="安装VMtool"></p><p>　　右下角，把光驱引用的文件定位到打补丁时增加的darwin文件。具体在安装目录下能找到。</p><p><img src="/contentimg/16/1/20.png" alt="Result pic 1" title="重新连接光驱"></p><p><img src="/contentimg/16/1/21.png" alt="Result pic 1" title="选择安装位置"></p><p><img src="/contentimg/16/1/22.png" alt="Result pic 1" title="完成安装"></p><p><img src="/contentimg/16/1/23.png" alt="Result pic 1" title="重启"></p><p><img src="/contentimg/16/1/24.png" alt="Result pic 1" title="开始使用"></p><h2 id="CentOS安装"><a href="#CentOS安装" class="headerlink" title="CentOS安装"></a>CentOS安装</h2><p>　　Linux的安装比较无趣。步骤也简单</p><p><img src="/contentimg/16/2/1.png" alt="Result pic 1" title="VM选择系统"></p><p><img src="/contentimg/16/2/2.png" alt="Result pic 1" title="选择CentOS系统"></p><p><img src="/contentimg/16/2/3.png" alt="Result pic 1" title="开始安装"></p><p><img src="/contentimg/16/2/4.png" alt="Result pic 1" title="磁盘检查"></p><p><img src="/contentimg/16/2/5.png" alt="Result pic 1" title="选择语言"></p><p><img src="/contentimg/16/2/6.png" alt="Result pic 1" title="设置"></p><p>　　这里得选择安装位置，才能下一步。</p><p><img src="/contentimg/16/2/7.png" alt="Result pic 1" title="设置密码"></p><p><img src="/contentimg/16/2/8.png" alt="Result pic 1" title="设置账户"></p><p><img src="/contentimg/16/2/9.png" alt="Result pic 1" title="完成安装"></p><p><img src="/contentimg/16/2/10.png" alt="Result pic 1" title="开始使用"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录如何在VM虚拟机中装Linux系统和Mac系统。全文截图解说，打开会比较慢。&lt;/p&gt;
    
    </summary>
    
      <category term="虚拟机" scheme="https://YaojiaxinPC.github.io/categories/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="VMWare" scheme="https://YaojiaxinPC.github.io/tags/VMWare/"/>
    
      <category term="Linux" scheme="https://YaojiaxinPC.github.io/tags/Linux/"/>
    
      <category term="Mac" scheme="https://YaojiaxinPC.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>可随身携带的windows系统</title>
    <link href="https://YaojiaxinPC.github.io/15SSDforwto/"/>
    <id>https://YaojiaxinPC.github.io/15SSDforwto/</id>
    <published>2018-10-18T16:03:59.000Z</published>
    <updated>2018-10-19T08:02:50.896Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录将SSD利用wto配置成可随身携带的系统。同时介绍一些SSD的知识。</p><a id="more"></a><p>　　开头贴一下百度百科。</p><p><a href="https://baike.baidu.com/item/Windows%20To%20Go/9911487?fr=aladdin" rel="external nofollow noopener noreferrer" target="_blank">Windows To Go</a></p><p>　　Windows To Go是Windows 8/8.1、Windows 10的一种企业功能，被内置于Windows 8企业版、Windows 8.1企业版、Windows 10企业版、教育版与专业版（1607以后）中。对于满足Windows 8硬件要求的电脑，Windows To Go可使Windows 8、Windows 8.1、Windows10从USB驱动器中启动并运行，不必考虑电脑上运行的操作系统（2012款之前的Mac和Windows RT不被支持）。</p><p>　　Windows To Go的设计并不旨在代替台式计算机、便携式计算机，或取代其他移动产品。恰恰相反，它为有效使用备用的工作场所方案资源提供有力支持。</p><hr><p>　　wto就是win8新版本开始提供的便携式系统，可以装在U盘上，然后随便找个主机插上去，就能登录这个系统进行使用。脱离了硬件上的捆绑。</p><p>　　个人建议最好弄成win10的，后面更新新版本那种。不过，按照我尝试后发现，首先得和你系统版本对应，并不是你去网上下载一个最新版就能使用的。我的win10是1703版本的，下载的包1803的就不能用，重启后进不了安装界面。</p><p>　　所以最好找你系统当时安装的那个包来做系统包。</p><p>　　启动wto的方式，在win菜单那里直接打“win”就会出来：</p><p><img src="/contentimg/15/1.png" alt="Result pic 1" title="启动wto"></p><p>　　当然也可以去控制面板找。</p><p><img src="/contentimg/15/2.png" alt="Result pic 2" title="wto界面"></p><p>　　下一步，选择iso。这里需要挂载一下iso，它才能识别到。不能直接定位到iso压缩包。</p><p><img src="/contentimg/15/3.png" alt="Result pic 3" title="wto搜索镜像"></p><p>　　安装过程很简单。这里不记录。重点是这个U盘安装了这个后，会隐藏起来，在现在使用的系统中就不会显式显示出来：</p><p><img src="/contentimg/15/4.png" alt="Result pic 4" title="U盘隐藏"></p><p>　　不过既然还是能识别到，就可以使用，直接右键给它分配一个盘符就可以使用了。利用这个特性，就可以跳过登陆验证，直接获取电脑上其他盘的文件了。</p><p>　　这个方式比用PE取消登陆密码要好。又不会破坏原系统的东西。适合用于电脑卡在更新界面无法登陆时，用U盘系统启动，然后分配给C盘盘符，进去把更新的文件删掉；然后回原系统启动，就不会更新了。具体步骤可以百度。以前是只能去F8安全模式弄，现在可以直接U盘启动弄了，容易很多。而且是和U盘速度挂钩的，如果用SSD，那就是秒开了，挂在那些老电脑上完全满分。</p><hr><p>　　下面介绍一下这个U盘的一些知识吧。我用的是SSD，所以特意查了下相关的东西。目前市面上，能达到直连效果的只有3.1的gen2。当然比较推荐圆头的那种typeC接口，就是手机上那种接口（注意，SSD还真能连在手机上用，驱动得起来）。</p><p>　　这里有个软件可以检测：</p><p><img src="/contentimg/15/5.png" alt="Result pic 5" title="U盘接口速度检测"></p><p><a href="https://www.aida64.com/" rel="external nofollow noopener noreferrer" target="_blank">aida</a> </p><p>　　注意这里电脑USB口的影响也有的，软件里面会提醒。当能达到3.1最高时，是能和直连那样达到几百兆的传输速度的。</p><p>　　这个软件，密钥搜一下很多，可以直接用。不用破解。</p><p>当然也有个检测磁盘评分的，不过觉得不太适合，那个是直连时检测4K对齐等等参数的：</p><p><img src="/contentimg/15/6.png" alt="Result pic 6" title="SSD速度检测"></p><p>　　对WTO还是蛮看好的。随身携带，电脑那么重，现在却只用带个U盘就行，省力很多。而且如果用的SSD，挂在老电脑上，完全就是脱胎换骨。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录将SSD利用wto配置成可随身携带的系统。同时介绍一些SSD的知识。&lt;/p&gt;
    
    </summary>
    
      <category term="windows系统妙用" scheme="https://YaojiaxinPC.github.io/categories/windows%E7%B3%BB%E7%BB%9F%E5%A6%99%E7%94%A8/"/>
    
    
      <category term="wto" scheme="https://YaojiaxinPC.github.io/tags/wto/"/>
    
      <category term="SSD" scheme="https://YaojiaxinPC.github.io/tags/SSD/"/>
    
  </entry>
  
  <entry>
    <title>编写bat自动备份博客到codingpage</title>
    <link href="https://YaojiaxinPC.github.io/14batforcodingpage/"/>
    <id>https://YaojiaxinPC.github.io/14batforcodingpage/</id>
    <published>2018-10-18T16:02:59.000Z</published>
    <updated>2018-10-20T11:43:56.539Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录编写bat自动同步博客到codingpage。</p><a id="more"></a><p>　　由于gitpage在国内访问没codingpage快，我是把域名挂在codingpage的。但是博客和代码等等都在github那边，平时靠两边复制文件来同步，操作繁琐，便想到了用批处理来做这件事。</p><p>　　在github这边，用gitbash生成，提交好后，点击bat，将public目录下的同步到coding。需求是这样的。那怎么实现？</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>　　新建文件夹codingpage，将public的文件复制到那边，然后提交。这里有问题，需要先清空codingpage文件夹，然后才能复制。写了一下del的处理，发现好麻烦，考虑的东西太多了。</p><p>　　所以方案一放弃。</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>　　还是新建文件夹codingpage，但是是用来init git，让它出来一个.git后缀的文件夹：</p><p><img src="/contentimg/14/1.png" alt="Result pic 1" title="初始化git文件夹"></p><p>　　后面的操作就是把这个.git文件夹复制过去public目录，然后cd进public，git提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'use SSH command，will pull public to coding page'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> publicdir=D:\<span class="built_in">source</span>\blogcode\public\.git</span><br><span class="line"><span class="built_in">set</span> publicd=D:\<span class="built_in">source</span>\blogcode\public</span><br><span class="line"><span class="built_in">set</span> aimdir=D:\<span class="built_in">source</span>\yaojiaxinpc\.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> aimdir is %aimdir%</span><br><span class="line"><span class="built_in">echo</span> publicdir is %publicdir%</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> d|xcopy %aimdir%\* %publicdir% /s /c /y</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> ***********************************************</span><br><span class="line"><span class="built_in">echo</span> ***********************************************</span><br><span class="line"><span class="built_in">echo</span> ***************start  to  commit***************</span><br><span class="line"><span class="built_in">echo</span> ***********************************************</span><br><span class="line"><span class="built_in">echo</span> ***********************************************</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /d %publicd%</span><br><span class="line"><span class="built_in">echo</span> gitdone</span><br><span class="line"></span><br><span class="line">del CNAME</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> git pull origin master</span><br><span class="line"><span class="built_in">echo</span> but this useless because it<span class="string">'s backups.so it won'</span>t <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"><span class="built_in">echo</span> add all file to git...</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> <span class="string">"year=%date:~0,4%"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"month=%date:~5,2%"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"day=%date:~8,2%"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"hour_ten=%time:~0,1%"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"hour_one=%time:~1,1%"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"minute=%time:~3,2%"</span></span><br><span class="line"><span class="built_in">set</span> <span class="string">"second=%time:~6,2%"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"%hour_ten%"</span> == <span class="string">" "</span> (</span><br><span class="line">    <span class="built_in">set</span> cmitmessage=%year%%month%%day%0%hour_one%%minute%%second%</span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">set</span> cmitmessage=%year%%month%%day%%hour_ten%%hour_one%%minute%%second%</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">"%cmitmessage%"</span></span><br><span class="line"><span class="built_in">echo</span> use time <span class="keyword">for</span> message, commiting... </span><br><span class="line"></span><br><span class="line">git push origin master -f</span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> git push <span class="keyword">done</span>!</span><br><span class="line">pause&gt;nul</span><br></pre></td></tr></table></figure><p><a href="https://github.com/YaojiaxinPC/blogcode/blob/master/clonetocoding.bat" rel="external nofollow noopener noreferrer" target="_blank">对应git</a></p><p>　　该方案行得通，而且处理方式简单许多。下面记录一下过程中遇到的问题。</p><hr><p>　　按照脚本从上到下来记录吧。</p><p>　　首先是定义变量：</p><blockquote><p> set 变量</p></blockquote><p>　　引用</p><blockquote><p> %变量%</p></blockquote><p>　　然后是复制 xcopy，这里会遇到弹窗选择“文件”：“文件夹”的弹窗选择，所以手动加一下追加输入：</p><blockquote><p> d|XXXXX</p></blockquote><p>　　d是里面要输入的东西。</p><p>　　这样完成了将.git复制到public目录的工作了。得将运行目录定位到public目录。</p><blockquote><p> cd /d XXXX</p></blockquote><p>　　codingpage那边不需要CNAME文件，所以删掉它。</p><blockquote><p> del 文件</p></blockquote><p>　　剩下的是git操作。</p><p>　　先用cmd实验一下git操作：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">git config --list</span><br></pre></td></tr></table></figure><p><img src="/contentimg/14/2.png" alt="Result pic 1" title="检查cmd下能否运行git"></p><p><img src="/contentimg/14/3.png" alt="Result pic 1" title="cmd下的git"></p><p>　　①添加命令：“.”表示全部</p><blockquote><p> git add .</p></blockquote><p>　　②同步命令：</p><blockquote><p> git pull origin master</p></blockquote><p>　　③提交命令：（后面还得推送才是完整的提交）</p><blockquote><p> git commit -m ‘注释’</p></blockquote><p>　　④推送命令：</p><blockquote><p>  git push origin master</p></blockquote><p>　　这里我用的是主线，可以根据需要进行修改。</p><p>　　那就简单了，直接复制过去批处理。</p><p>　　这里遇到的问题蛮多的：</p><ol><li>批处理里面不能写多余的空格，特别是路径和变量定义。因为会完整识别出来空格并运用，导致出问题。</li><li>git commit不加注释，就强制进入VIM模式。所以得加。</li><li>单引号 和 双引号 的区别，刚开始一直报错当前文件夹没有可提交的东西，排查到是commit出错，后面排查出来是引号问题。</li></ol><p>　　这里搜到一篇比较完整的git批处理：<a href="http://blog.51cto.com/13717297/2136859" rel="external nofollow noopener noreferrer" target="_blank">bat文件方式对git进行操作</a> </p><p>　　以及面对VIM模式：<a href="https://www.cnblogs.com/macliu/p/6062917.html" rel="external nofollow noopener noreferrer" target="_blank">在git bush中如何退出vim编辑器</a> </p><p>还有运行该bat后，github desktop无法提交，提示：failed to receive handshake</p><p>　　其实只要注销重新登录就行的，不过我就去改配置文件，删掉用户信息，提交一遍，再加回去，就正常了。</p><p><img src="/contentimg/14/4.png" alt="Result pic 1" title="配置文件"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>　　后来发现，其实改配置文件，hexo d的时候能两边一起提交的！</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">deploy:</span></span><br><span class="line"><span class="function">  <span class="title">type</span>: <span class="title">git</span></span></span><br><span class="line"><span class="function">  <span class="title">message</span>: [<span class="title">message</span>]</span></span><br><span class="line"><span class="function">  <span class="title">repo</span>:</span></span><br><span class="line"><span class="function">    <span class="title">github</span>: &lt;<span class="title">repository</span> <span class="title">url</span>&gt;,[<span class="title">branch</span>]</span></span><br><span class="line"><span class="function">    <span class="title">gitcafe</span>: &lt;<span class="title">repository</span> <span class="title">url</span>&gt;,[<span class="title">branch</span>]</span></span><br></pre></td></tr></table></figure><p><img src="/contentimg/14/5.png" alt="Result pic 1" title="实际改主配置文件这里"></p><p><img src="/contentimg/14/6.png" alt="Result pic 1" title="官网有说明"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录编写bat自动同步博客到codingpage。&lt;/p&gt;
    
    </summary>
    
      <category term="批处理" scheme="https://YaojiaxinPC.github.io/categories/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
    
      <category term="批处理" scheme="https://YaojiaxinPC.github.io/tags/%E6%89%B9%E5%A4%84%E7%90%86/"/>
    
      <category term="git" scheme="https://YaojiaxinPC.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>修改蜘蛛网悬浮于顶层</title>
    <link href="https://YaojiaxinPC.github.io/13jsclickpass/"/>
    <id>https://YaojiaxinPC.github.io/13jsclickpass/</id>
    <published>2018-10-18T16:01:59.000Z</published>
    <updated>2018-10-18T09:01:38.675Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录我如何修改当前主题NexT中引用的canvas-nest的一些细节。</p><a id="more"></a><p>　　默认NexT主题，蜘蛛网是跟随鼠标运动的，但是我感觉那样不好玩，如果静置的话，会变成一个圈，不好看。然后我浏览了一下整个目录结构，找到</p><p><img src="/contentimg/13/1.png" alt="Result pic 1" title="引用目录结构"></p><p>　　看到有<a href="https://github.com/hustcc/canvas-nest.js" rel="external nofollow noopener noreferrer" target="_blank">canvas-nest</a> 还有<a href="http://fancybox.net/" rel="external nofollow noopener noreferrer" target="_blank">fancybox</a>  。</p><p>　　canvas-nest：蜘蛛网的实现js代码。</p><p>　　fancybox：淡入淡出功能模块。</p><p>　　于是我就想到把蜘蛛网的鼠标部分代码去掉。引入fancybox的淡入淡出动画，点击的时候出现“赞”的图标。</p><p>　　“赞”部分的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(document).bind(&quot;click&quot;,function(e)&#123;var $i = $(&quot;&lt;a style=&apos;border:none;border-bottom:0px&apos;&gt;&quot;).prepend(&quot;&lt;img src=&apos;/images/redhand.png&apos;/&gt;&quot;);var x=e.pageX,y=e.pageY;$i.css(&#123;&quot;z-index&quot;:99999,  </span><br><span class="line"> &quot;top&quot;:y-15,&quot;left&quot;:x,&quot;position&quot;:&quot;absolute&quot;,&quot;color&quot;:&quot;red&quot;&#125;);$(&quot;body&quot;).append($i);$i.animate(&#123;&quot;top&quot;:y-180,&quot;opacity&quot;:0&#125;,1500,function()&#123;$i.remove();&#125;);e.stopPropagation();&#125;);</span><br></pre></td></tr></table></figure><p>　　然后又想到把蜘蛛网放到顶层</p><blockquote><p> zIndex=99</p></blockquote><p>　　结果发现这时候鼠标不能选中代码和文字进行复制了。推测是canvas层挡住了，所以得给它设置穿透：</p><blockquote><p> pointer-events:none;</p></blockquote><p><a href="http://www.css88.com/book/css/properties/user-interface/pointer-events.htm" rel="external nofollow noopener noreferrer" target="_blank">pointer-events</a></p><p><img src="/contentimg/13/2.png" alt="Result pic 2" title="pointer-events"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录我如何修改当前主题NexT中引用的canvas-nest的一些细节。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://YaojiaxinPC.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://YaojiaxinPC.github.io/tags/js/"/>
    
      <category term="canvas-nest" scheme="https://YaojiaxinPC.github.io/tags/canvas-nest/"/>
    
  </entry>
  
  <entry>
    <title>Markdown内嵌html文件</title>
    <link href="https://YaojiaxinPC.github.io/12hottoaddhtml/"/>
    <id>https://YaojiaxinPC.github.io/12hottoaddhtml/</id>
    <published>2018-10-18T15:59:58.000Z</published>
    <updated>2018-10-18T07:34:33.160Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录如何在Markdown内嵌html文件，并设置hexo忽略编译该html。</p><a id="more"></a><p>　　前面一篇博客，我在页面里面嵌入了一个时钟html文件。</p><p>　　到底如何实现的呢？</p><p>　　刚开始，我是直接引用下面这样的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;div style=&quot;width:100%; height:350px;border:none;text-align:center&quot;&gt;</span><br><span class="line">&lt;iframe allowtransparency=&quot;yes&quot; frameborder=&quot;0&quot; width=&quot;300&quot; height=&quot;300&quot; src=&quot;/contentimg/11/click.html&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p><img src="/contentimg/12/1.png" alt="Result pic 1" title="直接嵌入iframe"></p><p>　　Markdown可以插入外部html：利用iframe标签来实现。</p><p>　　实际上，这样还是不行，hexo会自动给该html添加框架的代码，导致实际的效果变成主页嵌套该html代码。</p><p><img src="/contentimg/12/2.png" alt="Result pic 2" title="主页嵌套html"></p><p>　　刚开始没头绪，后面对比文件大小。</p><p><img src="/contentimg/12/3.png" alt="Result pic 3" title="生成public文件比对"></p><p>　　打开看到是加入了框架的代码导致。所以这时候要解决的是怎样让hexo编译的时候忽略该文件不加入框架代码。</p><p>　　还好hexo也考虑到这个问题：</p><p><img src="/contentimg/12/4.png" alt="Result pic 4" title="属性skip_render"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">skip_render: </span><br><span class="line"> - contentimg/<span class="number">11</span>/click.html</span><br><span class="line"> - <span class="number">404</span>/<span class="number">404</span>.html</span><br><span class="line"> - README.md</span><br></pre></td></tr></table></figure><p>　　在这里添加需要忽略编译的文件或文件夹。包括README.md也能这样弄，就不用像我前面的优化博客中提到那样在gulp里面操作复制文件了。</p><p>　　文件夹的话是/*。注意设置完后，需要hexo clean，再hexo g。才能看到效果。不然直接hexo g，是不起效的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录如何在Markdown内嵌html文件，并设置hexo忽略编译该html。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://YaojiaxinPC.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://YaojiaxinPC.github.io/tags/js/"/>
    
      <category term="skip_render" scheme="https://YaojiaxinPC.github.io/tags/skip-render/"/>
    
      <category term="Markdown内嵌html" scheme="https://YaojiaxinPC.github.io/tags/Markdown%E5%86%85%E5%B5%8Chtml/"/>
    
  </entry>
  
  <entry>
    <title>Markdown内嵌前端代码实例--时钟挂件</title>
    <link href="https://YaojiaxinPC.github.io/11clock-js/"/>
    <id>https://YaojiaxinPC.github.io/11clock-js/</id>
    <published>2018-10-18T15:58:58.000Z</published>
    <updated>2018-10-18T07:38:05.225Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文分享一个时钟挂件实例。该部分代码是网上搜索复制来的，非本人版权，请勿用于商业用途。</p><a id="more"></a>  <p><div style="width:100%; height:350px;border:none;text-align:center"><iframe allowtransparency="yes" frameborder="0" width="300" height="300" src="/contentimg/11/click.html"></iframe></div></p><p>　　这里利用iframe引用外部html，同时设置</p><blockquote><p>allowtransparency=”yes” frameborder=”0”</p></blockquote><p>　　让iframe的背景透明，边框消失。</p><blockquote><p>div style=”width:100%; height:350px;border:none;text-align:center”</p></blockquote><p>　　但是此时的iframe是靠左上的。我想居中，就需要利用div来实现。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文分享一个时钟挂件实例。该部分代码是网上搜索复制来的，非本人版权，请勿用于商业用途。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://YaojiaxinPC.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js" scheme="https://YaojiaxinPC.github.io/tags/js/"/>
    
      <category term="时钟挂件" scheme="https://YaojiaxinPC.github.io/tags/%E6%97%B6%E9%92%9F%E6%8C%82%E4%BB%B6/"/>
    
      <category term="Markdown内嵌前端代码" scheme="https://YaojiaxinPC.github.io/tags/Markdown%E5%86%85%E5%B5%8C%E5%89%8D%E7%AB%AF%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg-简单AES加解密记录</title>
    <link href="https://YaojiaxinPC.github.io/10ffmpeg-aes-1/"/>
    <id>https://YaojiaxinPC.github.io/10ffmpeg-aes-1/</id>
    <published>2018-10-18T15:57:58.000Z</published>
    <updated>2018-10-18T08:21:39.014Z</updated>
    
    <content type="html"><![CDATA[<p>　　本文记录如何将浏览器中的视频缓存文件合并成一个mp4文件。该方式使用ffmpeg。视频片段为m3u8格式。</p><a id="more"></a><hr><p>　　视频分段缓存技术之中的一种格式m3u8，据说是苹果开发的。而这里由于有ffmpeg工具，运用起来很快捷，当然也可以自己写代码集成一个播放器。本文暂时只记录简单的运用ffmpeg工具加解密和播放。代码集成等后面有空再分享。</p><p>观摩这项技术时参考的几篇文章分享如下：</p><p><a href="https://blog.csdn.net/psh18513234633/article/details/79312607" rel="external nofollow noopener noreferrer" target="_blank">使用ffmpeg转码m3u8并播放</a></p><p><a href="https://blog.csdn.net/weiyuefei/article/details/70257616" rel="external nofollow noopener noreferrer" target="_blank">hls协议（最清晰的讲解）</a></p><p><a href="https://blog.csdn.net/newarow/article/details/82805672" rel="external nofollow noopener noreferrer" target="_blank">流媒体开发之–HLS–M3U8解析(2): HLS草案</a></p><p><a href="https://gist.github.com/larvata/95df619df7109d8b74d2b965a3266354#file-ffmpeg-cheatsheet-md" rel="external nofollow noopener noreferrer" target="_blank">ffmpeg Cheatsheet</a></p><p><a href="https://www.cnblogs.com/codeAB/p/9184266.html" rel="external nofollow noopener noreferrer" target="_blank">使用ffmpeg视频切片并加密</a></p><p><a href="https://blog.csdn.net/cnhome/article/details/73250495" rel="external nofollow noopener noreferrer" target="_blank">ffmpeg分解视频文件并加密</a></p><p><a href="https://blog.csdn.net/xuyankuanrong/article/details/77529468" rel="external nofollow noopener noreferrer" target="_blank">FFmpeg之ffplay命令使用</a></p><p>还有一些cmd操作：</p><p><a href="https://blog.csdn.net/xhhjin/article/details/7373524" rel="external nofollow noopener noreferrer" target="_blank">CMD批处理循环，太强大了</a></p><p><a href="http://www.360doc.com/content/14/0212/22/9849466_352039289.shtml" rel="external nofollow noopener noreferrer" target="_blank">copy /b 命令无缝合并多个文件</a></p><p>　　当然还有其他很多参考过的网页，但是都很散，有用信息不多，暂不分享那些网页。</p><p>　　这项技术运用在很多浏览器上，所以想找东西练手，还是蛮多的（某些想下载但是没提示下载的视频，实际上是放在缓存文件夹里面，然后本地加载拼起来的）。</p><p>这里我就简单分享一下如何自己用ffmepg对一个视频加密，以及解密该视频。</p><p>目前我接触到3种情况：</p><ol><li><p>未加密的视频，用PotPlayer可以直接打开观看；</p></li><li><p>有AES的key，没IV（其实就是使用了默认值），部分有两个m3u8；</p></li><li><p>有AES的key和IV，就是下面将要分享的操作。</p></li></ol><p>　　目前要使用的工具，首先必须要有<a href="https://www.ffmpeg.org/download.html" rel="external nofollow noopener noreferrer" target="_blank">ffmepg</a> ，下载成已经Build好的包，不然自己来生成比较麻烦，当然，有兴趣可以下载代码来看，是开源的。</p><p><img src="/contentimg/10/1.png" alt="Result pic 1" title="下载ffmpeg"> </p><p>　　生成key部分我使用了<a href="http://gnuwin32.sourceforge.net/packages/openssl.htm" rel="external nofollow noopener noreferrer" target="_blank">Openssl</a>  ，功能超级多，但是本文只用到简单的生成随机密码。好像是我下载不对，操作发现不支持hex，所以后面生成hex部分得写一下代码处理，当然也有网页生成，数据库生成，这里就不写明了。</p><p><img src="/contentimg/10/2.png" alt="Result pic 2" title="下载openssl"> </p><p>　　然后就是准备一个视频。我这次下载了这些东西：</p><p><img src="/contentimg/10/3.png" alt="Result pic 3" title="全部所需东西"> </p><p>　　接下来就开始动手：（实际不用Openssl也行，直接手动写几个编码当密码就行）</p><p><img src="/contentimg/10/4.png" alt="Result pic 4" title="缓存目录结构"></p><p>　　通过上面推荐的链接，大家应该知道是主要m3u8文件，然后附带的ts文件（可以不写后缀，就是些视频片段，可以在播放器中打开观看），key（会改变视频片段的编码，导致无法播放）。</p><p>　　这里的m3u8可以用播放器打开，正常是会报错的，因为视频片段被AES加密了编码模式，所以普通读取出来不是正常的头，就报错了。</p><p><img src="/contentimg/10/5.png" alt="Result pic 5" title="无法打开加密文件"></p><p>　　如果你遇到的m3u8没有加密，那这里是打开可以播放的。上面那些ts也是可以直接播放器打开的。</p><p>　　一般情况下，m3u8文件可能需要进行修改。就是当你操作的是手机端，把缓存搞在电脑上转码时（或者从C盘缓存目录拷贝出来时），里面的路径是不对的，里面记录的是绝对路径，需要修改。像下面图片，手机拷过来后是手机上的绝对路径，用记事本ctrl + H，该成电脑上的当前路径后就能用了（或者删掉变成相对路径）。</p><p><img src="/contentimg/10/6.png" alt="Result pic 6" title="修改路径"></p><p>现在从头开始做吧。</p><p>　　目前我们手上只有一个test.mp4，先介绍不加密的方式分段生成m3u8。</p><h2 id="无加密方式生成m3u8"><a href="#无加密方式生成m3u8" class="headerlink" title="无加密方式生成m3u8"></a>无加密方式生成m3u8</h2><p>　　新建一个文件夹来放置后面要生成的ts文件。</p><p>　　先用管理员身份运行cmd：</p><p>　　cd到ffmpeg.exe所在的地方（不过我推荐是cd到要生成文件的地方，然后ffmpeg.exe弄成全路径来执行，效率会高一些）。</p><p>　　例如我test.mp4在D:\aa\bb目录下：</p><p>　　这样我在cmd中输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg.exe -y -i D:\aa\bb\test.mp4 -hls_time <span class="number">6</span> -hls_playlist_type vod -hls_segment_filename "D:\aa\bb\file%d" D:\aa\bb\playlist.m3u8</span><br></pre></td></tr></table></figure><p>　　-hls_time  是每一段视频多长时间</p><p>　　-hls_segment_filename   分段生成在哪里，命名规则%d</p><p>　　以及结尾的m3u8输出路径</p><p><img src="/contentimg/10/7.png" alt="Result pic 7" title="处理无加密方式片段"></p><p>　　目录下已经生成分段文件+m3u8文件了，由于这里没有加密，所以分段文件可以用播放器直接打开。当然也可以直接打开m3u8文件。</p><p><img src="/contentimg/10/8.png" alt="Result pic 8" title="无加密playlist.m3u8"></p><p>这里插播一下ffplay的使用：</p><p><img src="/contentimg/10/9.png" alt="Result pic 9" title="使用ffplay播放视频"></p><p>　　指令中要注意的就是路径，从前面我们知道是m3u8中记录是用相对路径，所以需要把cmd移到该目录下，然后用ffplay的全路径 + -allowed_extensions ALL （就是允许全部后缀模式，否则没后缀的不让播放） +m3u8 + 回车</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">aa</span>\<span class="title">ffmpeg</span>-4.0.2-<span class="title">win64</span>-<span class="title">static</span>\<span class="title">bin</span>\<span class="title">ffplay.exe</span> -<span class="title">allowed_extensions</span> <span class="title">ALL</span> <span class="title">playlist.m3u8</span></span></span><br></pre></td></tr></table></figure><p>　　既然提到分段，那就有合并了。</p><p>　　由于这里没有使用加密，所以可以直接把全部ts文件合并成一个文件就行。</p><p>　　可以cmd直接合并，但是需要提前处理命名规则，因为cmd按字符比较的，01和1是两种不同的概念，这里可以写个循环处理改命名，然后再用cmd的copy /b * new.mp4。</p><p>　　cmd代码不好写。所以推荐还是用ffmpeg。</p><p>代码如下：合并并转码成mp4格式<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">aa</span>\<span class="title">ffmpeg</span>-4.0.2-<span class="title">win64</span>-<span class="title">static</span>\<span class="title">bin</span>\<span class="title">ffmpeg.exe</span> -<span class="title">allowed_extensions</span> <span class="title">ALL</span> -<span class="title">i</span> <span class="title">playlist.m3u8</span> -<span class="title">acodec</span> <span class="title">copy</span> -<span class="title">vcodec</span> <span class="title">copy</span> -<span class="title">f</span> <span class="title">mp4</span> <span class="title">output.mp4</span></span></span><br></pre></td></tr></table></figure></p><p><img src="/contentimg/10/10.png" alt="Result pic 10" title="合并并转码成mp4格式"></p><h2 id="加密方式生成m3u8"><a href="#加密方式生成m3u8" class="headerlink" title="加密方式生成m3u8"></a>加密方式生成m3u8</h2><p>　　有了前面那些截图，这里的操作其实就是多了写密码步骤而已，其他大部分一样，所以这里就不再截图了。</p><p>　　加密，目前我看的是AES。概念那些大家有空去了解一下，这里只分享一下怎么用。</p><p>具体步骤是：<a href="https://www.cnblogs.com/codeAB/p/9184266.html" rel="external nofollow noopener noreferrer" target="_blank">使用ffmpeg视频切片并加密</a>  </p><p>　　然后里面一些参数，其实在源文件里面已经有了，可以找这些文档来弄明白设置什么参数：</p><p><img src="/contentimg/10/11.png" alt="Result pic 11" title="源文件说明文档"></p><p>　　这里我多分享一下直接用一个key来加密怎么操作吧。就是手上有一个密码+一个视频，弄到最后是一个放密码的文本文件，然后就是ts+m3u8，没有IV。</p><p>　　其实就是前面步骤中，enc.keyinfo中第三行的IV删掉就行。</p><p>　　同时步骤一中用openssl生成key的，改成：新建文本文件，写入密码后保存，然后删掉后缀当key。</p><p>其他照旧：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">aa</span>\<span class="title">ffmpeg</span>-4.0.2-<span class="title">win64</span>-<span class="title">static</span>\<span class="title">bin</span>\<span class="title">ffmpeg.exe</span> -<span class="title">y</span> -<span class="title">i</span> <span class="title">test.mp4</span> -<span class="title">hls_time</span> 6 -<span class="title">hls_key_info_file</span> <span class="title">k0.keyinfo</span> -<span class="title">hls_playlist_type</span> <span class="title">vod</span> -<span class="title">hls_segment_filename</span> "<span class="title">file</span>%<span class="title">d</span>" <span class="title">playlist.m3u8</span></span></span><br></pre></td></tr></table></figure><p><img src="/contentimg/10/12.png" alt="Result pic 12" title="加密方式m3u8文件"></p><p>　　密码文件k0，用openssl生成的话，打开是乱码的，自己写入的就不会乱码，使用起来暂时未发现区别：</p><p><img src="/contentimg/10/13.png" alt="Result pic 13" title="密码文件"></p><p>　　加密方式生成的ts文件，你会发现无法用播放器打开，只能用ffplay打开（打开方式同无加密一样的代码，都是直接传入m3u8文件即可）。</p><p>　　这样解密方式，实际也和前面一样，都是围绕m3u8，是否有key，实际都是内部处理的。</p><p>这里可能会遇到问题的是，网上的都是说EXT-X-KEY这里的是http，实际都可以，找得到文件就行。然后就是开头提的两个m3u8的，这个就溜一点：</p><p>　　改EXT-X-KEY的文件地址为key的本地地址后，发现这样去转是失败的（提示找不到ts文件），这时可以把下面的一堆ts信息，换成另一个m3u8里面的ts信息，就可以转换了。我遇到的情况，是第一个ts信息是本地文件，第二个是一个找不到的路径的文件（但是这个带key，第一个不带），修改成本地文件后，除了#EXTINF的数字不同外，其他都一样（文件也能找到了），结果还是报错，就把那个m3u8的ts信息都复制过来（#EXTINF的数字保持一样），本个m3u8只保留EXT-X-KEY这里的URI=”k0”，其他都是用另一个m3u8的，就可以转换了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　本文记录如何将浏览器中的视频缓存文件合并成一个mp4文件。该方式使用ffmpeg。视频片段为m3u8格式。&lt;/p&gt;
    
    </summary>
    
      <category term="编程人生" scheme="https://YaojiaxinPC.github.io/categories/%E7%BC%96%E7%A8%8B%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="视频处理" scheme="https://YaojiaxinPC.github.io/tags/%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86/"/>
    
      <category term="工具使用" scheme="https://YaojiaxinPC.github.io/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
      <category term="ffmpeg" scheme="https://YaojiaxinPC.github.io/tags/ffmpeg/"/>
    
  </entry>
  
</feed>
